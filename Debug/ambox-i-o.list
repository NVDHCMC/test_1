
D:\Dong\17AMBOX_STECC\ambox-i-o\Debug\ambox-i-o.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a81c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000000  0800ac08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002544  20000200  0800ae08  00020200  2**3
                  ALLOC
  7 ._user_heap_stack 00000100  20002744  0800ae08  00022744  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  9 .debug_info   000124e2  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041ce  00000000  00000000  0003270b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001580  00000000  00000000  000368e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012a8  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a5c8  00000000  00000000  00039108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006ac3  00000000  00000000  000436d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0004a193  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005b64  00000000  00000000  0004a214  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000009c  00000000  00000000  0004fd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  0004fe14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a914 	.word	0x0800a914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800a914 	.word	0x0800a914

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <__aeabi_d2f>:
 8000924:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800092c:	bf24      	itt	cs
 800092e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000936:	d90d      	bls.n	8000954 <__aeabi_d2f+0x30>
 8000938:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800093c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000944:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800094c:	bf08      	it	eq
 800094e:	f020 0001 	biceq.w	r0, r0, #1
 8000952:	4770      	bx	lr
 8000954:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000958:	d121      	bne.n	800099e <__aeabi_d2f+0x7a>
 800095a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800095e:	bfbc      	itt	lt
 8000960:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000964:	4770      	bxlt	lr
 8000966:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800096e:	f1c2 0218 	rsb	r2, r2, #24
 8000972:	f1c2 0c20 	rsb	ip, r2, #32
 8000976:	fa10 f30c 	lsls.w	r3, r0, ip
 800097a:	fa20 f002 	lsr.w	r0, r0, r2
 800097e:	bf18      	it	ne
 8000980:	f040 0001 	orrne.w	r0, r0, #1
 8000984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800098c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000990:	ea40 000c 	orr.w	r0, r0, ip
 8000994:	fa23 f302 	lsr.w	r3, r3, r2
 8000998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800099c:	e7cc      	b.n	8000938 <__aeabi_d2f+0x14>
 800099e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a2:	d107      	bne.n	80009b4 <__aeabi_d2f+0x90>
 80009a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a8:	bf1e      	ittt	ne
 80009aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b2:	4770      	bxne	lr
 80009b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_frsub>:
 80009c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c8:	e002      	b.n	80009d0 <__addsf3>
 80009ca:	bf00      	nop

080009cc <__aeabi_fsub>:
 80009cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d0 <__addsf3>:
 80009d0:	0042      	lsls	r2, r0, #1
 80009d2:	bf1f      	itttt	ne
 80009d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d8:	ea92 0f03 	teqne	r2, r3
 80009dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e4:	d06a      	beq.n	8000abc <__addsf3+0xec>
 80009e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ee:	bfc1      	itttt	gt
 80009f0:	18d2      	addgt	r2, r2, r3
 80009f2:	4041      	eorgt	r1, r0
 80009f4:	4048      	eorgt	r0, r1
 80009f6:	4041      	eorgt	r1, r0
 80009f8:	bfb8      	it	lt
 80009fa:	425b      	neglt	r3, r3
 80009fc:	2b19      	cmp	r3, #25
 80009fe:	bf88      	it	hi
 8000a00:	4770      	bxhi	lr
 8000a02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4240      	negne	r0, r0
 8000a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a1e:	bf18      	it	ne
 8000a20:	4249      	negne	r1, r1
 8000a22:	ea92 0f03 	teq	r2, r3
 8000a26:	d03f      	beq.n	8000aa8 <__addsf3+0xd8>
 8000a28:	f1a2 0201 	sub.w	r2, r2, #1
 8000a2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a30:	eb10 000c 	adds.w	r0, r0, ip
 8000a34:	f1c3 0320 	rsb	r3, r3, #32
 8000a38:	fa01 f103 	lsl.w	r1, r1, r3
 8000a3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a40:	d502      	bpl.n	8000a48 <__addsf3+0x78>
 8000a42:	4249      	negs	r1, r1
 8000a44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a4c:	d313      	bcc.n	8000a76 <__addsf3+0xa6>
 8000a4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a52:	d306      	bcc.n	8000a62 <__addsf3+0x92>
 8000a54:	0840      	lsrs	r0, r0, #1
 8000a56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a5a:	f102 0201 	add.w	r2, r2, #1
 8000a5e:	2afe      	cmp	r2, #254	; 0xfe
 8000a60:	d251      	bcs.n	8000b06 <__addsf3+0x136>
 8000a62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a6a:	bf08      	it	eq
 8000a6c:	f020 0001 	biceq.w	r0, r0, #1
 8000a70:	ea40 0003 	orr.w	r0, r0, r3
 8000a74:	4770      	bx	lr
 8000a76:	0049      	lsls	r1, r1, #1
 8000a78:	eb40 0000 	adc.w	r0, r0, r0
 8000a7c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	d1ed      	bne.n	8000a62 <__addsf3+0x92>
 8000a86:	fab0 fc80 	clz	ip, r0
 8000a8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a96:	bfaa      	itet	ge
 8000a98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a9c:	4252      	neglt	r2, r2
 8000a9e:	4318      	orrge	r0, r3
 8000aa0:	bfbc      	itt	lt
 8000aa2:	40d0      	lsrlt	r0, r2
 8000aa4:	4318      	orrlt	r0, r3
 8000aa6:	4770      	bx	lr
 8000aa8:	f092 0f00 	teq	r2, #0
 8000aac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab0:	bf06      	itte	eq
 8000ab2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ab6:	3201      	addeq	r2, #1
 8000ab8:	3b01      	subne	r3, #1
 8000aba:	e7b5      	b.n	8000a28 <__addsf3+0x58>
 8000abc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aca:	d021      	beq.n	8000b10 <__addsf3+0x140>
 8000acc:	ea92 0f03 	teq	r2, r3
 8000ad0:	d004      	beq.n	8000adc <__addsf3+0x10c>
 8000ad2:	f092 0f00 	teq	r2, #0
 8000ad6:	bf08      	it	eq
 8000ad8:	4608      	moveq	r0, r1
 8000ada:	4770      	bx	lr
 8000adc:	ea90 0f01 	teq	r0, r1
 8000ae0:	bf1c      	itt	ne
 8000ae2:	2000      	movne	r0, #0
 8000ae4:	4770      	bxne	lr
 8000ae6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aea:	d104      	bne.n	8000af6 <__addsf3+0x126>
 8000aec:	0040      	lsls	r0, r0, #1
 8000aee:	bf28      	it	cs
 8000af0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000afa:	bf3c      	itt	cc
 8000afc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bxcc	lr
 8000b02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	4770      	bx	lr
 8000b10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b14:	bf16      	itet	ne
 8000b16:	4608      	movne	r0, r1
 8000b18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b1c:	4601      	movne	r1, r0
 8000b1e:	0242      	lsls	r2, r0, #9
 8000b20:	bf06      	itte	eq
 8000b22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b26:	ea90 0f01 	teqeq	r0, r1
 8000b2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_ui2f>:
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e004      	b.n	8000b40 <__aeabi_i2f+0x8>
 8000b36:	bf00      	nop

08000b38 <__aeabi_i2f>:
 8000b38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	bf48      	it	mi
 8000b3e:	4240      	negmi	r0, r0
 8000b40:	ea5f 0c00 	movs.w	ip, r0
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b4c:	4601      	mov	r1, r0
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	e01c      	b.n	8000b8e <__aeabi_l2f+0x2a>

08000b54 <__aeabi_ul2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	e00a      	b.n	8000b78 <__aeabi_l2f+0x14>
 8000b62:	bf00      	nop

08000b64 <__aeabi_l2f>:
 8000b64:	ea50 0201 	orrs.w	r2, r0, r1
 8000b68:	bf08      	it	eq
 8000b6a:	4770      	bxeq	lr
 8000b6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__aeabi_l2f+0x14>
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	ea5f 0c01 	movs.w	ip, r1
 8000b7c:	bf02      	ittt	eq
 8000b7e:	4684      	moveq	ip, r0
 8000b80:	4601      	moveq	r1, r0
 8000b82:	2000      	moveq	r0, #0
 8000b84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b88:	bf08      	it	eq
 8000b8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b92:	fabc f28c 	clz	r2, ip
 8000b96:	3a08      	subs	r2, #8
 8000b98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b9c:	db10      	blt.n	8000bc0 <__aeabi_l2f+0x5c>
 8000b9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba8:	f1c2 0220 	rsb	r2, r2, #32
 8000bac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb4:	eb43 0002 	adc.w	r0, r3, r2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f102 0220 	add.w	r2, r2, #32
 8000bc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc8:	f1c2 0220 	rsb	r2, r2, #32
 8000bcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bd4:	eb43 0002 	adc.w	r0, r3, r2
 8000bd8:	bf08      	it	eq
 8000bda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_fmul>:
 8000be0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000be4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000be8:	bf1e      	ittt	ne
 8000bea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bee:	ea92 0f0c 	teqne	r2, ip
 8000bf2:	ea93 0f0c 	teqne	r3, ip
 8000bf6:	d06f      	beq.n	8000cd8 <__aeabi_fmul+0xf8>
 8000bf8:	441a      	add	r2, r3
 8000bfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000bfe:	0240      	lsls	r0, r0, #9
 8000c00:	bf18      	it	ne
 8000c02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c06:	d01e      	beq.n	8000c46 <__aeabi_fmul+0x66>
 8000c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c14:	fba0 3101 	umull	r3, r1, r0, r1
 8000c18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c20:	bf3e      	ittt	cc
 8000c22:	0049      	lslcc	r1, r1, #1
 8000c24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c28:	005b      	lslcc	r3, r3, #1
 8000c2a:	ea40 0001 	orr.w	r0, r0, r1
 8000c2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c32:	2afd      	cmp	r2, #253	; 0xfd
 8000c34:	d81d      	bhi.n	8000c72 <__aeabi_fmul+0x92>
 8000c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c4e:	bf08      	it	eq
 8000c50:	0249      	lsleq	r1, r1, #9
 8000c52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c5a:	3a7f      	subs	r2, #127	; 0x7f
 8000c5c:	bfc2      	ittt	gt
 8000c5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c66:	4770      	bxgt	lr
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	3a01      	subs	r2, #1
 8000c72:	dc5d      	bgt.n	8000d30 <__aeabi_fmul+0x150>
 8000c74:	f112 0f19 	cmn.w	r2, #25
 8000c78:	bfdc      	itt	le
 8000c7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bxle	lr
 8000c80:	f1c2 0200 	rsb	r2, r2, #0
 8000c84:	0041      	lsls	r1, r0, #1
 8000c86:	fa21 f102 	lsr.w	r1, r1, r2
 8000c8a:	f1c2 0220 	rsb	r2, r2, #32
 8000c8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c96:	f140 0000 	adc.w	r0, r0, #0
 8000c9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c9e:	bf08      	it	eq
 8000ca0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca4:	4770      	bx	lr
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0040      	lsleq	r0, r0, #1
 8000cb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cb6:	3a01      	subeq	r2, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xce>
 8000cba:	ea40 000c 	orr.w	r0, r0, ip
 8000cbe:	f093 0f00 	teq	r3, #0
 8000cc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0049      	lsleq	r1, r1, #1
 8000cca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cce:	3b01      	subeq	r3, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xe6>
 8000cd2:	ea41 010c 	orr.w	r1, r1, ip
 8000cd6:	e78f      	b.n	8000bf8 <__aeabi_fmul+0x18>
 8000cd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	bf18      	it	ne
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d00a      	beq.n	8000cfe <__aeabi_fmul+0x11e>
 8000ce8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cec:	bf18      	it	ne
 8000cee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cf2:	d1d8      	bne.n	8000ca6 <__aeabi_fmul+0xc6>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f090 0f00 	teq	r0, #0
 8000d02:	bf17      	itett	ne
 8000d04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	f091 0f00 	teqne	r1, #0
 8000d0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d12:	d014      	beq.n	8000d3e <__aeabi_fmul+0x15e>
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	d101      	bne.n	8000d1e <__aeabi_fmul+0x13e>
 8000d1a:	0242      	lsls	r2, r0, #9
 8000d1c:	d10f      	bne.n	8000d3e <__aeabi_fmul+0x15e>
 8000d1e:	ea93 0f0c 	teq	r3, ip
 8000d22:	d103      	bne.n	8000d2c <__aeabi_fmul+0x14c>
 8000d24:	024b      	lsls	r3, r1, #9
 8000d26:	bf18      	it	ne
 8000d28:	4608      	movne	r0, r1
 8000d2a:	d108      	bne.n	8000d3e <__aeabi_fmul+0x15e>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bx	lr
 8000d3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fdiv>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d069      	beq.n	8000e34 <__aeabi_fdiv+0xec>
 8000d60:	eba2 0203 	sub.w	r2, r2, r3
 8000d64:	ea80 0c01 	eor.w	ip, r0, r1
 8000d68:	0249      	lsls	r1, r1, #9
 8000d6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d6e:	d037      	beq.n	8000de0 <__aeabi_fdiv+0x98>
 8000d70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	428b      	cmp	r3, r1
 8000d82:	bf38      	it	cc
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	bf24      	itt	cs
 8000d92:	1a5b      	subcs	r3, r3, r1
 8000d94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d9c:	bf24      	itt	cs
 8000d9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000da2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000da6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000daa:	bf24      	itt	cs
 8000dac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000db4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000db8:	bf24      	itt	cs
 8000dba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dca:	d1e0      	bne.n	8000d8e <__aeabi_fdiv+0x46>
 8000dcc:	2afd      	cmp	r2, #253	; 0xfd
 8000dce:	f63f af50 	bhi.w	8000c72 <__aeabi_fmul+0x92>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd8:	bf08      	it	eq
 8000dda:	f020 0001 	biceq.w	r0, r0, #1
 8000dde:	4770      	bx	lr
 8000de0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de8:	327f      	adds	r2, #127	; 0x7f
 8000dea:	bfc2      	ittt	gt
 8000dec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df4:	4770      	bxgt	lr
 8000df6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	3a01      	subs	r2, #1
 8000e00:	e737      	b.n	8000c72 <__aeabi_fmul+0x92>
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xc2>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xda>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e795      	b.n	8000d60 <__aeabi_fdiv+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d108      	bne.n	8000e50 <__aeabi_fdiv+0x108>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	f47f af7d 	bne.w	8000d3e <__aeabi_fmul+0x15e>
 8000e44:	ea93 0f0c 	teq	r3, ip
 8000e48:	f47f af70 	bne.w	8000d2c <__aeabi_fmul+0x14c>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e776      	b.n	8000d3e <__aeabi_fmul+0x15e>
 8000e50:	ea93 0f0c 	teq	r3, ip
 8000e54:	d104      	bne.n	8000e60 <__aeabi_fdiv+0x118>
 8000e56:	024b      	lsls	r3, r1, #9
 8000e58:	f43f af4c 	beq.w	8000cf4 <__aeabi_fmul+0x114>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e76e      	b.n	8000d3e <__aeabi_fmul+0x15e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1ca      	bne.n	8000e02 <__aeabi_fdiv+0xba>
 8000e6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e70:	f47f af5c 	bne.w	8000d2c <__aeabi_fmul+0x14c>
 8000e74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e78:	f47f af3c 	bne.w	8000cf4 <__aeabi_fmul+0x114>
 8000e7c:	e75f      	b.n	8000d3e <__aeabi_fmul+0x15e>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_f2iz>:
 8000e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e88:	d30f      	bcc.n	8000eaa <__aeabi_f2iz+0x2a>
 8000e8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e92:	d90d      	bls.n	8000eb0 <__aeabi_f2iz+0x30>
 8000e94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ea0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea4:	bf18      	it	ne
 8000ea6:	4240      	negne	r0, r0
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2iz+0x3a>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d105      	bne.n	8000ec6 <__aeabi_f2iz+0x46>
 8000eba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ebe:	bf08      	it	eq
 8000ec0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0000 	mov.w	r0, #0
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_f2uiz>:
 8000ecc:	0042      	lsls	r2, r0, #1
 8000ece:	d20e      	bcs.n	8000eee <__aeabi_f2uiz+0x22>
 8000ed0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ed4:	d30b      	bcc.n	8000eee <__aeabi_f2uiz+0x22>
 8000ed6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ede:	d409      	bmi.n	8000ef4 <__aeabi_f2uiz+0x28>
 8000ee0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ee8:	fa23 f002 	lsr.w	r0, r3, r2
 8000eec:	4770      	bx	lr
 8000eee:	f04f 0000 	mov.w	r0, #0
 8000ef2:	4770      	bx	lr
 8000ef4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ef8:	d101      	bne.n	8000efe <__aeabi_f2uiz+0x32>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	d102      	bne.n	8000f04 <__aeabi_f2uiz+0x38>
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	4770      	bx	lr
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <ADCT_BGS_ASW_100ms_TaskHandler>:
#include "ADCT_DHT22.h"
#include "ADCT_PhSensor.h"
extern FPT_SystemStatus    GstSystemStatus;
ADCT_BGS_ASW_TaskDatatypes g_ASW_Task_flag;
void ADCT_BGS_ASW_100ms_TaskHandler(TM_DELAY_Timer_t* timer, void * parameter)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	(void)timer;
	(void)parameter;
	ADCT_Ph_GetSample(&Data_avai);
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <ADCT_BGS_ASW_100ms_TaskHandler+0x24>)
 8000f18:	f005 fbe2 	bl	80066e0 <ADCT_Ph_GetSample>
	ADCT_DHT22_FPT_GetValue(&GstSystemStatus.dhtData);
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <ADCT_BGS_ASW_100ms_TaskHandler+0x28>)
 8000f1e:	f002 f973 	bl	8003208 <ADCT_DHT22_FPT_GetValue>
	g_ASW_Task_flag.ASW_100ms_flag = TRUE;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <ADCT_BGS_ASW_100ms_TaskHandler+0x2c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	705a      	strb	r2, [r3, #1]
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20002451 	.word	0x20002451
 8000f34:	2000256e 	.word	0x2000256e
 8000f38:	20002488 	.word	0x20002488

08000f3c <ADCT_BGS_ASW_100ms_Init>:
void ADCT_BGS_ASW_100ms_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af02      	add	r7, sp, #8
	TM_DELAY_TimerCreate(100, 1, 1, ADCT_BGS_ASW_100ms_TaskHandler, NULL);
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <ADCT_BGS_ASW_100ms_Init+0x1c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f006 f9ef 	bl	8007330 <TM_DELAY_TimerCreate>
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08000f0d 	.word	0x08000f0d

08000f5c <ADCT_BGS_ASW_10ms_TaskHandler>:

void ADCT_BGS_ASW_10ms_TaskHandler(TM_DELAY_Timer_t* timer, void * parameter)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	(void)timer;
	(void)parameter;
	g_ASW_Task_flag.ASW_10ms_flag = ADCT_TRUE;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <ADCT_BGS_ASW_10ms_TaskHandler+0x1c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	709a      	strb	r2, [r3, #2]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20002488 	.word	0x20002488

08000f7c <ADCT_BGS_ASW_1ms_TaskHandler>:

void ADCT_BGS_ASW_1ms_TaskHandler(TM_DELAY_Timer_t* timer, void * parameter)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	(void)timer;
	(void)parameter;
	g_ASW_Task_flag.ASW_1ms_flag = ADCT_TRUE;
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <ADCT_BGS_ASW_1ms_TaskHandler+0x1c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	70da      	strb	r2, [r3, #3]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20002488 	.word	0x20002488

08000f9c <ADCT_BGS_ASW_1s_TaskHandler>:

void ADCT_BGS_ASW_1s_TaskHandler(TM_DELAY_Timer_t* timer, void * parameter)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	(void)timer;
	(void)parameter;
	g_ASW_Task_flag.ASW_1s_flag = ADCT_TRUE;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <ADCT_BGS_ASW_1s_TaskHandler+0x1c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]

}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20002488 	.word	0x20002488

08000fbc <ADCT_BGS_ASW_10ms_Init>:
void ADCT_BGS_ASW_10ms_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8
	g_ASW_Task_flag.ASW_10ms_flag = ADCT_FALSE;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <ADCT_BGS_ASW_10ms_Init+0x24>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	709a      	strb	r2, [r3, #2]
	TM_DELAY_TimerCreate(10, 1, 1, ADCT_BGS_ASW_10ms_TaskHandler, NULL);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <ADCT_BGS_ASW_10ms_Init+0x28>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f006 f9ac 	bl	8007330 <TM_DELAY_TimerCreate>
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20002488 	.word	0x20002488
 8000fe4:	08000f5d 	.word	0x08000f5d

08000fe8 <ADCT_BGS_ASW_1ms_Init>:

void ADCT_BGS_ASW_1ms_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af02      	add	r7, sp, #8
	g_ASW_Task_flag.ASW_1ms_flag =ADCT_FALSE;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <ADCT_BGS_ASW_1ms_Init+0x24>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	70da      	strb	r2, [r3, #3]
	TM_DELAY_TimerCreate(1, 1, 1, ADCT_BGS_ASW_1ms_TaskHandler, NULL);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <ADCT_BGS_ASW_1ms_Init+0x28>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f006 f996 	bl	8007330 <TM_DELAY_TimerCreate>
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20002488 	.word	0x20002488
 8001010:	08000f7d 	.word	0x08000f7d

08001014 <ADCT_BGS_ASW_1s_Init>:

void ADCT_BGS_ASW_1s_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af02      	add	r7, sp, #8
	g_ASW_Task_flag.ASW_1s_flag =ADCT_FALSE;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <ADCT_BGS_ASW_1s_Init+0x24>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	TM_DELAY_TimerCreate(1000, 1, 1, ADCT_BGS_ASW_1s_TaskHandler, NULL);
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <ADCT_BGS_ASW_1s_Init+0x28>)
 8001026:	2201      	movs	r2, #1
 8001028:	2101      	movs	r1, #1
 800102a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102e:	f006 f97f 	bl	8007330 <TM_DELAY_TimerCreate>
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20002488 	.word	0x20002488
 800103c:	08000f9d 	.word	0x08000f9d

08001040 <adct_bgs_choose_views>:
void adct_bgs_choose_datalog    (void);
void adct_bgs_runstate_idle     (void);
void adct_bgs_runstate_alarm    (void);
void adct_bgs_view_datalog		(void);
void adct_bgs_choose_views		(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
#ifdef ADCT_BGS_USE_STANDALONE
	sprintf(LCD_Buffer.lcd_line1, "EN  -> CAI DAT  ");
	sprintf(LCD_Buffer.lcd_line2, "UP-> XEM NHAT KY");
	(void)lcd_update(LCD_Buffer.lcd_line1, LCD_Buffer.lcd_line2);
#endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <adct_bgs_enter_parameter>:
void adct_bgs_enter_parameter(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <adct_bgs_choose_datalog>:
void adct_bgs_choose_datalog(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
#ifdef ADCT_BGS_USE_STANDALONE
	sprintf(LCD_Buffer.lcd_line1, "EN  -> CAI DAT  ");
	sprintf(LCD_Buffer.lcd_line2, "UP-> XEM NHAT KY");
	(void)lcd_update(LCD_Buffer.lcd_line1, LCD_Buffer.lcd_line2);
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <adct_bgs_runstate_idle>:
void adct_bgs_runstate_idle(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
#ifdef ADCT_BGS_USE_STANDALONE
	sprintf(LCD_Buffer.lcd_line1, "    ADCTTeam    ");
	sprintf(LCD_Buffer.lcd_line2, "  GIAM SAT V1.0 ");
	(void)lcd_update(LCD_Buffer.lcd_line1, LCD_Buffer.lcd_line2);
#endif
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <adct_bgs_runstate_alarm>:
void adct_bgs_runstate_alarm(void)

{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
#ifdef ADCT_BGS_USE_STANDALONE
	sprintf(LCD_Buffer.lcd_line1, "CANH BAO CO LUA ");
	sprintf(LCD_Buffer.lcd_line2, "                ");
	(void)lcd_update(LCD_Buffer.lcd_line1, LCD_Buffer.lcd_line2);
#endif
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <adct_bgs_view_datalog>:
void adct_bgs_view_datalog(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <BUTTON_ENTER_Callback>:
		}
};


void BUTTON_ENTER_Callback(TM_BUTTON_t* ButtonPtr, TM_BUTTON_PressType_t PressType)
 {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]

	(void)(ButtonPtr);
	(void)(PressType);
	 if(adct_bgs_main_state_table[ActState][ENTER_BUTTON].ptrFunct != NULL)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <BUTTON_ENTER_Callback+0x5c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <BUTTON_ENTER_Callback+0x60>)
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d017      	beq.n	80010dc <BUTTON_ENTER_Callback+0x54>
	 {
		 adct_bgs_main_state_table[ActState][ENTER_BUTTON].ptrFunct();
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <BUTTON_ENTER_Callback+0x5c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <BUTTON_ENTER_Callback+0x60>)
 80010b4:	460b      	mov	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4798      	blx	r3
		 ActState =  adct_bgs_main_state_table[ActState][ENTER_BUTTON].NextState;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <BUTTON_ENTER_Callback+0x5c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <BUTTON_ENTER_Callback+0x60>)
 80010ca:	460b      	mov	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <BUTTON_ENTER_Callback+0x5c>)
 80010da:	701a      	strb	r2, [r3, #0]
	 }
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	20000000 	.word	0x20000000

080010ec <BUTTON_CANCEL_Callback>:
 void BUTTON_CANCEL_Callback(TM_BUTTON_t* ButtonPtr, TM_BUTTON_PressType_t PressType)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
		(void)(ButtonPtr);
		(void)(PressType);
	 if(adct_bgs_main_state_table[ActState][CANCEL_BUTTON_ALARM_OFF].ptrFunct != NULL)
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <BUTTON_CANCEL_Callback+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <BUTTON_CANCEL_Callback+0x64>)
 8001100:	460b      	mov	r3, r1
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	3310      	adds	r3, #16
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d018      	beq.n	8001144 <BUTTON_CANCEL_Callback+0x58>
	 {
		 adct_bgs_main_state_table[ActState][CANCEL_BUTTON_ALARM_OFF].ptrFunct();
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <BUTTON_CANCEL_Callback+0x60>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <BUTTON_CANCEL_Callback+0x64>)
 800111a:	460b      	mov	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	3310      	adds	r3, #16
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4798      	blx	r3
		 ActState =  adct_bgs_main_state_table[ActState][CANCEL_BUTTON_ALARM_OFF].NextState;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <BUTTON_CANCEL_Callback+0x60>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4619      	mov	r1, r3
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <BUTTON_CANCEL_Callback+0x64>)
 8001132:	460b      	mov	r3, r1
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	3314      	adds	r3, #20
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <BUTTON_CANCEL_Callback+0x60>)
 8001142:	701a      	strb	r2, [r3, #0]
	 }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000021c 	.word	0x2000021c
 8001150:	20000000 	.word	0x20000000

08001154 <BUTTON_UP_Callback>:
 void BUTTON_UP_Callback(TM_BUTTON_t* ButtonPtr, TM_BUTTON_PressType_t PressType)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
		(void)(ButtonPtr);
		(void)(PressType);
	 if(adct_bgs_main_state_table[ActState][UP_BUTTON].ptrFunct != NULL)
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <BUTTON_UP_Callback+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <BUTTON_UP_Callback+0x64>)
 8001168:	460b      	mov	r3, r1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	3318      	adds	r3, #24
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d018      	beq.n	80011ac <BUTTON_UP_Callback+0x58>
	 {
		 adct_bgs_main_state_table[ActState][UP_BUTTON].ptrFunct();
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <BUTTON_UP_Callback+0x60>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <BUTTON_UP_Callback+0x64>)
 8001182:	460b      	mov	r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	3318      	adds	r3, #24
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4798      	blx	r3
		 ActState =  adct_bgs_main_state_table[ActState][UP_BUTTON].NextState;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <BUTTON_UP_Callback+0x60>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <BUTTON_UP_Callback+0x64>)
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	331c      	adds	r3, #28
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <BUTTON_UP_Callback+0x60>)
 80011aa:	701a      	strb	r2, [r3, #0]
	 }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000021c 	.word	0x2000021c
 80011b8:	20000000 	.word	0x20000000

080011bc <BUTTON_DOWN_Callback>:
 void BUTTON_DOWN_Callback(TM_BUTTON_t* ButtonPtr, TM_BUTTON_PressType_t PressType)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
		(void)(ButtonPtr);
		(void)(PressType);
	 if(adct_bgs_main_state_table[ActState][DOWN_BUTTON].ptrFunct != NULL)
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <BUTTON_DOWN_Callback+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <BUTTON_DOWN_Callback+0x64>)
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	3320      	adds	r3, #32
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d018      	beq.n	8001214 <BUTTON_DOWN_Callback+0x58>
	 {
		 adct_bgs_main_state_table[ActState][DOWN_BUTTON].ptrFunct();
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <BUTTON_DOWN_Callback+0x60>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <BUTTON_DOWN_Callback+0x64>)
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	3320      	adds	r3, #32
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4798      	blx	r3
		 ActState =  adct_bgs_main_state_table[ActState][DOWN_BUTTON].NextState;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <BUTTON_DOWN_Callback+0x60>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <BUTTON_DOWN_Callback+0x64>)
 8001202:	460b      	mov	r3, r1
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	3324      	adds	r3, #36	; 0x24
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <BUTTON_DOWN_Callback+0x60>)
 8001212:	701a      	strb	r2, [r3, #0]
	 }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000021c 	.word	0x2000021c
 8001220:	20000000 	.word	0x20000000

08001224 <ADCT_BGS_MODBUS_RS485_Init>:
static volatile USHORT usRegHoldingBuf[REG_HOLDING_NREGS];
void ADCT_BGS_MODBUS_GetSetting(void);
static void ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
		ADCT_RegHoldingAddressOffset_t offset, uint16_t data);

eMBErrorCode ADCT_BGS_MODBUS_RS485_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af02      	add	r7, sp, #8
	eMBErrorCode eStatus;
	eStatus = eMBInit(MB_RTU, ADCT_BGS_MODBUS_ADDR, 0, ADCT_BGS_BAULDRATE,
 800122a:	2300      	movs	r3, #0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001232:	2200      	movs	r2, #0
 8001234:	2103      	movs	r1, #3
 8001236:	2000      	movs	r0, #0
 8001238:	f003 ff54 	bl	80050e4 <eMBInit>
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
			MB_PAR_NONE);
	eStatus = eMBEnable();
 8001240:	f003 ffcc 	bl	80051dc <eMBEnable>
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
	return eStatus;
 8001248:	79fb      	ldrb	r3, [r7, #7]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop

08001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>:

static void ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
		ADCT_RegHoldingAddressOffset_t offset, uint16_t data) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]
	usRegHoldingBuf[(uint16_t) (offset)] = data;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4904      	ldr	r1, [pc, #16]	; (8001278 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg+0x24>)
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000220 	.word	0x20000220

0800127c <ADCT_AC_MODBUS_UpdateData>:
static void ADCT_AC_MODBUS_UpdateData(void )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	uint32_t Significand ;
	uint8_t Exponent;

	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(VOLTAGE_RMS, (uint16_t)(GstSystemStatus.acData.voltage));
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <ADCT_AC_MODBUS_UpdateData+0x98>)
 8001284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe20 	bl	8000ecc <__aeabi_f2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	b29b      	uxth	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	2051      	movs	r0, #81	; 0x51
 8001294:	f7ff ffde 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_AC_ConvertCurrent(GstSystemStatus.acData.current, &Significand, &Exponent);
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <ADCT_AC_MODBUS_UpdateData+0x98>)
 800129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129c:	1cfa      	adds	r2, r7, #3
 800129e:	1d39      	adds	r1, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 ff73 	bl	800618c <ADCT_AC_ConvertCurrent>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(CURRENT_SIG, Significand);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	2052      	movs	r0, #82	; 0x52
 80012ae:	f7ff ffd1 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(CURRENT_EXP, Exponent);
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	2053      	movs	r0, #83	; 0x53
 80012ba:	f7ff ffcb 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_AC_Convert_Power(GstSystemStatus.acData.power, &Significand, &Exponent);
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <ADCT_AC_MODBUS_UpdateData+0x98>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	1cfa      	adds	r2, r7, #3
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 ffa6 	bl	8006218 <ADCT_AC_Convert_Power>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ACTIVE_POWER_SIG, Significand);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	2054      	movs	r0, #84	; 0x54
 80012d4:	f7ff ffbe 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ACTIVE_POWER_EXP, Exponent);
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4619      	mov	r1, r3
 80012de:	2055      	movs	r0, #85	; 0x55
 80012e0:	f7ff ffb8 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_AC_Convert_Energy(GstSystemStatus.acData.energy, &Significand, &Exponent);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <ADCT_AC_MODBUS_UpdateData+0x98>)
 80012e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e8:	1cfa      	adds	r2, r7, #3
 80012ea:	1d39      	adds	r1, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fffb 	bl	80062e8 <ADCT_AC_Convert_Energy>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ENERGY_SIG, Significand);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4619      	mov	r1, r3
 80012f8:	2056      	movs	r0, #86	; 0x56
 80012fa:	f7ff ffab 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ENERGY_EXP, Exponent);
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	2057      	movs	r0, #87	; 0x57
 8001306:	f7ff ffa5 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20002558 	.word	0x20002558

08001318 <ADCT_PH_MODBUS_UpdateData>:
#ifdef SUPPORT_PHSENSOR
static void ADCT_PH_MODBUS_UpdateData(void)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
	uint16_t Significand;
	Significand = (uint16_t)(ADCT_PHVal * 100);
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <ADCT_PH_MODBUS_UpdateData+0x38>)
 8001320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <ADCT_PH_MODBUS_UpdateData+0x3c>)
 800132a:	f7ff f8c9 	bl	80004c0 <__aeabi_dmul>
 800132e:	4603      	mov	r3, r0
 8001330:	460c      	mov	r4, r1
 8001332:	4618      	mov	r0, r3
 8001334:	4621      	mov	r1, r4
 8001336:	f7ff fad5 	bl	80008e4 <__aeabi_d2uiz>
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(PH_DATA, Significand);
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4619      	mov	r1, r3
 8001342:	2005      	movs	r0, #5
 8001344:	f7ff ff86 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20002738 	.word	0x20002738
 8001354:	40590000 	.word	0x40590000

08001358 <ADCT_BGS_MODBUS_RS485_UpdateData>:
#endif
void ADCT_BGS_MODBUS_RS485_UpdateData(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800135c:	b672      	cpsid	i
	ENTER_CRITICAL_SECTION();
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USTEMP_MAIN,
 800135e:	4bb9      	ldr	r3, [pc, #740]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001360:	8adb      	ldrh	r3, [r3, #22]
 8001362:	4619      	mov	r1, r3
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ff75 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.dhtData.usTemp_Main);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USHUMID_MAIN,
 800136a:	4bb6      	ldr	r3, [pc, #728]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 800136c:	8b1b      	ldrh	r3, [r3, #24]
 800136e:	4619      	mov	r1, r3
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff ff6f 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.dhtData.usHumid_Main);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USTEMP_SUB,
 8001376:	4bb3      	ldr	r3, [pc, #716]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001378:	8b5b      	ldrh	r3, [r3, #26]
 800137a:	4619      	mov	r1, r3
 800137c:	2003      	movs	r0, #3
 800137e:	f7ff ff69 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.dhtData.usTemp_Sub);

	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USHUMID_SUB,
 8001382:	4bb0      	ldr	r3, [pc, #704]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001384:	8b9b      	ldrh	r3, [r3, #28]
 8001386:	4619      	mov	r1, r3
 8001388:	2004      	movs	r0, #4
 800138a:	f7ff ff63 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.dhtData.usHumid_Sub);
	//Update data for PH sensor
#ifdef SUPPORT_PHSENSOR
	ADCT_PH_MODBUS_UpdateData();
 800138e:	f7ff ffc3 	bl	8001318 <ADCT_PH_MODBUS_UpdateData>
#endif
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCFIRE, ReadBit(GstSystemWarning.othWarn, WARN_FIRE));
 8001392:	4bad      	ldr	r3, [pc, #692]	; (8001648 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f0>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	099b      	lsrs	r3, r3, #6
			GstSystemStatus.dhtData.usHumid_Sub);
	//Update data for PH sensor
#ifdef SUPPORT_PHSENSOR
	ADCT_PH_MODBUS_UpdateData();
#endif
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
 8001398:	b29b      	uxth	r3, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	200b      	movs	r0, #11
 80013a4:	f7ff ff56 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			UCFIRE, ReadBit(GstSystemWarning.othWarn, WARN_FIRE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCSMOKE, ReadBit(GstSystemWarning.othWarn, WARN_SMOKE));
 80013a8:	4ba7      	ldr	r3, [pc, #668]	; (8001648 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	09db      	lsrs	r3, r3, #7
#ifdef SUPPORT_PHSENSOR
	ADCT_PH_MODBUS_UpdateData();
#endif
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCFIRE, ReadBit(GstSystemWarning.othWarn, WARN_FIRE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	200c      	movs	r0, #12
 80013ba:	f7ff ff4b 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			UCSMOKE, ReadBit(GstSystemWarning.othWarn, WARN_SMOKE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCWATER, ReadBit(GstSystemWarning.othWarn, WARN_WATER));
 80013be:	4ba2      	ldr	r3, [pc, #648]	; (8001648 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f0>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0a9b      	lsrs	r3, r3, #10
#endif
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCFIRE, ReadBit(GstSystemWarning.othWarn, WARN_FIRE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCSMOKE, ReadBit(GstSystemWarning.othWarn, WARN_SMOKE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	200d      	movs	r0, #13
 80013d0:	f7ff ff40 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			UCWATER, ReadBit(GstSystemWarning.othWarn, WARN_WATER));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR1,
			GstSystemStatus.ioData.ucDoor[0]);
 80013d4:	4b9b      	ldr	r3, [pc, #620]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 80013d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			UCFIRE, ReadBit(GstSystemWarning.othWarn, WARN_FIRE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCSMOKE, ReadBit(GstSystemWarning.othWarn, WARN_SMOKE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCWATER, ReadBit(GstSystemWarning.othWarn, WARN_WATER));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR1,
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	200e      	movs	r0, #14
 80013e0:	f7ff ff38 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR2,
			GstSystemStatus.ioData.ucDoor[0]);
 80013e4:	4b97      	ldr	r3, [pc, #604]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 80013e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			UCSMOKE, ReadBit(GstSystemWarning.othWarn, WARN_SMOKE));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(
			UCWATER, ReadBit(GstSystemWarning.othWarn, WARN_WATER));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR1,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR2,
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	200f      	movs	r0, #15
 80013f0:	f7ff ff30 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR3,
			GstSystemStatus.ioData.ucDoor[0]);
 80013f4:	4b93      	ldr	r3, [pc, #588]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 80013f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			UCWATER, ReadBit(GstSystemWarning.othWarn, WARN_WATER));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR1,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR2,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR3,
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	2010      	movs	r0, #16
 8001400:	f7ff ff28 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR4,
			GstSystemStatus.ioData.ucDoor[0]);
 8001404:	4b8f      	ldr	r3, [pc, #572]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR2,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR3,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR4,
 800140a:	b29b      	uxth	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	2011      	movs	r0, #17
 8001410:	f7ff ff20 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR5,
			GstSystemStatus.ioData.ucDoor[0]);
 8001414:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR3,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR4,
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(DOOR5,
 800141a:	b29b      	uxth	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	2012      	movs	r0, #18
 8001420:	f7ff ff18 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			GstSystemStatus.ioData.ucDoor[0]);
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg( BUGLAR, GstSystemStatus.ioData.ucBurglar);
 8001424:	4b87      	ldr	r3, [pc, #540]	; (8001644 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2ec>)
 8001426:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800142a:	b29b      	uxth	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	201d      	movs	r0, #29
 8001430:	f7ff ff10 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(AIR1, !ADCT_BGS_AIR_1_2_READ());
 8001434:	2120      	movs	r1, #32
 8001436:	4885      	ldr	r0, [pc, #532]	; (800164c <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f4>)
 8001438:	f006 fe28 	bl	800808c <GPIO_ReadOutputDataBit>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2013      	movs	r0, #19
 800144e:	f7ff ff01 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(AIR2, !ADCT_BGS_AIR_1_2_READ());
 8001452:	2120      	movs	r1, #32
 8001454:	487d      	ldr	r0, [pc, #500]	; (800164c <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f4>)
 8001456:	f006 fe19 	bl	800808c <GPIO_ReadOutputDataBit>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	2014      	movs	r0, #20
 800146c:	f7ff fef2 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(AIR3, !ADCT_BGS_AIR_3_4_READ());
 8001470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001474:	4876      	ldr	r0, [pc, #472]	; (8001650 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f8>)
 8001476:	f006 fe09 	bl	800808c <GPIO_ReadOutputDataBit>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4619      	mov	r1, r3
 800148a:	2015      	movs	r0, #21
 800148c:	f7ff fee2 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(AIR4, !ADCT_BGS_AIR_3_4_READ());
 8001490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001494:	486e      	ldr	r0, [pc, #440]	; (8001650 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f8>)
 8001496:	f006 fdf9 	bl	800808c <GPIO_ReadOutputDataBit>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	2016      	movs	r0, #22
 80014ac:	f7ff fed2 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN1, ADCT_BGS_FAN_READ());
 80014b0:	2104      	movs	r1, #4
 80014b2:	4868      	ldr	r0, [pc, #416]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 80014b4:	f006 fdea 	bl	800808c <GPIO_ReadOutputDataBit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	2017      	movs	r0, #23
 80014c0:	f7ff fec8 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN2, ADCT_BGS_FAN_READ());
 80014c4:	2104      	movs	r1, #4
 80014c6:	4863      	ldr	r0, [pc, #396]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 80014c8:	f006 fde0 	bl	800808c <GPIO_ReadOutputDataBit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	2018      	movs	r0, #24
 80014d4:	f7ff febe 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN3, ADCT_BGS_FAN_READ());
 80014d8:	2104      	movs	r1, #4
 80014da:	485e      	ldr	r0, [pc, #376]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 80014dc:	f006 fdd6 	bl	800808c <GPIO_ReadOutputDataBit>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	2019      	movs	r0, #25
 80014e8:	f7ff feb4 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN4, ADCT_BGS_FAN_READ());
 80014ec:	2104      	movs	r1, #4
 80014ee:	4859      	ldr	r0, [pc, #356]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 80014f0:	f006 fdcc 	bl	800808c <GPIO_ReadOutputDataBit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	201a      	movs	r0, #26
 80014fc:	f7ff feaa 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(BUZZER, ADCT_BGS_BUZZER_READ());
 8001500:	2102      	movs	r1, #2
 8001502:	4854      	ldr	r0, [pc, #336]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 8001504:	f006 fdc2 	bl	800808c <GPIO_ReadOutputDataBit>
 8001508:	4603      	mov	r3, r0
 800150a:	b29b      	uxth	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	201b      	movs	r0, #27
 8001510:	f7ff fea0 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(LED, ADCT_BGS_LAMP_READ());
 8001514:	2101      	movs	r1, #1
 8001516:	484f      	ldr	r0, [pc, #316]	; (8001654 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2fc>)
 8001518:	f006 fdb8 	bl	800808c <GPIO_ReadOutputDataBit>
 800151c:	4603      	mov	r3, r0
 800151e:	b29b      	uxth	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	201c      	movs	r0, #28
 8001524:	f7ff fe96 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ALARM_WARNING_HIGH,
			(uint16_t)((GstSystemWarning.othWarn >> 16)&(0xFFFF)));
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f0>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	0c1b      	lsrs	r3, r3, #16
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN2, ADCT_BGS_FAN_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN3, ADCT_BGS_FAN_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN4, ADCT_BGS_FAN_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(BUZZER, ADCT_BGS_BUZZER_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(LED, ADCT_BGS_LAMP_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ALARM_WARNING_HIGH,
 800152e:	b29b      	uxth	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	201f      	movs	r0, #31
 8001534:	f7ff fe8e 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			(uint16_t)((GstSystemWarning.othWarn >> 16)&(0xFFFF)));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ALARM_WARNING_LOW,
			(uint16_t)(GstSystemWarning.othWarn &(0xFFFF)));
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <ADCT_BGS_MODBUS_RS485_UpdateData+0x2f0>)
 800153a:	685b      	ldr	r3, [r3, #4]
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(FAN4, ADCT_BGS_FAN_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(BUZZER, ADCT_BGS_BUZZER_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(LED, ADCT_BGS_LAMP_READ());
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ALARM_WARNING_HIGH,
			(uint16_t)((GstSystemWarning.othWarn >> 16)&(0xFFFF)));
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(ALARM_WARNING_LOW,
 800153c:	b29b      	uxth	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	2020      	movs	r0, #32
 8001542:	f7ff fe87 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
			(uint16_t)(GstSystemWarning.othWarn &(0xFFFF)));

	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_SEC, g_ADCT_BGS_Current_RTC.RTC_Sec);
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	2048      	movs	r0, #72	; 0x48
 8001550:	f7ff fe80 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_MIN, g_ADCT_BGS_Current_RTC.RTC_Min);
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	2049      	movs	r0, #73	; 0x49
 800155e:	f7ff fe79 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_HOUR, g_ADCT_BGS_Current_RTC.RTC_Hour);
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	204a      	movs	r0, #74	; 0x4a
 800156c:	f7ff fe72 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_DAY, g_ADCT_BGS_Current_RTC.RTC_Mday);
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	204b      	movs	r0, #75	; 0x4b
 800157a:	f7ff fe6b 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_MONTH, g_ADCT_BGS_Current_RTC.RTC_Mon);
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	204c      	movs	r0, #76	; 0x4c
 8001588:	f7ff fe64 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_RTC_YEAR, g_ADCT_BGS_Current_RTC.RTC_Year);
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <ADCT_BGS_MODBUS_RS485_UpdateData+0x300>)
 800158e:	88db      	ldrh	r3, [r3, #6]
 8001590:	4619      	mov	r1, r3
 8001592:	204d      	movs	r0, #77	; 0x4d
 8001594:	f7ff fe5e 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_SW_SEC, g_ADCT_BGS_TimerManager.SWitchingTimer.second);
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <ADCT_BGS_MODBUS_RS485_UpdateData+0x304>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	204e      	movs	r0, #78	; 0x4e
 80015a2:	f7ff fe57 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_SW_MINUTE, g_ADCT_BGS_TimerManager.SWitchingTimer.minute);
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <ADCT_BGS_MODBUS_RS485_UpdateData+0x304>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	204f      	movs	r0, #79	; 0x4f
 80015b0:	f7ff fe50 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>
	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_SW_HOUR, g_ADCT_BGS_TimerManager.SWitchingTimer.hour);
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <ADCT_BGS_MODBUS_RS485_UpdateData+0x304>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	2050      	movs	r0, #80	; 0x50
 80015be:	f7ff fe49 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(US_SW_HOUR, g_ADCT_BGS_TimerManager.SWitchingTimer.hour);
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <ADCT_BGS_MODBUS_RS485_UpdateData+0x304>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	2050      	movs	r0, #80	; 0x50
 80015cc:	f7ff fe42 	bl	8001254 <ADCT_BGS_MODBUS_RS485_UpdateHoldingReg>

	ADCT_AC_MODBUS_UpdateData();
 80015d0:	f7ff fe54 	bl	800127c <ADCT_AC_MODBUS_UpdateData>
	GTempSetting.usLowTemperatureT1 = usRegHoldingBuf[USLOWTEMPERATURET1];
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 80015d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 80015de:	801a      	strh	r2, [r3, #0]
	GTempSetting.usHighTemperatureT2 = usRegHoldingBuf[USHIGHTEMPERATURET2];
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 80015e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 80015ea:	805a      	strh	r2, [r3, #2]
	GTempSetting.usFanTemperatureT3 = usRegHoldingBuf[USFANTEMPERATURET3];
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 80015ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 80015f6:	809a      	strh	r2, [r3, #4]
	GTempSetting.usLowHumidityH1 = usRegHoldingBuf[USLOWHUMIDITYH1];
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 80015fa:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 8001602:	80da      	strh	r2, [r3, #6]
	GTempSetting.usHighHumidityH2 = usRegHoldingBuf[USHIGHHUMIDITYH2];
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 8001606:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 800160e:	811a      	strh	r2, [r3, #8]
	GTempSetting.usLowMainVoltage = usRegHoldingBuf[USLOWMAINVOLTAGE];
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 8001612:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 800161a:	815a      	strh	r2, [r3, #10]
	GTempSetting.usHighMainVoltage = usRegHoldingBuf[USHIGHMAINVOLTAGE];
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 800161e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 8001626:	819a      	strh	r2, [r3, #12]
	GTempSetting.usGenFuelLowValue = usRegHoldingBuf[USGENFUELLOWVALUE];
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 800162a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 8001632:	81da      	strh	r2, [r3, #14]
	GTempSetting.usGenVoltageAlarmValue = usRegHoldingBuf[USGENVOLTAGEALARMVALUE];
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <ADCT_BGS_MODBUS_RS485_UpdateData+0x308>)
 8001636:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <ADCT_BGS_MODBUS_RS485_UpdateData+0x30c>)
 800163e:	821a      	strh	r2, [r3, #16]
 8001640:	e012      	b.n	8001668 <ADCT_BGS_MODBUS_RS485_UpdateData+0x310>
 8001642:	bf00      	nop
 8001644:	20002558 	.word	0x20002558
 8001648:	20002550 	.word	0x20002550
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40011000 	.word	0x40011000
 8001654:	40010800 	.word	0x40010800
 8001658:	200024f4 	.word	0x200024f4
 800165c:	200024dc 	.word	0x200024dc
 8001660:	20000220 	.word	0x20000220
 8001664:	20002498 	.word	0x20002498
	GTempSetting.usGenBatteryVoltageAlarmValue =
			usRegHoldingBuf[USGENBATTERYVOLTAGEALARMVALUE];
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 800166a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800166e:	b29a      	uxth	r2, r3
	GTempSetting.usHighHumidityH2 = usRegHoldingBuf[USHIGHHUMIDITYH2];
	GTempSetting.usLowMainVoltage = usRegHoldingBuf[USLOWMAINVOLTAGE];
	GTempSetting.usHighMainVoltage = usRegHoldingBuf[USHIGHMAINVOLTAGE];
	GTempSetting.usGenFuelLowValue = usRegHoldingBuf[USGENFUELLOWVALUE];
	GTempSetting.usGenVoltageAlarmValue = usRegHoldingBuf[USGENVOLTAGEALARMVALUE];
	GTempSetting.usGenBatteryVoltageAlarmValue =
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 8001672:	825a      	strh	r2, [r3, #18]
			usRegHoldingBuf[USGENBATTERYVOLTAGEALARMVALUE];
	GTempSetting.usGenCoolantTempAlarmValue =
			usRegHoldingBuf[USGENCOOLANTTEMPALARMVALUE];
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 8001676:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800167a:	b29a      	uxth	r2, r3
	GTempSetting.usHighMainVoltage = usRegHoldingBuf[USHIGHMAINVOLTAGE];
	GTempSetting.usGenFuelLowValue = usRegHoldingBuf[USGENFUELLOWVALUE];
	GTempSetting.usGenVoltageAlarmValue = usRegHoldingBuf[USGENVOLTAGEALARMVALUE];
	GTempSetting.usGenBatteryVoltageAlarmValue =
			usRegHoldingBuf[USGENBATTERYVOLTAGEALARMVALUE];
	GTempSetting.usGenCoolantTempAlarmValue =
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 800167e:	829a      	strh	r2, [r3, #20]
			usRegHoldingBuf[USGENCOOLANTTEMPALARMVALUE];
	GTempSetting.usGenEngineSpeedAlarmValue =
			usRegHoldingBuf[USGENENGINESPEEDALARMVALUE];
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 8001682:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001686:	b29a      	uxth	r2, r3
	GTempSetting.usGenVoltageAlarmValue = usRegHoldingBuf[USGENVOLTAGEALARMVALUE];
	GTempSetting.usGenBatteryVoltageAlarmValue =
			usRegHoldingBuf[USGENBATTERYVOLTAGEALARMVALUE];
	GTempSetting.usGenCoolantTempAlarmValue =
			usRegHoldingBuf[USGENCOOLANTTEMPALARMVALUE];
	GTempSetting.usGenEngineSpeedAlarmValue =
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 800168a:	82da      	strh	r2, [r3, #22]
			usRegHoldingBuf[USGENENGINESPEEDALARMVALUE];
	GTempSetting.usGenOilPressureAlarmValue =
			usRegHoldingBuf[USGENOILPRESSUREALARMVALUE];
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 800168e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001692:	b29a      	uxth	r2, r3
			usRegHoldingBuf[USGENBATTERYVOLTAGEALARMVALUE];
	GTempSetting.usGenCoolantTempAlarmValue =
			usRegHoldingBuf[USGENCOOLANTTEMPALARMVALUE];
	GTempSetting.usGenEngineSpeedAlarmValue =
			usRegHoldingBuf[USGENENGINESPEEDALARMVALUE];
	GTempSetting.usGenOilPressureAlarmValue =
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 8001696:	831a      	strh	r2, [r3, #24]
			usRegHoldingBuf[USGENOILPRESSUREALARMVALUE];
	GTempSetting.ulSwitchingTime = usRegHoldingBuf[ULSWITCHINGTIME];
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 800169a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016a4:	61da      	str	r2, [r3, #28]
	GTempSetting.ulMinSwitchingTime = usRegHoldingBuf[ULMINSWITCHINGTIME];
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 80016a8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016b2:	621a      	str	r2, [r3, #32]
	GTempSetting.ulStayOffTime = usRegHoldingBuf[ULSTAYOFFTIME];
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 80016b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
	GTempSetting.ucEnableAlarm = usRegHoldingBuf[UCENABLEALARM];
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 80016c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	GTempSetting.ucDoorBurglarEnableAlarm =
			usRegHoldingBuf[UCDOORBURGLARENABLEALARM];
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 80016d4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80016d8:	b29b      	uxth	r3, r3
			usRegHoldingBuf[USGENOILPRESSUREALARMVALUE];
	GTempSetting.ulSwitchingTime = usRegHoldingBuf[ULSWITCHINGTIME];
	GTempSetting.ulMinSwitchingTime = usRegHoldingBuf[ULMINSWITCHINGTIME];
	GTempSetting.ulStayOffTime = usRegHoldingBuf[ULSTAYOFFTIME];
	GTempSetting.ucEnableAlarm = usRegHoldingBuf[UCENABLEALARM];
	GTempSetting.ucDoorBurglarEnableAlarm =
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			usRegHoldingBuf[UCDOORBURGLARENABLEALARM];
	GTempSetting.ulAlarmDuration = usRegHoldingBuf[ULALARMDURATION];
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a0>)
 80016e4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <ADCT_BGS_MODBUS_RS485_UpdateData+0x3a4>)
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80016f0:	b662      	cpsie	i
	EXIT_CRITICAL_SECTION();
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000220 	.word	0x20000220
 80016fc:	20002498 	.word	0x20002498

08001700 <ADCT_BGS_MODBUS_Get_BE_DKG_Data>:

void ADCT_BGS_MODBUS_Get_BE_DKG_Data(void) {
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8001704:	b672      	cpsid	i
	ENTER_CRITICAL_SECTION();

	GstSystemStatus.mbData.usCurrentMainVoltage =
			usRegHoldingBuf[USCURRENTMAINVOLTAGE];
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001708:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800170c:	b29a      	uxth	r2, r3
}

void ADCT_BGS_MODBUS_Get_BE_DKG_Data(void) {
	ENTER_CRITICAL_SECTION();

	GstSystemStatus.mbData.usCurrentMainVoltage =
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001710:	801a      	strh	r2, [r3, #0]
			usRegHoldingBuf[USCURRENTMAINVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenFuel = usRegHoldingBuf[USCURRENTGENFUEL];
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001714:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 800171c:	805a      	strh	r2, [r3, #2]
	GstSystemStatus.mbData.usCurrentGenVoltage =
			usRegHoldingBuf[USCURRENTGENVOLTAGE];
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001720:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001724:	b29a      	uxth	r2, r3
	ENTER_CRITICAL_SECTION();

	GstSystemStatus.mbData.usCurrentMainVoltage =
			usRegHoldingBuf[USCURRENTMAINVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenFuel = usRegHoldingBuf[USCURRENTGENFUEL];
	GstSystemStatus.mbData.usCurrentGenVoltage =
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001728:	809a      	strh	r2, [r3, #4]
			usRegHoldingBuf[USCURRENTGENVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenBatteryVoltage =
			usRegHoldingBuf[USCURRENTGENBATTERYVOLTAGE];
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 800172c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001730:	b29a      	uxth	r2, r3
	GstSystemStatus.mbData.usCurrentMainVoltage =
			usRegHoldingBuf[USCURRENTMAINVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenFuel = usRegHoldingBuf[USCURRENTGENFUEL];
	GstSystemStatus.mbData.usCurrentGenVoltage =
			usRegHoldingBuf[USCURRENTGENVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenBatteryVoltage =
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001734:	80da      	strh	r2, [r3, #6]
			usRegHoldingBuf[USCURRENTGENBATTERYVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenCoolantTemp =
			usRegHoldingBuf[USCURRENTGENCOOLANTTEMP];
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800173c:	b29a      	uxth	r2, r3
	GstSystemStatus.mbData.usCurrentGenFuel = usRegHoldingBuf[USCURRENTGENFUEL];
	GstSystemStatus.mbData.usCurrentGenVoltage =
			usRegHoldingBuf[USCURRENTGENVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenBatteryVoltage =
			usRegHoldingBuf[USCURRENTGENBATTERYVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenCoolantTemp =
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001740:	811a      	strh	r2, [r3, #8]
			usRegHoldingBuf[USCURRENTGENCOOLANTTEMP];
	GstSystemStatus.mbData.usCurrentGenEngineSpeed =
			usRegHoldingBuf[USCURRENTGENENGINESPEED];
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001744:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001748:	b29a      	uxth	r2, r3
			usRegHoldingBuf[USCURRENTGENVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenBatteryVoltage =
			usRegHoldingBuf[USCURRENTGENBATTERYVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenCoolantTemp =
			usRegHoldingBuf[USCURRENTGENCOOLANTTEMP];
	GstSystemStatus.mbData.usCurrentGenEngineSpeed =
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 800174c:	815a      	strh	r2, [r3, #10]
			usRegHoldingBuf[USCURRENTGENENGINESPEED];
	GstSystemStatus.mbData.usCurrentGenOilPressure =
			usRegHoldingBuf[USCURRENTGENOILPRESSURE];
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001754:	b29a      	uxth	r2, r3
			usRegHoldingBuf[USCURRENTGENBATTERYVOLTAGE];
	GstSystemStatus.mbData.usCurrentGenCoolantTemp =
			usRegHoldingBuf[USCURRENTGENCOOLANTTEMP];
	GstSystemStatus.mbData.usCurrentGenEngineSpeed =
			usRegHoldingBuf[USCURRENTGENENGINESPEED];
	GstSystemStatus.mbData.usCurrentGenOilPressure =
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001758:	819a      	strh	r2, [r3, #12]
			usRegHoldingBuf[USCURRENTGENOILPRESSURE];
	GstSystemStatus.mbData.usCurrentGenCurVoltage =
			usRegHoldingBuf[USCURRENTGENCURVOLTAGE];
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 800175c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001760:	b29a      	uxth	r2, r3
			usRegHoldingBuf[USCURRENTGENCOOLANTTEMP];
	GstSystemStatus.mbData.usCurrentGenEngineSpeed =
			usRegHoldingBuf[USCURRENTGENENGINESPEED];
	GstSystemStatus.mbData.usCurrentGenOilPressure =
			usRegHoldingBuf[USCURRENTGENOILPRESSURE];
	GstSystemStatus.mbData.usCurrentGenCurVoltage =
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001764:	81da      	strh	r2, [r3, #14]
			usRegHoldingBuf[USCURRENTGENCURVOLTAGE];
	GstSystemStatus.mbData.usCurrentMainFreq = usRegHoldingBuf[USCURRENTMAINFREQ];
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001768:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001770:	821a      	strh	r2, [r3, #16]
	GstSystemStatus.mbData.usCurrentGenFreq = usRegHoldingBuf[USCURRENTGENFREQ];
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 800177c:	825a      	strh	r2, [r3, #18]
	GstSystemStatus.mbData.usCurrentGenMode = usRegHoldingBuf[USCURRENTGENMODE];
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 8001780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa8>)
 8001788:	829a      	strh	r2, [r3, #20]

	ADCT_BGS_REBOOT_BOARD = usRegHoldingBuf[UC_REBOOT];
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xa4>)
 800178c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <ADCT_BGS_MODBUS_Get_BE_DKG_Data+0xac>)
 8001796:	701a      	strb	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8001798:	b662      	cpsie	i
	EXIT_CRITICAL_SECTION();
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000220 	.word	0x20000220
 80017a8:	20002558 	.word	0x20002558
 80017ac:	20002494 	.word	0x20002494

080017b0 <ADCT_BGS_MODBUS_GetSetting>:
void ADCT_BGS_MODBUS_GetSetting(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
	if (GstSystemSetting.usLowTemperatureT1
 80017b6:	4b9e      	ldr	r3, [pc, #632]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
			!= GTempSetting.usLowTemperatureT1 * 10) {
 80017ba:	4619      	mov	r1, r3
 80017bc:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1

	ADCT_BGS_REBOOT_BOARD = usRegHoldingBuf[UC_REBOOT];
	EXIT_CRITICAL_SECTION();
}
void ADCT_BGS_MODBUS_GetSetting(void) {
	if (GstSystemSetting.usLowTemperatureT1
 80017cc:	4299      	cmp	r1, r3
 80017ce:	d00f      	beq.n	80017f0 <ADCT_BGS_MODBUS_GetSetting+0x40>
			!= GTempSetting.usLowTemperatureT1 * 10) {
		GstSystemSetting.usLowTemperatureT1 = GTempSetting.usLowTemperatureT1 * 10;
 80017d0:	4b98      	ldr	r3, [pc, #608]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80017e2:	801a      	strh	r2, [r3, #0]
		ADCT_AT24C64_WriteTwoBytes(EEPROM_LOW_TEMPERATURE_T1_LOW,
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2001      	movs	r0, #1
 80017ec:	f002 ff5e 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
	else
	{
		// ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USLOWTEMPERATURET1, GstSystemSetting.usLowTemperatureT1 /10);
	}

	if (GstSystemSetting.usHighTemperatureT2
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80017f2:	885b      	ldrh	r3, [r3, #2]
			!= GTempSetting.usHighTemperatureT2 * 10) {
 80017f4:	4619      	mov	r1, r3
 80017f6:	4b8f      	ldr	r3, [pc, #572]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80017f8:	885b      	ldrh	r3, [r3, #2]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
	else
	{
		// ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USLOWTEMPERATURET1, GstSystemSetting.usLowTemperatureT1 /10);
	}

	if (GstSystemSetting.usHighTemperatureT2
 8001806:	4299      	cmp	r1, r3
 8001808:	d00f      	beq.n	800182a <ADCT_BGS_MODBUS_GetSetting+0x7a>
			!= GTempSetting.usHighTemperatureT2 * 10) {
		GstSystemSetting.usHighTemperatureT2 = GTempSetting.usHighTemperatureT2 * 10;
 800180a:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4413      	add	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800181c:	805a      	strh	r2, [r3, #2]
		ADCT_AT24C64_WriteTwoBytes(EEPROM_HIGH_TEMPERATURE_T2_LOW,
 800181e:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	4619      	mov	r1, r3
 8001824:	2003      	movs	r0, #3
 8001826:	f002 ff41 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
	}
	else
	{
		// ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(EEPROM_HIGH_TEMPERATURE_T2_LOW, GstSystemSetting.usLowTemperatureT1 /10);
	}
	if (GstSystemSetting.usHighHumidityH2 != GTempSetting.usHighHumidityH2 * 10) {
 800182a:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800182c:	891b      	ldrh	r3, [r3, #8]
 800182e:	4619      	mov	r1, r3
 8001830:	4b80      	ldr	r3, [pc, #512]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001832:	891b      	ldrh	r3, [r3, #8]
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4299      	cmp	r1, r3
 8001842:	d00f      	beq.n	8001864 <ADCT_BGS_MODBUS_GetSetting+0xb4>
		GstSystemSetting.usHighHumidityH2 = GTempSetting.usHighHumidityH2 * 10;
 8001844:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001846:	891b      	ldrh	r3, [r3, #8]
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001856:	811a      	strh	r2, [r3, #8]
		ADCT_AT24C64_WriteTwoBytes(EEPROM_HIGH_HUMIDITY_H2_LOW,
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	4619      	mov	r1, r3
 800185e:	2009      	movs	r0, #9
 8001860:	f002 ff24 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
	else
	{
		// ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USHIGHHUMIDITYH2, GstSystemSetting.usHighHumidityH2 /10);
	}

	if (GstSystemSetting.usFanTemperatureT3
 8001864:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001866:	889b      	ldrh	r3, [r3, #4]
			!= GTempSetting.usFanTemperatureT3 * 10) {
 8001868:	4619      	mov	r1, r3
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
	else
	{
		// ADCT_BGS_MODBUS_RS485_UpdateHoldingReg(USHIGHHUMIDITYH2, GstSystemSetting.usHighHumidityH2 /10);
	}

	if (GstSystemSetting.usFanTemperatureT3
 800187a:	4299      	cmp	r1, r3
 800187c:	d00f      	beq.n	800189e <ADCT_BGS_MODBUS_GetSetting+0xee>
			!= GTempSetting.usFanTemperatureT3 * 10) {
		GstSystemSetting.usFanTemperatureT3 = GTempSetting.usFanTemperatureT3 * 10;
 800187e:	4b6d      	ldr	r3, [pc, #436]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001890:	809a      	strh	r2, [r3, #4]
		ADCT_AT24C64_WriteTwoBytes(EEPROM_FAN_TEMPERATURE_T3_LOW,
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001894:	889b      	ldrh	r3, [r3, #4]
 8001896:	4619      	mov	r1, r3
 8001898:	2005      	movs	r0, #5
 800189a:	f002 ff07 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usFanTemperatureT3);
	}
	if (GstSystemSetting.usLowMainVoltage != GTempSetting.usLowMainVoltage ) {
 800189e:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018a0:	895a      	ldrh	r2, [r3, #10]
 80018a2:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018a4:	895b      	ldrh	r3, [r3, #10]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d00a      	beq.n	80018c2 <ADCT_BGS_MODBUS_GetSetting+0x112>
		GstSystemSetting.usLowMainVoltage = GTempSetting.usLowMainVoltage ;
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018ae:	895b      	ldrh	r3, [r3, #10]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018b4:	815a      	strh	r2, [r3, #10]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_LOWMAINVOLTAGE_LOW,
 80018b6:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018b8:	895b      	ldrh	r3, [r3, #10]
 80018ba:	4619      	mov	r1, r3
 80018bc:	201d      	movs	r0, #29
 80018be:	f002 fef5 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usLowMainVoltage);
	}

	if (GstSystemSetting.usHighMainVoltage
 80018c2:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018c4:	899a      	ldrh	r2, [r3, #12]
			!= GTempSetting.usHighMainVoltage ) {
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018c8:	899b      	ldrh	r3, [r3, #12]
 80018ca:	b29b      	uxth	r3, r3
		GstSystemSetting.usLowMainVoltage = GTempSetting.usLowMainVoltage ;
		ADCT_AT24C64_WriteTwoBytes(EPPROM_LOWMAINVOLTAGE_LOW,
				GstSystemSetting.usLowMainVoltage);
	}

	if (GstSystemSetting.usHighMainVoltage
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d00a      	beq.n	80018e6 <ADCT_BGS_MODBUS_GetSetting+0x136>
			!= GTempSetting.usHighMainVoltage ) {
		GstSystemSetting.usHighMainVoltage = GTempSetting.usHighMainVoltage;
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018d2:	899b      	ldrh	r3, [r3, #12]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018d8:	819a      	strh	r2, [r3, #12]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_HIGHMAINVOLTAGE_LOW,
 80018da:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018dc:	899b      	ldrh	r3, [r3, #12]
 80018de:	4619      	mov	r1, r3
 80018e0:	2021      	movs	r0, #33	; 0x21
 80018e2:	f002 fee3 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usHighMainVoltage);
	}
	if (GstSystemSetting.usGenFuelLowValue != GTempSetting.usGenFuelLowValue ) {
 80018e6:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018e8:	89da      	ldrh	r2, [r3, #14]
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018ec:	89db      	ldrh	r3, [r3, #14]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d00a      	beq.n	800190a <ADCT_BGS_MODBUS_GetSetting+0x15a>
		GstSystemSetting.usGenFuelLowValue = GTempSetting.usGenFuelLowValue ;
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80018f6:	89db      	ldrh	r3, [r3, #14]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80018fc:	81da      	strh	r2, [r3, #14]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENFUELLOWVALUE_LOW,
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001900:	89db      	ldrh	r3, [r3, #14]
 8001902:	4619      	mov	r1, r3
 8001904:	2017      	movs	r0, #23
 8001906:	f002 fed1 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenFuelLowValue);
	}

	if (GstSystemSetting.usGenVoltageAlarmValue
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800190c:	8a1a      	ldrh	r2, [r3, #16]
			!= GTempSetting.usGenVoltageAlarmValue ) {
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001910:	8a1b      	ldrh	r3, [r3, #16]
 8001912:	b29b      	uxth	r3, r3
		GstSystemSetting.usGenFuelLowValue = GTempSetting.usGenFuelLowValue ;
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENFUELLOWVALUE_LOW,
				GstSystemSetting.usGenFuelLowValue);
	}

	if (GstSystemSetting.usGenVoltageAlarmValue
 8001914:	429a      	cmp	r2, r3
 8001916:	d00a      	beq.n	800192e <ADCT_BGS_MODBUS_GetSetting+0x17e>
			!= GTempSetting.usGenVoltageAlarmValue ) {
		GstSystemSetting.usGenVoltageAlarmValue = GTempSetting.usGenVoltageAlarmValue;
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 800191a:	8a1b      	ldrh	r3, [r3, #16]
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001920:	821a      	strh	r2, [r3, #16]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENVOLTAGEALARMVALUE_LOW,
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001924:	8a1b      	ldrh	r3, [r3, #16]
 8001926:	4619      	mov	r1, r3
 8001928:	201b      	movs	r0, #27
 800192a:	f002 febf 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenVoltageAlarmValue);
	}
	if (GstSystemSetting.usGenBatteryVoltageAlarmValue != GTempSetting.usGenBatteryVoltageAlarmValue ) {
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001930:	8a5a      	ldrh	r2, [r3, #18]
 8001932:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001934:	8a5b      	ldrh	r3, [r3, #18]
 8001936:	b29b      	uxth	r3, r3
 8001938:	429a      	cmp	r2, r3
 800193a:	d00a      	beq.n	8001952 <ADCT_BGS_MODBUS_GetSetting+0x1a2>
		GstSystemSetting.usGenBatteryVoltageAlarmValue = GTempSetting.usGenBatteryVoltageAlarmValue ;
 800193c:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 800193e:	8a5b      	ldrh	r3, [r3, #18]
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001944:	825a      	strh	r2, [r3, #18]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENBATTERYVOLTAGEALARMVALUE_LOW,
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001948:	8a5b      	ldrh	r3, [r3, #18]
 800194a:	4619      	mov	r1, r3
 800194c:	2011      	movs	r0, #17
 800194e:	f002 fead 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenBatteryVoltageAlarmValue);
	}

	if (GstSystemSetting.usGenCoolantTempAlarmValue
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001954:	8a9a      	ldrh	r2, [r3, #20]
			!= GTempSetting.usGenCoolantTempAlarmValue ) {
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001958:	8a9b      	ldrh	r3, [r3, #20]
 800195a:	b29b      	uxth	r3, r3
		GstSystemSetting.usGenBatteryVoltageAlarmValue = GTempSetting.usGenBatteryVoltageAlarmValue ;
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENBATTERYVOLTAGEALARMVALUE_LOW,
				GstSystemSetting.usGenBatteryVoltageAlarmValue);
	}

	if (GstSystemSetting.usGenCoolantTempAlarmValue
 800195c:	429a      	cmp	r2, r3
 800195e:	d00a      	beq.n	8001976 <ADCT_BGS_MODBUS_GetSetting+0x1c6>
			!= GTempSetting.usGenCoolantTempAlarmValue ) {
		GstSystemSetting.usGenCoolantTempAlarmValue = GTempSetting.usGenCoolantTempAlarmValue;
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001962:	8a9b      	ldrh	r3, [r3, #20]
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001968:	829a      	strh	r2, [r3, #20]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENCOOLANTTEMPALARMVALUE_LOW,
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800196c:	8a9b      	ldrh	r3, [r3, #20]
 800196e:	4619      	mov	r1, r3
 8001970:	2013      	movs	r0, #19
 8001972:	f002 fe9b 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenCoolantTempAlarmValue);
	}
	if (GstSystemSetting.usGenEngineSpeedAlarmValue != GTempSetting.usGenEngineSpeedAlarmValue ) {
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001978:	8ada      	ldrh	r2, [r3, #22]
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 800197c:	8adb      	ldrh	r3, [r3, #22]
 800197e:	b29b      	uxth	r3, r3
 8001980:	429a      	cmp	r2, r3
 8001982:	d00a      	beq.n	800199a <ADCT_BGS_MODBUS_GetSetting+0x1ea>
		GstSystemSetting.usGenEngineSpeedAlarmValue = GTempSetting.usGenEngineSpeedAlarmValue ;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001986:	8adb      	ldrh	r3, [r3, #22]
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800198c:	82da      	strh	r2, [r3, #22]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENENGINESPEEDALARMVALUE_LOW,
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001990:	8adb      	ldrh	r3, [r3, #22]
 8001992:	4619      	mov	r1, r3
 8001994:	2015      	movs	r0, #21
 8001996:	f002 fe89 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenEngineSpeedAlarmValue);
	}

	if (GstSystemSetting.usGenOilPressureAlarmValue
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 800199c:	8b1a      	ldrh	r2, [r3, #24]
			!= GTempSetting.usGenOilPressureAlarmValue ) {
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80019a0:	8b1b      	ldrh	r3, [r3, #24]
 80019a2:	b29b      	uxth	r3, r3
		GstSystemSetting.usGenEngineSpeedAlarmValue = GTempSetting.usGenEngineSpeedAlarmValue ;
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENENGINESPEEDALARMVALUE_LOW,
				GstSystemSetting.usGenEngineSpeedAlarmValue);
	}

	if (GstSystemSetting.usGenOilPressureAlarmValue
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d00a      	beq.n	80019be <ADCT_BGS_MODBUS_GetSetting+0x20e>
			!= GTempSetting.usGenOilPressureAlarmValue ) {
		GstSystemSetting.usGenOilPressureAlarmValue = GTempSetting.usGenOilPressureAlarmValue;
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80019aa:	8b1b      	ldrh	r3, [r3, #24]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019b0:	831a      	strh	r2, [r3, #24]
		ADCT_AT24C64_WriteTwoBytes(EPPROM_GENOILPRESSUREALARMVALUE_LOW,
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019b4:	8b1b      	ldrh	r3, [r3, #24]
 80019b6:	4619      	mov	r1, r3
 80019b8:	2019      	movs	r0, #25
 80019ba:	f002 fe77 	bl	80046ac <ADCT_AT24C64_WriteTwoBytes>
				GstSystemSetting.usGenOilPressureAlarmValue);
	}
	if (GstSystemSetting.ulSwitchingTime != GTempSetting.ulSwitchingTime ) {
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d024      	beq.n	8001a14 <ADCT_BGS_MODBUS_GetSetting+0x264>
		GstSystemSetting.ulSwitchingTime = GTempSetting.ulSwitchingTime ;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019d0:	61d3      	str	r3, [r2, #28]
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulSwitchingTime %3600;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <ADCT_BGS_MODBUS_GetSetting+0x288>)
 80019d8:	fba2 1203 	umull	r1, r2, r2, r3
 80019dc:	0ad2      	lsrs	r2, r2, #11
 80019de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80019e2:	fb01 f202 	mul.w	r2, r1, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
		ADCT_AT24C64_WriteOneBytes(EPPROM_SWITCHING_HOUR, GstSystemSetting.ulSwitchingTime /3600);
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <ADCT_BGS_MODBUS_GetSetting+0x288>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0adb      	lsrs	r3, r3, #11
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	200b      	movs	r0, #11
 80019fc:	f002 fe72 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>

		ADCT_AT24C64_WriteOneBytes(EPPROM_SWITCHING_MINUTE,
				temp_ui32/60);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <ADCT_BGS_MODBUS_GetSetting+0x28c>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	095b      	lsrs	r3, r3, #5
		GstSystemSetting.ulSwitchingTime = GTempSetting.ulSwitchingTime ;
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulSwitchingTime %3600;
		ADCT_AT24C64_WriteOneBytes(EPPROM_SWITCHING_HOUR, GstSystemSetting.ulSwitchingTime /3600);

		ADCT_AT24C64_WriteOneBytes(EPPROM_SWITCHING_MINUTE,
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	200c      	movs	r0, #12
 8001a10:	f002 fe68 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				temp_ui32/60);
	}

	if (GstSystemSetting.ulMinSwitchingTime
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001a16:	6a1a      	ldr	r2, [r3, #32]
			!= GTempSetting.ulMinSwitchingTime ) {
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]

		ADCT_AT24C64_WriteOneBytes(EPPROM_SWITCHING_MINUTE,
				temp_ui32/60);
	}

	if (GstSystemSetting.ulMinSwitchingTime
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d02e      	beq.n	8001a7e <ADCT_BGS_MODBUS_GetSetting+0x2ce>
			!= GTempSetting.ulMinSwitchingTime ) {
		GstSystemSetting.ulMinSwitchingTime = GTempSetting.ulMinSwitchingTime;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <ADCT_BGS_MODBUS_GetSetting+0x284>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a02      	ldr	r2, [pc, #8]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001a26:	6213      	str	r3, [r2, #32]
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulMinSwitchingTime %3600;
 8001a28:	4b01      	ldr	r3, [pc, #4]	; (8001a30 <ADCT_BGS_MODBUS_GetSetting+0x280>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	e008      	b.n	8001a40 <ADCT_BGS_MODBUS_GetSetting+0x290>
 8001a2e:	bf00      	nop
 8001a30:	2000250c 	.word	0x2000250c
 8001a34:	20002498 	.word	0x20002498
 8001a38:	91a2b3c5 	.word	0x91a2b3c5
 8001a3c:	88888889 	.word	0x88888889
 8001a40:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <ADCT_BGS_MODBUS_GetSetting+0x388>)
 8001a42:	fba2 1203 	umull	r1, r2, r2, r3
 8001a46:	0ad2      	lsrs	r2, r2, #11
 8001a48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001a4c:	fb01 f202 	mul.w	r2, r1, r2
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_HOUR,
				GstSystemSetting.ulMinSwitchingTime /3600);
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <ADCT_BGS_MODBUS_GetSetting+0x388>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0adb      	lsrs	r3, r3, #11
	if (GstSystemSetting.ulMinSwitchingTime
			!= GTempSetting.ulMinSwitchingTime ) {
		GstSystemSetting.ulMinSwitchingTime = GTempSetting.ulMinSwitchingTime;
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulMinSwitchingTime %3600;
		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_HOUR,
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	201f      	movs	r0, #31
 8001a66:	f002 fe3d 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				GstSystemSetting.ulMinSwitchingTime /3600);

		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_MINUTE,
				temp_ui32/60);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <ADCT_BGS_MODBUS_GetSetting+0x390>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	095b      	lsrs	r3, r3, #5
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulMinSwitchingTime %3600;
		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_HOUR,
				GstSystemSetting.ulMinSwitchingTime /3600);

		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_MINUTE,
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f002 fe33 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				temp_ui32/60);
	}

	if (GstSystemSetting.ulStayOffTime
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			!= GTempSetting.ulStayOffTime ) {
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		ADCT_AT24C64_WriteOneBytes(EPPROM_MINSWITCHINGTIME_MINUTE,
				temp_ui32/60);
	}

	if (GstSystemSetting.ulStayOffTime
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d024      	beq.n	8001ad4 <ADCT_BGS_MODBUS_GetSetting+0x324>
			!= GTempSetting.ulStayOffTime ) {
		GstSystemSetting.ulStayOffTime = GTempSetting.ulStayOffTime;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001a90:	6253      	str	r3, [r2, #36]	; 0x24

		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulStayOffTime %3600;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <ADCT_BGS_MODBUS_GetSetting+0x388>)
 8001a98:	fba2 1203 	umull	r1, r2, r2, r3
 8001a9c:	0ad2      	lsrs	r2, r2, #11
 8001a9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001aa2:	fb01 f202 	mul.w	r2, r1, r2
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	607b      	str	r3, [r7, #4]
		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_HOUR,
				GstSystemSetting.ulStayOffTime /3600);
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <ADCT_BGS_MODBUS_GetSetting+0x388>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0adb      	lsrs	r3, r3, #11
			!= GTempSetting.ulStayOffTime ) {
		GstSystemSetting.ulStayOffTime = GTempSetting.ulStayOffTime;

		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulStayOffTime %3600;
		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_HOUR,
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2023      	movs	r0, #35	; 0x23
 8001abc:	f002 fe12 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				GstSystemSetting.ulStayOffTime /3600);

		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_MINUTE,
				temp_ui32/60);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <ADCT_BGS_MODBUS_GetSetting+0x390>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
		uint32_t temp_ui32;
		temp_ui32 = GstSystemSetting.ulStayOffTime %3600;
		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_HOUR,
				GstSystemSetting.ulStayOffTime /3600);

		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_MINUTE,
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	2024      	movs	r0, #36	; 0x24
 8001ad0:	f002 fe08 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				temp_ui32/60);
	}

	if (GstSystemSetting.ucEnableAlarm
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001ad6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
			!= GTempSetting.ucEnableAlarm ) {
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae0:	b2db      	uxtb	r3, r3

		ADCT_AT24C64_WriteOneBytes(EPPROM_STAYOFFTIME_MINUTE,
				temp_ui32/60);
	}

	if (GstSystemSetting.ucEnableAlarm
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d00d      	beq.n	8001b02 <ADCT_BGS_MODBUS_GetSetting+0x352>
			!= GTempSetting.ucEnableAlarm ) {
		GstSystemSetting.ucEnableAlarm = GTempSetting.ucEnableAlarm;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001af0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ADCT_AT24C64_WriteOneBytes(EPPROM_ENABLE_ALARM,
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001afa:	4619      	mov	r1, r3
 8001afc:	200e      	movs	r0, #14
 8001afe:	f002 fdf1 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				GstSystemSetting.ucEnableAlarm);
	}

	if (GstSystemSetting.ucDoorBurglarEnableAlarm
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001b04:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
			!= GTempSetting.ucDoorBurglarEnableAlarm ) {
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001b0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b0e:	b2db      	uxtb	r3, r3
		GstSystemSetting.ucEnableAlarm = GTempSetting.ucEnableAlarm;
		ADCT_AT24C64_WriteOneBytes(EPPROM_ENABLE_ALARM,
				GstSystemSetting.ucEnableAlarm);
	}

	if (GstSystemSetting.ucDoorBurglarEnableAlarm
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d00d      	beq.n	8001b30 <ADCT_BGS_MODBUS_GetSetting+0x380>
			!= GTempSetting.ucDoorBurglarEnableAlarm ) {
		GstSystemSetting.ucDoorBurglarEnableAlarm = GTempSetting.ucDoorBurglarEnableAlarm;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <ADCT_BGS_MODBUS_GetSetting+0x394>)
 8001b16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ADCT_AT24C64_WriteOneBytes(EPPROM_DOORBURGLAR_ENABLEALARM,
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <ADCT_BGS_MODBUS_GetSetting+0x38c>)
 8001b24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b28:	4619      	mov	r1, r3
 8001b2a:	200d      	movs	r0, #13
 8001b2c:	f002 fdda 	bl	80046e4 <ADCT_AT24C64_WriteOneBytes>
				GstSystemSetting.ucDoorBurglarEnableAlarm);
	}
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	91a2b3c5 	.word	0x91a2b3c5
 8001b3c:	2000250c 	.word	0x2000250c
 8001b40:	88888889 	.word	0x88888889
 8001b44:	20002498 	.word	0x20002498

08001b48 <eMBRegInputCB>:
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress,
		USHORT usNRegs) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	803b      	strh	r3, [r7, #0]
	(void)pucRegBuffer;
	(void)usAddress;
	(void)usNRegs;
	return MB_ENOREG;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
		USHORT usNRegs, eMBRegisterMode eMode) {
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	460b      	mov	r3, r1
 8001b78:	813b      	strh	r3, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	71fb      	strb	r3, [r7, #7]
	eMBErrorCode eStatus = MB_ENOERR;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
	int iRegIndex;

	if ((usAddress >= ADCT_REG_HOLDING_START)
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d957      	bls.n	8001c3c <eMBRegHoldingCB+0xd8>
			&& (usAddress + usNRegs <= ADCT_REG_HOLDING_START + REG_HOLDING_NREGS)) {
 8001b8c:	897a      	ldrh	r2, [r7, #10]
 8001b8e:	893b      	ldrh	r3, [r7, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	f649 4299 	movw	r2, #40089	; 0x9c99
 8001b96:	4293      	cmp	r3, r2
 8001b98:	dc50      	bgt.n	8001c3c <eMBRegHoldingCB+0xd8>
		iRegIndex = (int) (usAddress - usRegHoldingStart);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <eMBRegHoldingCB+0xe8>)
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

		switch (eMode)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01e      	beq.n	8001be8 <eMBRegHoldingCB+0x84>
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d041      	beq.n	8001c32 <eMBRegHoldingCB+0xce>
				iRegIndex++;
				usNRegs--;
			}
			break;
		}
	} else {
 8001bae:	e047      	b.n	8001c40 <eMBRegHoldingCB+0xdc>

		switch (eMode)
		{
		case MB_REG_READ:
			while (usNRegs > 0) {
				*pucRegBuffer++ = (UCHAR) (usRegHoldingBuf[iRegIndex] >> 8);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	4926      	ldr	r1, [pc, #152]	; (8001c50 <eMBRegHoldingCB+0xec>)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	0a12      	lsrs	r2, r2, #8
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ = (UCHAR) (usRegHoldingBuf[iRegIndex] & 0xFF);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60fa      	str	r2, [r7, #12]
 8001bce:	4920      	ldr	r1, [pc, #128]	; (8001c50 <eMBRegHoldingCB+0xec>)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
				iRegIndex++;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	3301      	adds	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
				usNRegs--;
 8001be2:	893b      	ldrh	r3, [r7, #8]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	813b      	strh	r3, [r7, #8]
		iRegIndex = (int) (usAddress - usRegHoldingStart);

		switch (eMode)
		{
		case MB_REG_READ:
			while (usNRegs > 0) {
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e0      	bne.n	8001bb0 <eMBRegHoldingCB+0x4c>
				*pucRegBuffer++ = (UCHAR) (usRegHoldingBuf[iRegIndex] >> 8);
				*pucRegBuffer++ = (UCHAR) (usRegHoldingBuf[iRegIndex] & 0xFF);
				iRegIndex++;
				usNRegs--;
			}
			break;
 8001bee:	e024      	b.n	8001c3a <eMBRegHoldingCB+0xd6>
		case MB_REG_WRITE:
			while (usNRegs > 0) {
				usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b299      	uxth	r1, r3
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <eMBRegHoldingCB+0xec>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	7819      	ldrb	r1, [r3, #0]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <eMBRegHoldingCB+0xec>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	b28b      	uxth	r3, r1
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b299      	uxth	r1, r3
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <eMBRegHoldingCB+0xec>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				iRegIndex++;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
				usNRegs--;
 8001c2c:	893b      	ldrh	r3, [r7, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	813b      	strh	r3, [r7, #8]
				iRegIndex++;
				usNRegs--;
			}
			break;
		case MB_REG_WRITE:
			while (usNRegs > 0) {
 8001c32:	893b      	ldrh	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1db      	bne.n	8001bf0 <eMBRegHoldingCB+0x8c>
				usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
				usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
				iRegIndex++;
				usNRegs--;
			}
			break;
 8001c38:	bf00      	nop
		}
	} else {
 8001c3a:	e001      	b.n	8001c40 <eMBRegHoldingCB+0xdc>
		eStatus = MB_ENOREG;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	200000f0 	.word	0x200000f0
 8001c50:	20000220 	.word	0x20000220

08001c54 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
		USHORT usNCoils, eMBRegisterMode eMode) {
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	460b      	mov	r3, r1
 8001c68:	813b      	strh	r3, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	71fb      	strb	r3, [r7, #7]
	(void)pucRegBuffer;
	(void)usAddress;
	(void)usNCoils;
	(void)eMode;
	return MB_ENOREG;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress,
		USHORT usNDiscrete) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	803b      	strh	r3, [r7, #0]
	(void)pucRegBuffer;
	(void)usAddress;
	(void)usNDiscrete;
	return MB_ENOREG;
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <ADCT_BGS_StateManger>:
void ADCT_BGS_CheckTminFan(void);
void ADCT_BGS_CheckDelayOfftime(void);
void ADCT_BGS_AlarmBuzzer(void);
void ADCT_BGS_GetCurrentRTCData(void );
void ADCT_BGS_StateManger(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

	if(g_ASW_Task_flag.ASW_1s_flag == ADCT_TRUE)
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <ADCT_BGS_StateManger+0x90>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d13f      	bne.n	8001d24 <ADCT_BGS_StateManger+0x8c>
	{
		if(count_dht22 >3)
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <ADCT_BGS_StateManger+0x94>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d909      	bls.n	8001cc0 <ADCT_BGS_StateManger+0x28>
		{
			/* Call sequence start reading DHT 22 */
			/* DHT 22 main */
			ADCT_BGS_DHT22Start(DHT22_Device_1);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f001 fc69 	bl	8003584 <ADCT_BGS_DHT22Start>
			/* DHT22 sub */
#ifdef SUB_DHT22
			ADCT_BGS_DHT22Start(DHT22_Device_2);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f001 fc66 	bl	8003584 <ADCT_BGS_DHT22Start>
			count_dht22 =0;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <ADCT_BGS_StateManger+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e005      	b.n	8001ccc <ADCT_BGS_StateManger+0x34>
#endif
		}
		else
		{
			count_dht22 ++;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <ADCT_BGS_StateManger+0x94>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <ADCT_BGS_StateManger+0x94>)
 8001cca:	701a      	strb	r2, [r3, #0]
		}
		/* Get the latest RTC value */
		ADCT_BGS_GetCurrentRTCData();
 8001ccc:	f000 f834 	bl	8001d38 <ADCT_BGS_GetCurrentRTCData>
		/* Get all input data */
		ADCT_IO_FPT_GetValue(&GstSystemStatus.ioData);
 8001cd0:	4817      	ldr	r0, [pc, #92]	; (8001d30 <ADCT_BGS_StateManger+0x98>)
 8001cd2:	f000 f9b3 	bl	800203c <ADCT_IO_FPT_GetValue>
		/* check state modbus */
		ADCT_SYSTEM_FPT_CheckState_MODBUS();
 8001cd6:	f000 fa2f 	bl	8002138 <ADCT_SYSTEM_FPT_CheckState_MODBUS>
		/* Check state IO */
		ADCT_SYSTEM_FPT_CheckState_IO();
 8001cda:	f000 fb77 	bl	80023cc <ADCT_SYSTEM_FPT_CheckState_IO>
		/* Check buzzer timer */
		ADCT_BGS_CheckBuzzerTimerRun();
 8001cde:	f000 f8dd 	bl	8001e9c <ADCT_BGS_CheckBuzzerTimerRun>
		/* Check switching time */
		ADCT_BGS_SwitchAIR_TimeCal();
 8001ce2:	f000 f833 	bl	8001d4c <ADCT_BGS_SwitchAIR_TimeCal>
		/* Check time min swith for AIR 1_2*/
		ADCT_BGS_CheckMinSwitchAIR1_2();
 8001ce6:	f000 f87d 	bl	8001de4 <ADCT_BGS_CheckMinSwitchAIR1_2>
		/* Check time min switch for AIR 3_4 */
		ADCT_BGS_CheckMinSwitchAIR3_4();
 8001cea:	f000 f8a9 	bl	8001e40 <ADCT_BGS_CheckMinSwitchAIR3_4>
		/* Check state DHT22 */
		ADCT_SYSTEM_FPT_CheckState_DHT();
 8001cee:	f000 fc95 	bl	800261c <ADCT_SYSTEM_FPT_CheckState_DHT>
		/* Check t min fan */
		ADCT_BGS_CheckTminFan();
 8001cf2:	f000 f943 	bl	8001f7c <ADCT_BGS_CheckTminFan>
		/* Get AC Data */
		if(count_ac > 3)
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <ADCT_BGS_StateManger+0x9c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d905      	bls.n	8001d0a <ADCT_BGS_StateManger+0x72>
		{
			ADCT_AC_GetData();
 8001cfe:	f004 fa05 	bl	800610c <ADCT_AC_GetData>
			count_ac = 0;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <ADCT_BGS_StateManger+0x9c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e005      	b.n	8001d16 <ADCT_BGS_StateManger+0x7e>
		}
		else
		{
			count_ac ++;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <ADCT_BGS_StateManger+0x9c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <ADCT_BGS_StateManger+0x9c>)
 8001d14:	701a      	strb	r2, [r3, #0]
		}
		/* Check delay off time */
		ADCT_BGS_CheckDelayOfftime();
 8001d16:	f000 f901 	bl	8001f1c <ADCT_BGS_CheckDelayOfftime>
		ADCT_BGS_AlarmBuzzer();
 8001d1a:	f000 f95d 	bl	8001fd8 <ADCT_BGS_AlarmBuzzer>
		g_ASW_Task_flag.ASW_1s_flag = ADCT_FALSE;
 8001d1e:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <ADCT_BGS_StateManger+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	}
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20002488 	.word	0x20002488
 8001d2c:	200024d9 	.word	0x200024d9
 8001d30:	20002576 	.word	0x20002576
 8001d34:	200024d8 	.word	0x200024d8

08001d38 <ADCT_BGS_GetCurrentRTCData>:
void ADCT_BGS_GetCurrentRTCData(void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	ADCT_BGS_Run_RTC(&g_ADCT_BGS_Current_RTC);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <ADCT_BGS_GetCurrentRTCData+0x10>)
 8001d3e:	f004 ff51 	bl	8006be4 <ADCT_BGS_Run_RTC>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200024f4 	.word	0x200024f4

08001d4c <ADCT_BGS_SwitchAIR_TimeCal>:
void ADCT_BGS_SwitchAIR_TimeCal(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_TimerManager.SWitchingTimer.second  == 0)
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d52:	789b      	ldrb	r3, [r3, #2]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d138      	bne.n	8001dca <ADCT_BGS_SwitchAIR_TimeCal+0x7e>
	{
		g_ADCT_BGS_TimerManager.SWitchingTimer.second = 59;
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d5a:	223b      	movs	r2, #59	; 0x3b
 8001d5c:	709a      	strb	r2, [r3, #2]
		if(g_ADCT_BGS_TimerManager.SWitchingTimer.minute == 0)
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d12a      	bne.n	8001dbc <ADCT_BGS_SwitchAIR_TimeCal+0x70>
		{
			g_ADCT_BGS_TimerManager.SWitchingTimer.minute = 59;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d68:	223b      	movs	r2, #59	; 0x3b
 8001d6a:	705a      	strb	r2, [r3, #1]
			if(g_ADCT_BGS_TimerManager.SWitchingTimer.hour == 0)
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d11c      	bne.n	8001dae <ADCT_BGS_SwitchAIR_TimeCal+0x62>
			{
				if(g_ADCT_BGS_StateOutput.WITCH_AIR == ADCT_TRUE)
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <ADCT_BGS_SwitchAIR_TimeCal+0x94>)
 8001d76:	7a9b      	ldrb	r3, [r3, #10]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d103      	bne.n	8001d84 <ADCT_BGS_SwitchAIR_TimeCal+0x38>
				{
					g_ADCT_BGS_StateOutput.WITCH_AIR = ADCT_FALSE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <ADCT_BGS_SwitchAIR_TimeCal+0x94>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	729a      	strb	r2, [r3, #10]
 8001d82:	e002      	b.n	8001d8a <ADCT_BGS_SwitchAIR_TimeCal+0x3e>
				}
				else
				{
					g_ADCT_BGS_StateOutput.WITCH_AIR = ADCT_TRUE;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <ADCT_BGS_SwitchAIR_TimeCal+0x94>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	729a      	strb	r2, [r3, #10]
				}
				g_ADCT_BGS_TimerManager.SWitchingTimer.hour = ADCT_AT24C64_ReadOneByte(EPPROM_SWITCHING_HOUR);
 8001d8a:	200b      	movs	r0, #11
 8001d8c:	f002 fc74 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001d96:	701a      	strb	r2, [r3, #0]
				g_ADCT_BGS_TimerManager.SWitchingTimer.minute = ADCT_AT24C64_ReadOneByte(EPPROM_SWITCHING_MINUTE);
 8001d98:	200c      	movs	r0, #12
 8001d9a:	f002 fc6d 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001da4:	705a      	strb	r2, [r3, #1]
				g_ADCT_BGS_TimerManager.SWitchingTimer.second = 0;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		g_ADCT_BGS_TimerManager.SWitchingTimer.second --;
	}
}
 8001dac:	e013      	b.n	8001dd6 <ADCT_BGS_SwitchAIR_TimeCal+0x8a>
				g_ADCT_BGS_TimerManager.SWitchingTimer.minute = ADCT_AT24C64_ReadOneByte(EPPROM_SWITCHING_MINUTE);
				g_ADCT_BGS_TimerManager.SWitchingTimer.second = 0;
			}
			else
			{
				g_ADCT_BGS_TimerManager.SWitchingTimer.hour -- ;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001db8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		g_ADCT_BGS_TimerManager.SWitchingTimer.second --;
	}
}
 8001dba:	e00c      	b.n	8001dd6 <ADCT_BGS_SwitchAIR_TimeCal+0x8a>
			{
				g_ADCT_BGS_TimerManager.SWitchingTimer.hour -- ;
			}
		}else
		{
			g_ADCT_BGS_TimerManager.SWitchingTimer.minute --;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001dc6:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		g_ADCT_BGS_TimerManager.SWitchingTimer.second --;
	}
}
 8001dc8:	e005      	b.n	8001dd6 <ADCT_BGS_SwitchAIR_TimeCal+0x8a>
			g_ADCT_BGS_TimerManager.SWitchingTimer.minute --;
		}
	}
	else
	{
		g_ADCT_BGS_TimerManager.SWitchingTimer.second --;
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <ADCT_BGS_SwitchAIR_TimeCal+0x90>)
 8001dd4:	709a      	strb	r2, [r3, #2]
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200024dc 	.word	0x200024dc
 8001de0:	200024fc 	.word	0x200024fc

08001de4 <ADCT_BGS_CheckMinSwitchAIR1_2>:

// Timer to check if air_1 has run at least t_min (s)
void ADCT_BGS_CheckMinSwitchAIR1_2(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == ADCT_TRUE)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <ADCT_BGS_CheckMinSwitchAIR1_2+0x54>)
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d11e      	bne.n	8001e2e <ADCT_BGS_CheckMinSwitchAIR1_2+0x4a>
	{
		if(g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second == 0)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d114      	bne.n	8001e22 <ADCT_BGS_CheckMinSwitchAIR1_2+0x3e>
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second = 59;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001dfa:	223b      	movs	r2, #59	; 0x3b
 8001dfc:	715a      	strb	r2, [r3, #5]
			if(g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute == 0)
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <ADCT_BGS_CheckMinSwitchAIR1_2+0x30>
			{
				g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE = FALSE;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <ADCT_BGS_CheckMinSwitchAIR1_2+0x54>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	715a      	strb	r2, [r3, #5]
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second = 0;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	715a      	strb	r2, [r3, #5]
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second --;
		}
	}
}
 8001e12:	e00c      	b.n	8001e2e <ADCT_BGS_CheckMinSwitchAIR1_2+0x4a>
				g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE = FALSE;
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second = 0;
			}
			else
			{
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute --;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e1e:	711a      	strb	r2, [r3, #4]
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second --;
		}
	}
}
 8001e20:	e005      	b.n	8001e2e <ADCT_BGS_CheckMinSwitchAIR1_2+0x4a>
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute --;
			}
		}
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second --;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e24:	795b      	ldrb	r3, [r3, #5]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <ADCT_BGS_CheckMinSwitchAIR1_2+0x58>)
 8001e2c:	715a      	strb	r2, [r3, #5]
		}
	}
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200024fc 	.word	0x200024fc
 8001e3c:	200024dc 	.word	0x200024dc

08001e40 <ADCT_BGS_CheckMinSwitchAIR3_4>:
void ADCT_BGS_CheckMinSwitchAIR3_4(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == ADCT_TRUE)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <ADCT_BGS_CheckMinSwitchAIR3_4+0x54>)
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d11e      	bne.n	8001e8a <ADCT_BGS_CheckMinSwitchAIR3_4+0x4a>
	{
		if(g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second == 0)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e4e:	7a1b      	ldrb	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d114      	bne.n	8001e7e <ADCT_BGS_CheckMinSwitchAIR3_4+0x3e>
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second = 59;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e56:	223b      	movs	r2, #59	; 0x3b
 8001e58:	721a      	strb	r2, [r3, #8]
			if(g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute == 0)
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e5c:	79db      	ldrb	r3, [r3, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <ADCT_BGS_CheckMinSwitchAIR3_4+0x30>
			{
				g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE = FALSE;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <ADCT_BGS_CheckMinSwitchAIR3_4+0x54>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	719a      	strb	r2, [r3, #6]
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second = 0;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	721a      	strb	r2, [r3, #8]
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second --;
		}
	}
}
 8001e6e:	e00c      	b.n	8001e8a <ADCT_BGS_CheckMinSwitchAIR3_4+0x4a>
				g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE = FALSE;
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second = 0;
			}
			else
			{
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute --;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e72:	79db      	ldrb	r3, [r3, #7]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e7a:	71da      	strb	r2, [r3, #7]
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second --;
		}
	}
}
 8001e7c:	e005      	b.n	8001e8a <ADCT_BGS_CheckMinSwitchAIR3_4+0x4a>
				g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute --;
			}
		}
		else
		{
			g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second --;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e80:	7a1b      	ldrb	r3, [r3, #8]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <ADCT_BGS_CheckMinSwitchAIR3_4+0x58>)
 8001e88:	721a      	strb	r2, [r3, #8]
		}
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200024fc 	.word	0x200024fc
 8001e98:	200024dc 	.word	0x200024dc

08001e9c <ADCT_BGS_CheckBuzzerTimerRun>:
void ADCT_BGS_CheckBuzzerTimerRun(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.BUZZER_TIMER_STATE == ADCT_TRUE)
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <ADCT_BGS_CheckBuzzerTimerRun+0x78>)
 8001ea2:	791b      	ldrb	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d133      	bne.n	8001f10 <ADCT_BGS_CheckBuzzerTimerRun+0x74>
	{
		if(g_ADCT_BGS_TimerManager.BuzzerTimer.second == 0)
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001eaa:	7b9b      	ldrb	r3, [r3, #14]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d129      	bne.n	8001f04 <ADCT_BGS_CheckBuzzerTimerRun+0x68>
		{
			g_ADCT_BGS_TimerManager.BuzzerTimer.second = 59;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001eb2:	223b      	movs	r2, #59	; 0x3b
 8001eb4:	739a      	strb	r2, [r3, #14]
			if(g_ADCT_BGS_TimerManager.BuzzerTimer.minute ==0)
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001eb8:	7b5b      	ldrb	r3, [r3, #13]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11b      	bne.n	8001ef6 <ADCT_BGS_CheckBuzzerTimerRun+0x5a>
			{
				g_ADCT_BGS_TimerManager.BuzzerTimer.minute = 59;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001ec0:	223b      	movs	r2, #59	; 0x3b
 8001ec2:	735a      	strb	r2, [r3, #13]
				if(g_ADCT_BGS_TimerManager.BuzzerTimer.hour == 0)
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d121      	bne.n	8001f10 <ADCT_BGS_CheckBuzzerTimerRun+0x74>
				{
					g_ADCT_BGS_StateOutput.BUZZER_TIMER_STATE = ADCT_FALSE;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <ADCT_BGS_CheckBuzzerTimerRun+0x78>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	711a      	strb	r2, [r3, #4]
					g_ADCT_BGS_TimerManager.BuzzerTimer.hour = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_LOW);
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f002 fbd0 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001ede:	731a      	strb	r2, [r3, #12]
					g_ADCT_BGS_TimerManager.BuzzerTimer.minute = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_HIGH);
 8001ee0:	2010      	movs	r0, #16
 8001ee2:	f002 fbc9 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001eec:	735a      	strb	r2, [r3, #13]
					g_ADCT_BGS_TimerManager.BuzzerTimer.second =0;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	739a      	strb	r2, [r3, #14]
		}else
		{
			g_ADCT_BGS_TimerManager.BuzzerTimer.second--;
		}
	}
}
 8001ef4:	e00c      	b.n	8001f10 <ADCT_BGS_CheckBuzzerTimerRun+0x74>
					g_ADCT_BGS_TimerManager.BuzzerTimer.second =0;
				}
			}
			else
			{
				g_ADCT_BGS_TimerManager.BuzzerTimer.minute --;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001ef8:	7b5b      	ldrb	r3, [r3, #13]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001f00:	735a      	strb	r2, [r3, #13]
		}else
		{
			g_ADCT_BGS_TimerManager.BuzzerTimer.second--;
		}
	}
}
 8001f02:	e005      	b.n	8001f10 <ADCT_BGS_CheckBuzzerTimerRun+0x74>
			{
				g_ADCT_BGS_TimerManager.BuzzerTimer.minute --;
			}
		}else
		{
			g_ADCT_BGS_TimerManager.BuzzerTimer.second--;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001f06:	7b9b      	ldrb	r3, [r3, #14]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <ADCT_BGS_CheckBuzzerTimerRun+0x7c>)
 8001f0e:	739a      	strb	r2, [r3, #14]
		}
	}
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200024fc 	.word	0x200024fc
 8001f18:	200024dc 	.word	0x200024dc

08001f1c <ADCT_BGS_CheckDelayOfftime>:

void ADCT_BGS_CheckDelayOfftime(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.DELAY_OFFTIMER_STATE == ADCT_TRUE)
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <ADCT_BGS_CheckDelayOfftime+0x58>)
 8001f22:	7a1b      	ldrb	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d121      	bne.n	8001f6c <ADCT_BGS_CheckDelayOfftime+0x50>
	{
		if(g_ADCT_BGS_TimerManager.StayOffTimer.second ==0)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f2a:	7adb      	ldrb	r3, [r3, #11]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d117      	bne.n	8001f60 <ADCT_BGS_CheckDelayOfftime+0x44>
		{
			g_ADCT_BGS_TimerManager.StayOffTimer.second = 59;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f32:	223b      	movs	r2, #59	; 0x3b
 8001f34:	72da      	strb	r2, [r3, #11]
			if(g_ADCT_BGS_TimerManager.StayOffTimer.minute == 0)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f38:	7a9b      	ldrb	r3, [r3, #10]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <ADCT_BGS_CheckDelayOfftime+0x36>
			{
				g_ADCT_BGS_StateOutput.DELAY_OFFTIMER_STATE = ADCT_FALSE;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <ADCT_BGS_CheckDelayOfftime+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	721a      	strb	r2, [r3, #8]
				g_ADCT_BGS_TimerManager.StayOffTimer.second = 0;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	72da      	strb	r2, [r3, #11]
				g_ADCT_BGS_StateOutput.DELAY_OFFTIMER_ELAPSED = ADCT_TRUE;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <ADCT_BGS_CheckDelayOfftime+0x58>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	725a      	strb	r2, [r3, #9]
		else
		{
			g_ADCT_BGS_TimerManager.StayOffTimer.second -- ;
		}
	}
}
 8001f50:	e00c      	b.n	8001f6c <ADCT_BGS_CheckDelayOfftime+0x50>
				g_ADCT_BGS_TimerManager.StayOffTimer.second = 0;
				g_ADCT_BGS_StateOutput.DELAY_OFFTIMER_ELAPSED = ADCT_TRUE;
			}
			else
			{
				g_ADCT_BGS_TimerManager.StayOffTimer.minute --;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f54:	7a9b      	ldrb	r3, [r3, #10]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f5c:	729a      	strb	r2, [r3, #10]
		else
		{
			g_ADCT_BGS_TimerManager.StayOffTimer.second -- ;
		}
	}
}
 8001f5e:	e005      	b.n	8001f6c <ADCT_BGS_CheckDelayOfftime+0x50>
				g_ADCT_BGS_TimerManager.StayOffTimer.minute --;
			}
		}
		else
		{
			g_ADCT_BGS_TimerManager.StayOffTimer.second -- ;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f62:	7adb      	ldrb	r3, [r3, #11]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <ADCT_BGS_CheckDelayOfftime+0x5c>)
 8001f6a:	72da      	strb	r2, [r3, #11]
		}
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	200024fc 	.word	0x200024fc
 8001f78:	200024dc 	.word	0x200024dc

08001f7c <ADCT_BGS_CheckTminFan>:
void ADCT_BGS_CheckTminFan(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == ADCT_TRUE)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <ADCT_BGS_CheckTminFan+0x54>)
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11e      	bne.n	8001fc6 <ADCT_BGS_CheckTminFan+0x4a>
	{
		if(g_ADCT_BGS_TimerManager.MinRuningTimerFan.second == 0)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001f8a:	7d1b      	ldrb	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d114      	bne.n	8001fba <ADCT_BGS_CheckTminFan+0x3e>
		{
			g_ADCT_BGS_TimerManager.MinRuningTimerFan.second = 59;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001f92:	223b      	movs	r2, #59	; 0x3b
 8001f94:	751a      	strb	r2, [r3, #20]
			if(g_ADCT_BGS_TimerManager.MinRuningTimerFan.minute == 0)
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001f98:	7cdb      	ldrb	r3, [r3, #19]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <ADCT_BGS_CheckTminFan+0x30>
			{
				g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = ADCT_FALSE;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <ADCT_BGS_CheckTminFan+0x54>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	709a      	strb	r2, [r3, #2]
				g_ADCT_BGS_TimerManager.MinRuningTimerFan.second = 0;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	751a      	strb	r2, [r3, #20]
		else
		{
			g_ADCT_BGS_TimerManager.MinRuningTimerFan.second -- ;
		}
	}
}
 8001faa:	e00c      	b.n	8001fc6 <ADCT_BGS_CheckTminFan+0x4a>
				g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = ADCT_FALSE;
				g_ADCT_BGS_TimerManager.MinRuningTimerFan.second = 0;
			}
			else
			{
				g_ADCT_BGS_TimerManager.MinRuningTimerFan.minute--;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001fae:	7cdb      	ldrb	r3, [r3, #19]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001fb6:	74da      	strb	r2, [r3, #19]
		else
		{
			g_ADCT_BGS_TimerManager.MinRuningTimerFan.second -- ;
		}
	}
}
 8001fb8:	e005      	b.n	8001fc6 <ADCT_BGS_CheckTminFan+0x4a>
				g_ADCT_BGS_TimerManager.MinRuningTimerFan.minute--;
			}
		}
		else
		{
			g_ADCT_BGS_TimerManager.MinRuningTimerFan.second -- ;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001fbc:	7d1b      	ldrb	r3, [r3, #20]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <ADCT_BGS_CheckTminFan+0x58>)
 8001fc4:	751a      	strb	r2, [r3, #20]
		}
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200024fc 	.word	0x200024fc
 8001fd4:	200024dc 	.word	0x200024dc

08001fd8 <ADCT_BGS_AlarmBuzzer>:

void ADCT_BGS_AlarmBuzzer(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	if(g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag == ADCT_TRUE)
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8001fde:	7adb      	ldrb	r3, [r3, #11]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d125      	bne.n	8002030 <ADCT_BGS_AlarmBuzzer+0x58>
	{
		if(g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt == 0)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11b      	bne.n	8002024 <ADCT_BGS_AlarmBuzzer+0x4c>
		{
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_FALSE;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	72da      	strb	r2, [r3, #11]
			g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE = ADCT_FALSE;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	70da      	strb	r2, [r3, #3]
			if(g_ADCT_BGS_StateOutput.BUZZER_TIMER_STATE == ADCT_FALSE)
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d117      	bne.n	8002030 <ADCT_BGS_AlarmBuzzer+0x58>
			{
				g_ADCT_BGS_StateOutput.BUZZER_TIMER_STATE = ADCT_TRUE;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8002002:	2201      	movs	r2, #1
 8002004:	711a      	strb	r2, [r3, #4]
				g_ADCT_BGS_TimerManager.BuzzerTimer.hour = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_HIGH );
 8002006:	2010      	movs	r0, #16
 8002008:	f002 fb36 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <ADCT_BGS_AlarmBuzzer+0x60>)
 8002012:	731a      	strb	r2, [r3, #12]
				g_ADCT_BGS_TimerManager.BuzzerTimer.minute = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_LOW );
 8002014:	200f      	movs	r0, #15
 8002016:	f002 fb2f 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <ADCT_BGS_AlarmBuzzer+0x60>)
 8002020:	735a      	strb	r2, [r3, #13]
		else
		{
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt -- ;
		}
	}
}
 8002022:	e005      	b.n	8002030 <ADCT_BGS_AlarmBuzzer+0x58>
				g_ADCT_BGS_TimerManager.BuzzerTimer.minute = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_LOW );
			}
		}
		else
		{
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt -- ;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 8002026:	7b1b      	ldrb	r3, [r3, #12]
 8002028:	3b01      	subs	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <ADCT_BGS_AlarmBuzzer+0x5c>)
 800202e:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200024fc 	.word	0x200024fc
 8002038:	200024dc 	.word	0x200024dc

0800203c <ADCT_IO_FPT_GetValue>:
 * @brief Get value of I/Os.
 * @param pIOData        : data of I/Os
 * @retval None
 */
void ADCT_IO_FPT_GetValue(IO_MODULE_DATA *pIOData)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	/*DOOR*/
	pIOData->ucDoor [0] = !ADCT_BGS_DOOR_READ ;
 8002044:	2102      	movs	r1, #2
 8002046:	483a      	ldr	r0, [pc, #232]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 8002048:	f006 f806 	bl	8008058 <GPIO_ReadInputDataBit>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	70da      	strb	r2, [r3, #3]
	pIOData->ucDoor [1] = !ADCT_BGS_DOOR_READ ;
 800205e:	2102      	movs	r1, #2
 8002060:	4833      	ldr	r0, [pc, #204]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 8002062:	f005 fff9 	bl	8008058 <GPIO_ReadInputDataBit>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	711a      	strb	r2, [r3, #4]
	pIOData->ucDoor [2] = !ADCT_BGS_DOOR_READ ;
 8002078:	2102      	movs	r1, #2
 800207a:	482d      	ldr	r0, [pc, #180]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 800207c:	f005 ffec 	bl	8008058 <GPIO_ReadInputDataBit>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	715a      	strb	r2, [r3, #5]
	pIOData->ucDoor [3] = !ADCT_BGS_DOOR_READ ;
 8002092:	2102      	movs	r1, #2
 8002094:	4826      	ldr	r0, [pc, #152]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 8002096:	f005 ffdf 	bl	8008058 <GPIO_ReadInputDataBit>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	719a      	strb	r2, [r3, #6]
	pIOData->ucDoor [4] = !ADCT_BGS_DOOR_READ ;
 80020ac:	2102      	movs	r1, #2
 80020ae:	4820      	ldr	r0, [pc, #128]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 80020b0:	f005 ffd2 	bl	8008058 <GPIO_ReadInputDataBit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	71da      	strb	r2, [r3, #7]
	/*FIRE*/
	pIOData->ucFire = ADCT_BGS_FIRE_READ;
 80020c6:	2108      	movs	r1, #8
 80020c8:	4819      	ldr	r0, [pc, #100]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 80020ca:	f005 ffc5 	bl	8008058 <GPIO_ReadInputDataBit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	701a      	strb	r2, [r3, #0]
	/*WATER*/
	pIOData->ucWater = ADCT_BGS_WATER_READ;
 80020d6:	2110      	movs	r1, #16
 80020d8:	4815      	ldr	r0, [pc, #84]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 80020da:	f005 ffbd 	bl	8008058 <GPIO_ReadInputDataBit>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	709a      	strb	r2, [r3, #2]
	/*SMOKE*/
	pIOData->ucSmoke = ADCT_BGS_SMOKE_READ;
 80020e6:	2101      	movs	r1, #1
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 80020ea:	f005 ffb5 	bl	8008058 <GPIO_ReadInputDataBit>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	705a      	strb	r2, [r3, #1]

	/*BURGLAR*/
	pIOData->ucBurglar = ADCT_BGS_BURGLAR_READ;
 80020f6:	2104      	movs	r1, #4
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <ADCT_IO_FPT_GetValue+0xf4>)
 80020fa:	f005 ffad 	bl	8008058 <GPIO_ReadInputDataBit>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	721a      	strb	r2, [r3, #8]
	/*BUZZER*/
	pIOData->ucBuzzer = ADCT_BGS_BUZZER_READ();
 8002106:	2102      	movs	r1, #2
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <ADCT_IO_FPT_GetValue+0xf8>)
 800210a:	f005 ffbf 	bl	800808c <GPIO_ReadOutputDataBit>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	745a      	strb	r2, [r3, #17]
	/*LED*/
	pIOData->ucLed = ADCT_BGS_LAMP_READ();
 8002116:	2101      	movs	r1, #1
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <ADCT_IO_FPT_GetValue+0xf8>)
 800211a:	f005 ffb7 	bl	800808c <GPIO_ReadOutputDataBit>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	749a      	strb	r2, [r3, #18]
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40011000 	.word	0x40011000
 8002134:	40010800 	.word	0x40010800

08002138 <ADCT_SYSTEM_FPT_CheckState_MODBUS>:
	/* Initialize variables */
	TempStateTimer = TM_DELAY_TimerCreate(1000, 0, 0, ADCT_SYSTEM_FPT_TempTimer_Task, NULL);
}
#ifdef ADCT_MODBUS_ENABLED
void ADCT_SYSTEM_FPT_CheckState_MODBUS(void )
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	/* High Main voltage */
	if((GstSystemStatus.mbData.usCurrentMainVoltage > GstSystemSetting.usHighMainVoltage)&&
 800213c:	4b7e      	ldr	r3, [pc, #504]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	4b7e      	ldr	r3, [pc, #504]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 8002142:	899b      	ldrh	r3, [r3, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d90d      	bls.n	8002164 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x2c>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE) == WARN_OFF))
 8002148:	4b7d      	ldr	r3, [pc, #500]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	0adb      	lsrs	r3, r3, #11
 800214e:	f003 0301 	and.w	r3, r3, #1
}
#ifdef ADCT_MODBUS_ENABLED
void ADCT_SYSTEM_FPT_CheckState_MODBUS(void )
{
	/* High Main voltage */
	if((GstSystemStatus.mbData.usCurrentMainVoltage > GstSystemSetting.usHighMainVoltage)&&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x2c>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE) == WARN_OFF))
	{
		/*Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE, WARN_ON);
 8002156:	4b7a      	ldr	r3, [pc, #488]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800215e:	4a78      	ldr	r2, [pc, #480]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002160:	6053      	str	r3, [r2, #4]
 8002162:	e012      	b.n	800218a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x52>

		/* Store log into EPPRROM */
	}
	else if ((GstSystemStatus.mbData.usCurrentMainVoltage < GstSystemSetting.usHighMainVoltage) &&
 8002164:	4b74      	ldr	r3, [pc, #464]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	4b74      	ldr	r3, [pc, #464]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 800216a:	899b      	ldrh	r3, [r3, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20c      	bcs.n	800218a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x52>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE) == WARN_ON))
 8002170:	4b73      	ldr	r3, [pc, #460]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	0adb      	lsrs	r3, r3, #11
 8002176:	f003 0301 	and.w	r3, r3, #1
		/*Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE, WARN_ON);

		/* Store log into EPPRROM */
	}
	else if ((GstSystemStatus.mbData.usCurrentMainVoltage < GstSystemSetting.usHighMainVoltage) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x52>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE) == WARN_ON))
	{
		/* Set warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE, WARN_OFF);
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002188:	6053      	str	r3, [r2, #4]
		/* Store log into Epprom */
	}
	/* Low Main Voltage (SNMP_SYT_013) */
	if((GstSystemStatus.mbData.usCurrentMainVoltage < GstSystemSetting.usLowMainVoltage) &&
 800218a:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 8002190:	895b      	ldrh	r3, [r3, #10]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20d      	bcs.n	80021b2 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x7a>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE) == WARN_OFF))
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0b1b      	lsrs	r3, r3, #12
 800219c:	f003 0301 	and.w	r3, r3, #1
		/* Set warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHMAINVOLTAGE, WARN_OFF);
		/* Store log into Epprom */
	}
	/* Low Main Voltage (SNMP_SYT_013) */
	if((GstSystemStatus.mbData.usCurrentMainVoltage < GstSystemSetting.usLowMainVoltage) &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x7a>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE, WARN_ON);
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ac:	4a64      	ldr	r2, [pc, #400]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021ae:	6053      	str	r3, [r2, #4]
 80021b0:	e012      	b.n	80021d8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xa0>
		/* Set log */
	}
	else if ((GstSystemStatus.mbData.usCurrentMainVoltage > GstSystemSetting.usLowMainVoltage) &&
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	4b61      	ldr	r3, [pc, #388]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 80021b8:	895b      	ldrh	r3, [r3, #10]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d90c      	bls.n	80021d8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xa0>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE) == WARN_ON))
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0b1b      	lsrs	r3, r3, #12
 80021c4:	f003 0301 	and.w	r3, r3, #1
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE, WARN_ON);
		/* Set log */
	}
	else if ((GstSystemStatus.mbData.usCurrentMainVoltage > GstSystemSetting.usLowMainVoltage) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xa0>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE, WARN_OFF);
 80021cc:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021d4:	4a5a      	ldr	r2, [pc, #360]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021d6:	6053      	str	r3, [r2, #4]
		/* Set Log */
	}

	/* Low Fuel (SNMP_SYT_015) */
	if((GstSystemStatus.mbData.usCurrentGenFuel < GstSystemSetting.usGenFuelLowValue) &&
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 80021da:	885a      	ldrh	r2, [r3, #2]
 80021dc:	4b57      	ldr	r3, [pc, #348]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 80021de:	89db      	ldrh	r3, [r3, #14]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d20d      	bcs.n	8002200 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xc8>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_OFF))
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0b9b      	lsrs	r3, r3, #14
 80021ea:	f003 0301 	and.w	r3, r3, #1
		WriteBit(GstSystemWarning.othWarn, WARN_LOWMAINVOLTAGE, WARN_OFF);
		/* Set Log */
	}

	/* Low Fuel (SNMP_SYT_015) */
	if((GstSystemStatus.mbData.usCurrentGenFuel < GstSystemSetting.usGenFuelLowValue) &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xc8>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWFUEL, WARN_ON);
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fa:	4a51      	ldr	r2, [pc, #324]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80021fc:	6053      	str	r3, [r2, #4]
 80021fe:	e012      	b.n	8002226 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xee>
		/* Set Log */
	}
	else if ((GstSystemStatus.mbData.usCurrentGenFuel > GstSystemSetting.usGenFuelLowValue) &&
 8002200:	4b4d      	ldr	r3, [pc, #308]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002202:	885a      	ldrh	r2, [r3, #2]
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 8002206:	89db      	ldrh	r3, [r3, #14]
 8002208:	429a      	cmp	r2, r3
 800220a:	d90c      	bls.n	8002226 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xee>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON))
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0b9b      	lsrs	r3, r3, #14
 8002212:	f003 0301 	and.w	r3, r3, #1
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWFUEL, WARN_ON);
		/* Set Log */
	}
	else if ((GstSystemStatus.mbData.usCurrentGenFuel > GstSystemSetting.usGenFuelLowValue) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0xee>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWFUEL, WARN_OFF);
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002222:	4a47      	ldr	r2, [pc, #284]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002224:	6053      	str	r3, [r2, #4]
		/* Set Log */
	}
	/* Low Oil Pressure (SNMP_SYT_016) */
	if((GstSystemStatus.mbData.usCurrentGenOilPressure < GstSystemSetting.usGenOilPressureAlarmValue) &&
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002228:	899a      	ldrh	r2, [r3, #12]
 800222a:	4b44      	ldr	r3, [pc, #272]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 800222c:	8b1b      	ldrh	r3, [r3, #24]
 800222e:	429a      	cmp	r2, r3
 8002230:	d20d      	bcs.n	800224e <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x116>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS) == WARN_OFF))
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0bdb      	lsrs	r3, r3, #15
 8002238:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWFUEL, WARN_OFF);
		/* Set Log */
	}
	/* Low Oil Pressure (SNMP_SYT_016) */
	if((GstSystemStatus.mbData.usCurrentGenOilPressure < GstSystemSetting.usGenOilPressureAlarmValue) &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x116>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS, WARN_ON);
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002248:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800224a:	6053      	str	r3, [r2, #4]
 800224c:	e012      	b.n	8002274 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x13c>
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenOilPressure > GstSystemSetting.usGenOilPressureAlarmValue) &&
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002250:	899a      	ldrh	r2, [r3, #12]
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 8002254:	8b1b      	ldrh	r3, [r3, #24]
 8002256:	429a      	cmp	r2, r3
 8002258:	d90c      	bls.n	8002274 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x13c>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS) == WARN_ON))
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0bdb      	lsrs	r3, r3, #15
 8002260:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS, WARN_ON);
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenOilPressure > GstSystemSetting.usGenOilPressureAlarmValue) &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x13c>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWOILPRESS, WARN_OFF);
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002270:	4a33      	ldr	r2, [pc, #204]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002272:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}

	/* Low Generate Voltage (SNMP_SYT_017) */
	if((GstSystemStatus.mbData.usCurrentGenVoltage < GstSystemSetting.usGenVoltageAlarmValue) &&
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002276:	889a      	ldrh	r2, [r3, #4]
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 800227a:	8a1b      	ldrh	r3, [r3, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d20d      	bcs.n	800229c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x164>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE) == WARN_OFF))
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */

	}

	/* Low Generate Voltage (SNMP_SYT_017) */
	if((GstSystemStatus.mbData.usCurrentGenVoltage < GstSystemSetting.usGenVoltageAlarmValue) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x164>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE, WARN_ON);
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002298:	6053      	str	r3, [r2, #4]
 800229a:	e012      	b.n	80022c2 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x18a>
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenVoltage > GstSystemSetting.usGenVoltageAlarmValue) &&
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 800229e:	889a      	ldrh	r2, [r3, #4]
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 80022a2:	8a1b      	ldrh	r3, [r3, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d90c      	bls.n	80022c2 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x18a>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE) == WARN_ON))
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE, WARN_ON);
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenVoltage > GstSystemSetting.usGenVoltageAlarmValue) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x18a>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENVOLTAGE, WARN_OFF);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	4a20      	ldr	r2, [pc, #128]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022c0:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}

	/* Low Generate Battery (SNMP_SYT_018) */
	if((GstSystemStatus.mbData.usCurrentGenBatteryVoltage < GstSystemSetting.usGenBatteryVoltageAlarmValue) &&
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 80022c4:	88da      	ldrh	r2, [r3, #6]
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 80022c8:	8a5b      	ldrh	r3, [r3, #18]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20d      	bcs.n	80022ea <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x1b2>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENBAT) == WARN_OFF))
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0c5b      	lsrs	r3, r3, #17
 80022d4:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */

	}

	/* Low Generate Battery (SNMP_SYT_018) */
	if((GstSystemStatus.mbData.usCurrentGenBatteryVoltage < GstSystemSetting.usGenBatteryVoltageAlarmValue) &&
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x1b2>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENBAT) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENBAT, WARN_ON);
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022e6:	6053      	str	r3, [r2, #4]
 80022e8:	e012      	b.n	8002310 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x1d8>
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenBatteryVoltage > GstSystemSetting.usGenBatteryVoltageAlarmValue) &&
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 80022ec:	88da      	ldrh	r2, [r3, #6]
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 80022f0:	8a5b      	ldrh	r3, [r3, #18]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x1d8>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENBAT) == WARN_ON))
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENBAT, WARN_ON);
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenBatteryVoltage > GstSystemSetting.usGenBatteryVoltageAlarmValue) &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x1d8>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWGENBAT) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWGENBAT, WARN_OFF);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800230e:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}

	/* Low Engine Speed (SNMP_SYT_019) */
	if((GstSystemStatus.mbData.usCurrentGenEngineSpeed < GstSystemSetting.usGenEngineSpeedAlarmValue) &&
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x200>)
 8002312:	895a      	ldrh	r2, [r3, #10]
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x204>)
 8002316:	8adb      	ldrh	r3, [r3, #22]
 8002318:	429a      	cmp	r2, r3
 800231a:	d213      	bcs.n	8002344 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x20c>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWENSPEED) == WARN_OFF))
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */

	}

	/* Low Engine Speed (SNMP_SYT_019) */
	if((GstSystemStatus.mbData.usCurrentGenEngineSpeed < GstSystemSetting.usGenEngineSpeedAlarmValue) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x20c>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWENSPEED) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWENSPEED, WARN_ON);
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	4a03      	ldr	r2, [pc, #12]	; (8002340 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x208>)
 8002334:	6053      	str	r3, [r2, #4]
 8002336:	e018      	b.n	800236a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x232>
 8002338:	20002558 	.word	0x20002558
 800233c:	2000250c 	.word	0x2000250c
 8002340:	20002550 	.word	0x20002550
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenEngineSpeed > GstSystemSetting.usGenEngineSpeedAlarmValue) &&
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x288>)
 8002346:	895a      	ldrh	r2, [r3, #10]
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x28c>)
 800234a:	8adb      	ldrh	r3, [r3, #22]
 800234c:	429a      	cmp	r2, r3
 800234e:	d90c      	bls.n	800236a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x232>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWENSPEED) == WARN_ON))
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWENSPEED, WARN_ON);
		/* Set Log */

	}
	else if((GstSystemStatus.mbData.usCurrentGenEngineSpeed > GstSystemSetting.usGenEngineSpeedAlarmValue) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x232>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWENSPEED) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWENSPEED, WARN_OFF);
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 8002368:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}

	/* Low Coolant Temperature (SNMP_SYT_020) */
	if((GstSystemStatus.mbData.usCurrentGenCoolantTemp < GstSystemSetting.usGenCoolantTempAlarmValue) &&
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x288>)
 800236c:	891a      	ldrh	r2, [r3, #8]
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x28c>)
 8002370:	8a9b      	ldrh	r3, [r3, #20]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x258>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP) == WARN_OFF))
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0cdb      	lsrs	r3, r3, #19
 800237c:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */

	}

	/* Low Coolant Temperature (SNMP_SYT_020) */
	if((GstSystemStatus.mbData.usCurrentGenCoolantTemp < GstSystemSetting.usGenCoolantTempAlarmValue) &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x258>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP, WARN_ON);
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 800238e:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}
	if((GstSystemStatus.mbData.usCurrentGenCoolantTemp > GstSystemSetting.usGenCoolantTempAlarmValue) &&
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x288>)
 8002392:	891a      	ldrh	r2, [r3, #8]
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x28c>)
 8002396:	8a9b      	ldrh	r3, [r3, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	d90c      	bls.n	80023b6 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x27e>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP) == WARN_ON))
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0cdb      	lsrs	r3, r3, #19
 80023a2:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP, WARN_ON);
		/* Set Log */

	}
	if((GstSystemStatus.mbData.usCurrentGenCoolantTemp > GstSystemSetting.usGenCoolantTempAlarmValue) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x27e>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWCOOLTEMP, WARN_OFF);
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <ADCT_SYSTEM_FPT_CheckState_MODBUS+0x290>)
 80023b4:	6053      	str	r3, [r2, #4]
		/* Set Log */

	}
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20002558 	.word	0x20002558
 80023c4:	2000250c 	.word	0x2000250c
 80023c8:	20002550 	.word	0x20002550

080023cc <ADCT_SYSTEM_FPT_CheckState_IO>:
 * @brief Check system state of I/O.
 * @param None
 * @retval None
 */
void ADCT_SYSTEM_FPT_CheckState_IO(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	/* Fire (SNMP_SYT_007) */
	if(GstSystemStatus.ioData.ucFire == (ReadBit(GstSystemWarning.othWarn, WARN_FIRE)))
 80023d0:	4b8e      	ldr	r3, [pc, #568]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80023d2:	7f9b      	ldrb	r3, [r3, #30]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b8e      	ldr	r3, [pc, #568]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d123      	bne.n	800242c <ADCT_SYSTEM_FPT_CheckState_IO+0x60>
	{
		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_FIRE, !GstSystemStatus.ioData.ucFire);
 80023e4:	4b89      	ldr	r3, [pc, #548]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80023e6:	7f9b      	ldrb	r3, [r3, #30]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <ADCT_SYSTEM_FPT_CheckState_IO+0x2e>
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f4:	4a86      	ldr	r2, [pc, #536]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80023f6:	6053      	str	r3, [r2, #4]
 80023f8:	e005      	b.n	8002406 <ADCT_SYSTEM_FPT_CheckState_IO+0x3a>
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002402:	4a83      	ldr	r2, [pc, #524]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002404:	6053      	str	r3, [r2, #4]
		if(!GstSystemStatus.ioData.ucFire)
 8002406:	4b81      	ldr	r3, [pc, #516]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002408:	7f9b      	ldrb	r3, [r3, #30]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <ADCT_SYSTEM_FPT_CheckState_IO+0x5a>
		{
			GstSystemWarning.State = MAINSTATE_ALARM;
 800240e:	4b80      	ldr	r3, [pc, #512]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002410:	2206      	movs	r2, #6
 8002412:	701a      	strb	r2, [r3, #0]
			/* Set Log */
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
 8002414:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <ADCT_SYSTEM_FPT_CheckState_IO+0x248>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 800241c:	731a      	strb	r2, [r3, #12]
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
 800241e:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 8002420:	2201      	movs	r2, #1
 8002422:	72da      	strb	r2, [r3, #11]
 8002424:	e002      	b.n	800242c <ADCT_SYSTEM_FPT_CheckState_IO+0x60>
		}
		else
		{
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 8002426:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Smoke (SNMP_SYT_008) */
	if(GstSystemStatus.ioData.ucSmoke == (ReadBit(GstSystemWarning.othWarn, WARN_SMOKE)))
 800242c:	4b77      	ldr	r3, [pc, #476]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 800242e:	7fdb      	ldrb	r3, [r3, #31]
 8002430:	461a      	mov	r2, r3
 8002432:	4b77      	ldr	r3, [pc, #476]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	09db      	lsrs	r3, r3, #7
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	429a      	cmp	r2, r3
 800243e:	d123      	bne.n	8002488 <ADCT_SYSTEM_FPT_CheckState_IO+0xbc>
	{
		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_SMOKE, !GstSystemStatus.ioData.ucSmoke);
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002442:	7fdb      	ldrb	r3, [r3, #31]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <ADCT_SYSTEM_FPT_CheckState_IO+0x8a>
 8002448:	4b71      	ldr	r3, [pc, #452]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002450:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002452:	6053      	str	r3, [r2, #4]
 8002454:	e005      	b.n	8002462 <ADCT_SYSTEM_FPT_CheckState_IO+0x96>
 8002456:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002460:	6053      	str	r3, [r2, #4]
		if(!GstSystemStatus.ioData.ucSmoke)
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002464:	7fdb      	ldrb	r3, [r3, #31]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10b      	bne.n	8002482 <ADCT_SYSTEM_FPT_CheckState_IO+0xb6>
		{
			GstSystemWarning.State = MAINSTATE_ALARM;
 800246a:	4b69      	ldr	r3, [pc, #420]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800246c:	2206      	movs	r2, #6
 800246e:	701a      	strb	r2, [r3, #0]
			/* Set Log */
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <ADCT_SYSTEM_FPT_CheckState_IO+0x248>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 8002478:	731a      	strb	r2, [r3, #12]
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
 800247a:	4b67      	ldr	r3, [pc, #412]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 800247c:	2201      	movs	r2, #1
 800247e:	72da      	strb	r2, [r3, #11]
 8002480:	e002      	b.n	8002488 <ADCT_SYSTEM_FPT_CheckState_IO+0xbc>
		}
		else
		{
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
 8002488:	4b60      	ldr	r3, [pc, #384]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 800248a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800248e:	2b00      	cmp	r3, #0
 8002490:	d113      	bne.n	80024ba <ADCT_SYSTEM_FPT_CheckState_IO+0xee>
			GstSystemStatus.ioData.ucDoor[1] ||
 8002492:	4b5e      	ldr	r3, [pc, #376]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002494:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
		}
	}
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10e      	bne.n	80024ba <ADCT_SYSTEM_FPT_CheckState_IO+0xee>
			GstSystemStatus.ioData.ucDoor[1] ||
			GstSystemStatus.ioData.ucDoor[2] ||
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 800249e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
			GstSystemWarning.State = MAINSTATE_IDLE;
		}
	}
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
			GstSystemStatus.ioData.ucDoor[1] ||
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <ADCT_SYSTEM_FPT_CheckState_IO+0xee>
			GstSystemStatus.ioData.ucDoor[2] ||
			GstSystemStatus.ioData.ucDoor[3] ||
 80024a6:	4b59      	ldr	r3, [pc, #356]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80024a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		}
	}
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
			GstSystemStatus.ioData.ucDoor[1] ||
			GstSystemStatus.ioData.ucDoor[2] ||
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <ADCT_SYSTEM_FPT_CheckState_IO+0xee>
			GstSystemStatus.ioData.ucDoor[3] ||
			GstSystemStatus.ioData.ucDoor[4]) &&
 80024b0:	4b56      	ldr	r3, [pc, #344]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80024b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	}
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
			GstSystemStatus.ioData.ucDoor[1] ||
			GstSystemStatus.ioData.ucDoor[2] ||
			GstSystemStatus.ioData.ucDoor[3] ||
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <ADCT_SYSTEM_FPT_CheckState_IO+0x120>
			GstSystemStatus.ioData.ucDoor[4]) &&
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_OFF))
 80024ba:	4b55      	ldr	r3, [pc, #340]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 0301 	and.w	r3, r3, #1
	/* Door (SNMP_SYT_009) */
	if((GstSystemStatus.ioData.ucDoor[0] ||
			GstSystemStatus.ioData.ucDoor[1] ||
			GstSystemStatus.ioData.ucDoor[2] ||
			GstSystemStatus.ioData.ucDoor[3] ||
			GstSystemStatus.ioData.ucDoor[4]) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <ADCT_SYSTEM_FPT_CheckState_IO+0x120>
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_OFF))
	{
		GstSystemWarning.State = MAINSTATE_ALARM;
 80024c8:	4b51      	ldr	r3, [pc, #324]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80024ca:	2206      	movs	r2, #6
 80024cc:	701a      	strb	r2, [r3, #0]
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_DOOR, WARN_ON);
 80024ce:	4b50      	ldr	r3, [pc, #320]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80024d8:	6053      	str	r3, [r2, #4]
		/* Set Log */
		g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <ADCT_SYSTEM_FPT_CheckState_IO+0x248>)
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 80024e2:	731a      	strb	r2, [r3, #12]
		g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	72da      	strb	r2, [r3, #11]
 80024ea:	e028      	b.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
 80024ec:	4b47      	ldr	r3, [pc, #284]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80024ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d123      	bne.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80024f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		WriteBit(GstSystemWarning.othWarn, WARN_DOOR, WARN_ON);
		/* Set Log */
		g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
		g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11e      	bne.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
			GstSystemStatus.ioData.ucDoor[2] == 0 &&
 8002500:	4b42      	ldr	r3, [pc, #264]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002502:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		/* Set Log */
		g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
		g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			GstSystemStatus.ioData.ucDoor[2] == 0 &&
			GstSystemStatus.ioData.ucDoor[3] == 0 &&
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
		g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
			GstSystemStatus.ioData.ucDoor[2] == 0 &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d114      	bne.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			GstSystemStatus.ioData.ucDoor[3] == 0 &&
			GstSystemStatus.ioData.ucDoor[4] == 0) &&
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
			GstSystemStatus.ioData.ucDoor[2] == 0 &&
			GstSystemStatus.ioData.ucDoor[3] == 0 &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			GstSystemStatus.ioData.ucDoor[4] == 0) &&
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON))
 800251e:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 0301 	and.w	r3, r3, #1
	}
	else if((GstSystemStatus.ioData.ucDoor[0] == 0 &&
			GstSystemStatus.ioData.ucDoor[1] == 0 &&
			GstSystemStatus.ioData.ucDoor[2] == 0 &&
			GstSystemStatus.ioData.ucDoor[3] == 0 &&
			GstSystemStatus.ioData.ucDoor[4] == 0) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <ADCT_SYSTEM_FPT_CheckState_IO+0x172>
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON))
	{
		/* Set Warning OFF */
		WriteBit(GstSystemWarning.othWarn, WARN_DOOR, WARN_OFF);
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002534:	4a36      	ldr	r2, [pc, #216]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002536:	6053      	str	r3, [r2, #4]
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_IDLE;
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
	}
	/* Burglar (SNMP_SYT_010) */
	if(GstSystemStatus.ioData.ucBurglar != (ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR)))
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002540:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002544:	461a      	mov	r2, r3
 8002546:	4b32      	ldr	r3, [pc, #200]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0a5b      	lsrs	r3, r3, #9
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	429a      	cmp	r2, r3
 8002552:	d025      	beq.n	80025a0 <ADCT_SYSTEM_FPT_CheckState_IO+0x1d4>
	{

		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_BURGLAR, GstSystemStatus.ioData.ucBurglar);
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 8002556:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <ADCT_SYSTEM_FPT_CheckState_IO+0x1a0>
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002566:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002568:	6053      	str	r3, [r2, #4]
 800256a:	e005      	b.n	8002578 <ADCT_SYSTEM_FPT_CheckState_IO+0x1ac>
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002576:	6053      	str	r3, [r2, #4]
		if(GstSystemStatus.ioData.ucBurglar)
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 800257a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <ADCT_SYSTEM_FPT_CheckState_IO+0x1ce>
		{
			GstSystemWarning.State = MAINSTATE_ALARM;
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 8002584:	2206      	movs	r2, #6
 8002586:	701a      	strb	r2, [r3, #0]
			/* Set Log */
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <ADCT_SYSTEM_FPT_CheckState_IO+0x248>)
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 8002590:	731a      	strb	r2, [r3, #12]
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 8002594:	2201      	movs	r2, #1
 8002596:	72da      	strb	r2, [r3, #11]
 8002598:	e002      	b.n	80025a0 <ADCT_SYSTEM_FPT_CheckState_IO+0x1d4>
		}
		else
		{
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Water (SNMP_SYT_011) */
	if(GstSystemStatus.ioData.ucWater != (ReadBit(GstSystemWarning.othWarn, WARN_WATER)))
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80025a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0a9b      	lsrs	r3, r3, #10
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d025      	beq.n	8002602 <ADCT_SYSTEM_FPT_CheckState_IO+0x236>
	{

		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_WATER, GstSystemStatus.ioData.ucWater);
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <ADCT_SYSTEM_FPT_CheckState_IO+0x202>
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c8:	4a11      	ldr	r2, [pc, #68]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025ca:	6053      	str	r3, [r2, #4]
 80025cc:	e005      	b.n	80025da <ADCT_SYSTEM_FPT_CheckState_IO+0x20e>
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025d8:	6053      	str	r3, [r2, #4]
		if(GstSystemStatus.ioData.ucWater)
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <ADCT_SYSTEM_FPT_CheckState_IO+0x240>)
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <ADCT_SYSTEM_FPT_CheckState_IO+0x230>
		{
			GstSystemWarning.State = MAINSTATE_ALARM;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025e6:	2206      	movs	r2, #6
 80025e8:	701a      	strb	r2, [r3, #0]
			/* Set Log */
			g_ADCT_BGS_StateOutput.ALARM_RUNNING_Timer_Cnt = GstSystemSetting.ulAlarmDuration;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <ADCT_SYSTEM_FPT_CheckState_IO+0x248>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 80025f2:	731a      	strb	r2, [r3, #12]
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <ADCT_SYSTEM_FPT_CheckState_IO+0x24c>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	72da      	strb	r2, [r3, #11]
		{
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
		}
	}
}
 80025fa:	e002      	b.n	8002602 <ADCT_SYSTEM_FPT_CheckState_IO+0x236>
			g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag = ADCT_TRUE;
		}
		else
		{
			/* Set Log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <ADCT_SYSTEM_FPT_CheckState_IO+0x244>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20002558 	.word	0x20002558
 8002610:	20002550 	.word	0x20002550
 8002614:	2000250c 	.word	0x2000250c
 8002618:	200024fc 	.word	0x200024fc

0800261c <ADCT_SYSTEM_FPT_CheckState_DHT>:
 * @brief Check system state of DHT22.
 * @param None
 * @retval None
 */
void ADCT_SYSTEM_FPT_CheckState_DHT(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
	/* Low Humidity (SNMP_SYT_005) */
	if((GstSystemStatus.dhtData.usHumid_Main < GstSystemSetting.usLowHumidityH1) &&
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 8002622:	8b1a      	ldrh	r2, [r3, #24]
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002626:	88db      	ldrh	r3, [r3, #6]
 8002628:	429a      	cmp	r2, r3
 800262a:	d210      	bcs.n	800264e <ADCT_SYSTEM_FPT_CheckState_DHT+0x32>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_OFF))
 800262c:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0301 	and.w	r3, r3, #1
 * @retval None
 */
void ADCT_SYSTEM_FPT_CheckState_DHT(void)
{
	/* Low Humidity (SNMP_SYT_005) */
	if((GstSystemStatus.dhtData.usHumid_Main < GstSystemSetting.usLowHumidityH1) &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <ADCT_SYSTEM_FPT_CheckState_DHT+0x32>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWHUMID, WARN_ON);
 800263a:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f043 0310 	orr.w	r3, r3, #16
 8002642:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002644:	6053      	str	r3, [r2, #4]
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_ALARM;
 8002646:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002648:	2206      	movs	r2, #6
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e0c3      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
	}
	else if((GstSystemStatus.dhtData.usHumid_Main > GstSystemSetting.usLowHumidityH1) &&
 800264e:	4b64      	ldr	r3, [pc, #400]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 8002650:	8b1a      	ldrh	r2, [r3, #24]
 8002652:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002654:	88db      	ldrh	r3, [r3, #6]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <ADCT_SYSTEM_FPT_CheckState_DHT+0x60>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON))
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWHUMID, WARN_ON);
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_ALARM;
	}
	else if((GstSystemStatus.dhtData.usHumid_Main > GstSystemSetting.usLowHumidityH1) &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <ADCT_SYSTEM_FPT_CheckState_DHT+0x60>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON))
	{
		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWHUMID, WARN_OFF);
 8002668:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 0310 	bic.w	r3, r3, #16
 8002670:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002672:	6053      	str	r3, [r2, #4]
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_IDLE;
 8002674:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e0ac      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
	}

	/* High Humidity (SNMP_SYT_006) */
	else if((GstSystemStatus.dhtData.usHumid_Main > GstSystemSetting.usHighHumidityH2) &&
 800267c:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 800267e:	8b1a      	ldrh	r2, [r3, #24]
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002682:	891b      	ldrh	r3, [r3, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	d910      	bls.n	80026aa <ADCT_SYSTEM_FPT_CheckState_DHT+0x8e>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_OFF))
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_IDLE;
	}

	/* High Humidity (SNMP_SYT_006) */
	else if((GstSystemStatus.dhtData.usHumid_Main > GstSystemSetting.usHighHumidityH2) &&
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <ADCT_SYSTEM_FPT_CheckState_DHT+0x8e>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHHUMID, WARN_ON);
 8002696:	4b54      	ldr	r3, [pc, #336]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f043 0320 	orr.w	r3, r3, #32
 800269e:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026a0:	6053      	str	r3, [r2, #4]
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_ALARM;
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026a4:	2206      	movs	r2, #6
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e095      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
	}
	else if((GstSystemStatus.dhtData.usHumid_Main < GstSystemSetting.usHighHumidityH2) &&
 80026aa:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 80026ac:	8b1a      	ldrh	r2, [r3, #24]
 80026ae:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 80026b0:	891b      	ldrh	r3, [r3, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <ADCT_SYSTEM_FPT_CheckState_DHT+0xbc>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON))
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	f003 0301 	and.w	r3, r3, #1
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHHUMID, WARN_ON);
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_ALARM;
	}
	else if((GstSystemStatus.dhtData.usHumid_Main < GstSystemSetting.usHighHumidityH2) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <ADCT_SYSTEM_FPT_CheckState_DHT+0xbc>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON))
	{
		/* Set Warning */
		WriteBit(GstSystemWarning.othWarn, WARN_HIGHHUMID, WARN_OFF);
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 0320 	bic.w	r3, r3, #32
 80026cc:	4a46      	ldr	r2, [pc, #280]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026ce:	6053      	str	r3, [r2, #4]
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_IDLE;
 80026d0:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e07e      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
	}

	/* Low Temperature (SNMP_SYT_002) */
	else if((GstSystemStatus.dhtData.usTemp_Main < GstSystemSetting.usLowTemperatureT1)&&
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 80026da:	8ada      	ldrh	r2, [r3, #22]
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d210      	bcs.n	8002706 <ADCT_SYSTEM_FPT_CheckState_DHT+0xea>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_OFF))
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	f003 0301 	and.w	r3, r3, #1
		/* Set Log */
		GstSystemWarning.State = MAINSTATE_IDLE;
	}

	/* Low Temperature (SNMP_SYT_002) */
	else if((GstSystemStatus.dhtData.usTemp_Main < GstSystemSetting.usLowTemperatureT1)&&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <ADCT_SYSTEM_FPT_CheckState_DHT+0xea>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_OFF))
	{
		/* Set Warning ON */
		WriteBit(GstSystemWarning.othWarn, WARN_LOWTEMP, WARN_ON);
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80026fc:	6053      	str	r3, [r2, #4]
		/* Set next state is LOW */
		GstSystemWarning.State = MAINSTATE_ALARM;
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002700:	2206      	movs	r2, #6
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e067      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
		/* Set Log */
		//ADCT_SDCARD_FPT_SetAlarmID(ALARM_LOW_TEMP_START);
	}
	else if((GstSystemStatus.dhtData.usTemp_Main >= GstSystemSetting.usLowTemperatureT1) &&
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 8002708:	8ada      	ldrh	r2, [r3, #22]
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d326      	bcc.n	8002760 <ADCT_SYSTEM_FPT_CheckState_DHT+0x144>
			(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usHighTemperatureT2))
 8002712:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 8002714:	8ada      	ldrh	r2, [r3, #22]
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002718:	885b      	ldrh	r3, [r3, #2]
		/* Set next state is LOW */
		GstSystemWarning.State = MAINSTATE_ALARM;
		/* Set Log */
		//ADCT_SDCARD_FPT_SetAlarmID(ALARM_LOW_TEMP_START);
	}
	else if((GstSystemStatus.dhtData.usTemp_Main >= GstSystemSetting.usLowTemperatureT1) &&
 800271a:	429a      	cmp	r2, r3
 800271c:	d820      	bhi.n	8002760 <ADCT_SYSTEM_FPT_CheckState_DHT+0x144>
			(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usHighTemperatureT2))
	{
		/* Set next state is NORMAL */
		if(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_ON)
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <ADCT_SYSTEM_FPT_CheckState_DHT+0x122>
		{
			WriteBit(GstSystemWarning.othWarn, WARN_LOWTEMP, WARN_OFF);
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002736:	6053      	str	r3, [r2, #4]
			/* Set log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
		}
		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d044      	beq.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
		{

			WriteBit(GstSystemWarning.othWarn, WARN_HIGHTEMP, WARN_OFF);
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002756:	6053      	str	r3, [r2, #4]
			/* Set log */
			GstSystemWarning.State = MAINSTATE_IDLE;
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
		{
			WriteBit(GstSystemWarning.othWarn, WARN_LOWTEMP, WARN_OFF);
			/* Set log */
			GstSystemWarning.State = MAINSTATE_IDLE;
		}
		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)
 800275e:	e03a      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
		}

	}

	/* High Temperature (SNMP_SYT_003) */
	else if((GstSystemStatus.dhtData.usTemp_Main > GstSystemSetting.usHighTemperatureT2) &&
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 8002762:	8ada      	ldrh	r2, [r3, #22]
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002766:	885b      	ldrh	r3, [r3, #2]
 8002768:	429a      	cmp	r2, r3
 800276a:	d923      	bls.n	80027b4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x198>
			(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usFanTemperatureT3))
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c4>)
 800276e:	8ada      	ldrh	r2, [r3, #22]
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1c8>)
 8002772:	889b      	ldrh	r3, [r3, #4]
		}

	}

	/* High Temperature (SNMP_SYT_003) */
	else if((GstSystemStatus.dhtData.usTemp_Main > GstSystemSetting.usHighTemperatureT2) &&
 8002774:	429a      	cmp	r2, r3
 8002776:	d81d      	bhi.n	80027b4 <ADCT_SYSTEM_FPT_CheckState_DHT+0x198>
			(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usFanTemperatureT3))
	{
		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_OFF)
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <ADCT_SYSTEM_FPT_CheckState_DHT+0x17c>
		{
			WriteBit(GstSystemWarning.othWarn, WARN_HIGHTEMP, WARN_ON);
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002790:	6053      	str	r3, [r2, #4]
			/*Setlog*/
			GstSystemWarning.State = MAINSTATE_ALARM;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 8002794:	2206      	movs	r2, #6
 8002796:	701a      	strb	r2, [r3, #0]
		}
		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP) == WARN_ON)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d017      	beq.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
		{
			WriteBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP, WARN_OFF);
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 0308 	bic.w	r3, r3, #8
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027b0:	6053      	str	r3, [r2, #4]
		{
			WriteBit(GstSystemWarning.othWarn, WARN_HIGHTEMP, WARN_ON);
			/*Setlog*/
			GstSystemWarning.State = MAINSTATE_ALARM;
		}
		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP) == WARN_ON)
 80027b2:	e010      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
	/* Fan Temperature (SNMP_SYT_004) */
	else
	{
		/* Set next state is FAN */

		if(ReadBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP) == WARN_OFF)
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
		{
			WriteBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP, WARN_ON);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027cc:	6053      	str	r3, [r2, #4]
			/*Set log */
			GstSystemWarning.State = MAINSTATE_ALARM;
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1cc>)
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80027d4:	e7ff      	b.n	80027d6 <ADCT_SYSTEM_FPT_CheckState_DHT+0x1ba>
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20002558 	.word	0x20002558
 80027e4:	2000250c 	.word	0x2000250c
 80027e8:	20002550 	.word	0x20002550

080027ec <ADCT_SystemFPT_CheckAlarm>:

uint8_t ADCT_SystemFPT_CheckAlarm(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	f003 0301 	and.w	r3, r3, #1

}

uint8_t ADCT_SystemFPT_CheckAlarm(void)
{
	if(
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d145      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	09db      	lsrs	r3, r3, #7
 8002804:	f003 0301 	and.w	r3, r3, #1
}

uint8_t ADCT_SystemFPT_CheckAlarm(void)
{
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
 8002808:	2b00      	cmp	r3, #0
 800280a:	d13e      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0301 	and.w	r3, r3, #1

uint8_t ADCT_SystemFPT_CheckAlarm(void)
{
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d137      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a5b      	lsrs	r3, r3, #9
 8002820:	f003 0301 	and.w	r3, r3, #1
uint8_t ADCT_SystemFPT_CheckAlarm(void)
{
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	d130      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0a9b      	lsrs	r3, r3, #10
 800282e:	f003 0301 	and.w	r3, r3, #1
{
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
 8002832:	2b00      	cmp	r3, #0
 8002834:	d129      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 0301 	and.w	r3, r3, #1
	if(
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
 8002840:	2b00      	cmp	r3, #0
 8002842:	d122      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 0301 	and.w	r3, r3, #1
			(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON) || \
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11b      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON)||
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0b9b      	lsrs	r3, r3, #14
 8002858:	f003 0301 	and.w	r3, r3, #1
			(ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)||
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	f003 0301 	and.w	r3, r3, #1
			(ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON) ||
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON)||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_ON)||
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	f003 0301 	and.w	r3, r3, #1
			(ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)||
 8002878:	2b00      	cmp	r3, #0
 800287a:	d106      	bne.n	800288a <ADCT_SystemFPT_CheckAlarm+0x9e>
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP) == WARN_ON)
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <ADCT_SystemFPT_CheckAlarm+0xac>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f003 0301 	and.w	r3, r3, #1
			(ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWHUMID) == WARN_ON )||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHHUMID) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWFUEL) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHTEMP) == WARN_ON)||
			(ReadBit(GstSystemWarning.othWarn, WARN_LOWTEMP) == WARN_ON)||
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <ADCT_SystemFPT_CheckAlarm+0xa2>
			(ReadBit(GstSystemWarning.othWarn, WARN_HIGHFANTEMP) == WARN_ON)
	)
	{
		return TRUE;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <ADCT_SystemFPT_CheckAlarm+0xa4>
	}
	else
	{
		return FALSE;
 800288e:	2300      	movs	r3, #0
	}
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20002550 	.word	0x20002550

0800289c <ADCT_SystemFPT_CheckAlarm_Siren>:
uint8_t ADCT_SystemFPT_CheckAlarm_Siren(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||\
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <ADCT_SystemFPT_CheckAlarm_Siren+0x58>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11b      	bne.n	80028e6 <ADCT_SystemFPT_CheckAlarm_Siren+0x4a>
			ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON||
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <ADCT_SystemFPT_CheckAlarm_Siren+0x58>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	09db      	lsrs	r3, r3, #7
 80028b4:	f003 0301 	and.w	r3, r3, #1
		return FALSE;
	}
}
uint8_t ADCT_SystemFPT_CheckAlarm_Siren(void)
{
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||\
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <ADCT_SystemFPT_CheckAlarm_Siren+0x4a>
			ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON||
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <ADCT_SystemFPT_CheckAlarm_Siren+0x58>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0301 	and.w	r3, r3, #1
	}
}
uint8_t ADCT_SystemFPT_CheckAlarm_Siren(void)
{
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||\
			ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <ADCT_SystemFPT_CheckAlarm_Siren+0x4a>
			ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON||
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <ADCT_SystemFPT_CheckAlarm_Siren+0x58>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0a5b      	lsrs	r3, r3, #9
 80028d0:	f003 0301 	and.w	r3, r3, #1
}
uint8_t ADCT_SystemFPT_CheckAlarm_Siren(void)
{
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||\
			ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON||
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <ADCT_SystemFPT_CheckAlarm_Siren+0x4a>
			ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <ADCT_SystemFPT_CheckAlarm_Siren+0x58>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	0a9b      	lsrs	r3, r3, #10
 80028de:	f003 0301 	and.w	r3, r3, #1
uint8_t ADCT_SystemFPT_CheckAlarm_Siren(void)
{
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||\
			ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON||
			ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <ADCT_SystemFPT_CheckAlarm_Siren+0x4e>
			ReadBit(GstSystemWarning.othWarn, WARN_WATER) == WARN_ON
	)	{
		return TRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <ADCT_SystemFPT_CheckAlarm_Siren+0x50>
	}
	else
	{

		return FALSE;
 80028ea:	2300      	movs	r3, #0
	}
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20002550 	.word	0x20002550

080028f8 <ADCT_SystemFPT_RunOutput>:
void ADCT_SystemFPT_RunOutput(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
	if(ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON||ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == WARN_ON)
 80028fe:	4b97      	ldr	r3, [pc, #604]	; (8002b5c <ADCT_SystemFPT_RunOutput+0x264>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <ADCT_SystemFPT_RunOutput+0x22>
 800290c:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <ADCT_SystemFPT_RunOutput+0x264>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	09db      	lsrs	r3, r3, #7
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02c      	beq.n	8002974 <ADCT_SystemFPT_RunOutput+0x7c>
	{
		/* Off all AIR and FAN */
		ADCT_BGS_AIR_1_2_OFF();
 800291a:	2120      	movs	r1, #32
 800291c:	4890      	ldr	r0, [pc, #576]	; (8002b60 <ADCT_SystemFPT_RunOutput+0x268>)
 800291e:	f005 fbcf 	bl	80080c0 <GPIO_SetBits>
 8002922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002926:	488f      	ldr	r0, [pc, #572]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002928:	f005 fbca 	bl	80080c0 <GPIO_SetBits>
		ADCT_BGS_AIR_3_4_OFF();
 800292c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002930:	488c      	ldr	r0, [pc, #560]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002932:	f005 fbc5 	bl	80080c0 <GPIO_SetBits>
 8002936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293a:	488a      	ldr	r0, [pc, #552]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 800293c:	f005 fbc0 	bl	80080c0 <GPIO_SetBits>
		g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = ADCT_FALSE;
 8002940:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
		g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = ADCT_FALSE;
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002948:	2200      	movs	r2, #0
 800294a:	705a      	strb	r2, [r3, #1]
		ADCT_BGS_FAN_OFF();
 800294c:	2104      	movs	r1, #4
 800294e:	4887      	ldr	r0, [pc, #540]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002950:	f005 fbc4 	bl	80080dc <GPIO_ResetBits>
 8002954:	2108      	movs	r1, #8
 8002956:	4885      	ldr	r0, [pc, #532]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002958:	f005 fbc0 	bl	80080dc <GPIO_ResetBits>
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	4881      	ldr	r0, [pc, #516]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002960:	f005 fbbc 	bl	80080dc <GPIO_ResetBits>
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	487f      	ldr	r0, [pc, #508]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002968:	f005 fbb8 	bl	80080dc <GPIO_ResetBits>
		g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = ADCT_FALSE;
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 800296e:	2200      	movs	r2, #0
 8002970:	709a      	strb	r2, [r3, #2]
 8002972:	e387      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
		}
		else
#endif
		{
			/* Low Temperature (SNMP_SYT_002) */
			if(GstSystemStatus.dhtData.usTemp_Main < GstSystemSetting.usLowTemperatureT1)
 8002974:	4b7e      	ldr	r3, [pc, #504]	; (8002b70 <ADCT_SystemFPT_RunOutput+0x278>)
 8002976:	8ada      	ldrh	r2, [r3, #22]
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <ADCT_SystemFPT_RunOutput+0x27c>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d26a      	bcs.n	8002a56 <ADCT_SystemFPT_RunOutput+0x15e>
			{
				// Detect if the t_min_timer is still running, if YES, output remains high
				if((g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == TRUE) && (g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == TRUE))
 8002980:	4b79      	ldr	r3, [pc, #484]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10d      	bne.n	80029a4 <ADCT_SystemFPT_RunOutput+0xac>
 8002988:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d109      	bne.n	80029a4 <ADCT_SystemFPT_RunOutput+0xac>
				{
					ADCT_BGS_AIR_1_2_ON();
 8002990:	2120      	movs	r1, #32
 8002992:	4873      	ldr	r0, [pc, #460]	; (8002b60 <ADCT_SystemFPT_RunOutput+0x268>)
 8002994:	f005 fba2 	bl	80080dc <GPIO_ResetBits>
 8002998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800299c:	4871      	ldr	r0, [pc, #452]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 800299e:	f005 fb9d 	bl	80080dc <GPIO_ResetBits>
 80029a2:	e00b      	b.n	80029bc <ADCT_SystemFPT_RunOutput+0xc4>
				}
				else
				{
					ADCT_BGS_AIR_1_2_OFF();
 80029a4:	2120      	movs	r1, #32
 80029a6:	486e      	ldr	r0, [pc, #440]	; (8002b60 <ADCT_SystemFPT_RunOutput+0x268>)
 80029a8:	f005 fb8a 	bl	80080c0 <GPIO_SetBits>
 80029ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b0:	486c      	ldr	r0, [pc, #432]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 80029b2:	f005 fb85 	bl	80080c0 <GPIO_SetBits>
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = FALSE;
 80029b6:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
				}
				// Detect if the t_min_timer is still running, if YES, output remains high
				if((g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == TRUE) && (g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == TRUE))
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 80029be:	799b      	ldrb	r3, [r3, #6]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10e      	bne.n	80029e2 <ADCT_SystemFPT_RunOutput+0xea>
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10a      	bne.n	80029e2 <ADCT_SystemFPT_RunOutput+0xea>
				{
					ADCT_BGS_AIR_3_4_ON();
 80029cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d0:	4864      	ldr	r0, [pc, #400]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 80029d2:	f005 fb83 	bl	80080dc <GPIO_ResetBits>
 80029d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029da:	4862      	ldr	r0, [pc, #392]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 80029dc:	f005 fb7e 	bl	80080dc <GPIO_ResetBits>
 80029e0:	e00c      	b.n	80029fc <ADCT_SystemFPT_RunOutput+0x104>
				}
				else
				{
					ADCT_BGS_AIR_3_4_OFF();
 80029e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029e6:	485f      	ldr	r0, [pc, #380]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 80029e8:	f005 fb6a 	bl	80080c0 <GPIO_SetBits>
 80029ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f0:	485c      	ldr	r0, [pc, #368]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 80029f2:	f005 fb65 	bl	80080c0 <GPIO_SetBits>
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = FALSE;
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	705a      	strb	r2, [r3, #1]
				}
				// Detect if the t_min_timer is still running, if YES, output remains high
				if((g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE )&&( g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE))
 80029fc:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 80029fe:	79db      	ldrb	r3, [r3, #7]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d114      	bne.n	8002a2e <ADCT_SystemFPT_RunOutput+0x136>
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002a06:	789b      	ldrb	r3, [r3, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <ADCT_SystemFPT_RunOutput+0x136>
				{
					ADCT_BGS_FAN_ON();
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4857      	ldr	r0, [pc, #348]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002a10:	f005 fb56 	bl	80080c0 <GPIO_SetBits>
 8002a14:	2108      	movs	r1, #8
 8002a16:	4855      	ldr	r0, [pc, #340]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002a18:	f005 fb52 	bl	80080c0 <GPIO_SetBits>
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	4851      	ldr	r0, [pc, #324]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002a20:	f005 fb4e 	bl	80080c0 <GPIO_SetBits>
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	484f      	ldr	r0, [pc, #316]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002a28:	f005 fb4a 	bl	80080c0 <GPIO_SetBits>
 8002a2c:	e32a      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
				}
				else
				{
					ADCT_BGS_FAN_OFF();
 8002a2e:	2104      	movs	r1, #4
 8002a30:	484e      	ldr	r0, [pc, #312]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002a32:	f005 fb53 	bl	80080dc <GPIO_ResetBits>
 8002a36:	2108      	movs	r1, #8
 8002a38:	484c      	ldr	r0, [pc, #304]	; (8002b6c <ADCT_SystemFPT_RunOutput+0x274>)
 8002a3a:	f005 fb4f 	bl	80080dc <GPIO_ResetBits>
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	4848      	ldr	r0, [pc, #288]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002a42:	f005 fb4b 	bl	80080dc <GPIO_ResetBits>
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	4846      	ldr	r0, [pc, #280]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002a4a:	f005 fb47 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	709a      	strb	r2, [r3, #2]
 8002a54:	e316      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
				}
			}
			else if ((GstSystemStatus.dhtData.usTemp_Main >= GstSystemSetting.usLowTemperatureT1 ) &&
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <ADCT_SystemFPT_RunOutput+0x278>)
 8002a58:	8ada      	ldrh	r2, [r3, #22]
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <ADCT_SystemFPT_RunOutput+0x27c>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	f0c0 812b 	bcc.w	8002cba <ADCT_SystemFPT_RunOutput+0x3c2>
					(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usHighTemperatureT2))
 8002a64:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <ADCT_SystemFPT_RunOutput+0x278>)
 8002a66:	8ada      	ldrh	r2, [r3, #22]
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <ADCT_SystemFPT_RunOutput+0x27c>)
 8002a6a:	885b      	ldrh	r3, [r3, #2]
				{
					ADCT_BGS_FAN_OFF();
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
				}
			}
			else if ((GstSystemStatus.dhtData.usTemp_Main >= GstSystemSetting.usLowTemperatureT1 ) &&
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f200 8124 	bhi.w	8002cba <ADCT_SystemFPT_RunOutput+0x3c2>
					(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usHighTemperatureT2))
			{
				if(g_ADCT_BGS_StateOutput.WITCH_AIR == TRUE)
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002a74:	7a9b      	ldrb	r3, [r3, #10]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	f040 8084 	bne.w	8002b84 <ADCT_SystemFPT_RunOutput+0x28c>
				{
					// Detect if the t_min_timer is still running, if YES, output remains high
					if(g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == TRUE)
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002a7e:	795b      	ldrb	r3, [r3, #5]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10d      	bne.n	8002aa0 <ADCT_SystemFPT_RunOutput+0x1a8>
 8002a84:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d109      	bne.n	8002aa0 <ADCT_SystemFPT_RunOutput+0x1a8>
					{
						ADCT_BGS_AIR_1_2_ON();
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	4834      	ldr	r0, [pc, #208]	; (8002b60 <ADCT_SystemFPT_RunOutput+0x268>)
 8002a90:	f005 fb24 	bl	80080dc <GPIO_ResetBits>
 8002a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a98:	4832      	ldr	r0, [pc, #200]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002a9a:	f005 fb1f 	bl	80080dc <GPIO_ResetBits>
 8002a9e:	e00b      	b.n	8002ab8 <ADCT_SystemFPT_RunOutput+0x1c0>
					}
					else
					{
						ADCT_BGS_AIR_1_2_OFF();
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	482f      	ldr	r0, [pc, #188]	; (8002b60 <ADCT_SystemFPT_RunOutput+0x268>)
 8002aa4:	f005 fb0c 	bl	80080c0 <GPIO_SetBits>
 8002aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aac:	482d      	ldr	r0, [pc, #180]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002aae:	f005 fb07 	bl	80080c0 <GPIO_SetBits>
						g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = FALSE;
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
					}
					// Detect if air 2 output just activate and run min_timer
					if(g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE)
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002aba:	799b      	ldrb	r3, [r3, #6]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13e      	bne.n	8002b3e <ADCT_SystemFPT_RunOutput+0x246>
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d13a      	bne.n	8002b3e <ADCT_SystemFPT_RunOutput+0x246>
					{
						uint32_t temp_variable;
						temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <ADCT_SystemFPT_RunOutput+0x27c>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <ADCT_SystemFPT_RunOutput+0x280>)
 8002ace:	fba2 1203 	umull	r1, r2, r2, r3
 8002ad2:	0ad2      	lsrs	r2, r2, #11
 8002ad4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ad8:	fb01 f202 	mul.w	r2, r1, r2
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
						ADCT_BGS_AIR_3_4_ON();
 8002ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ae4:	481f      	ldr	r0, [pc, #124]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002ae6:	f005 faf9 	bl	80080dc <GPIO_ResetBits>
 8002aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aee:	481d      	ldr	r0, [pc, #116]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002af0:	f005 faf4 	bl	80080dc <GPIO_ResetBits>
						g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	705a      	strb	r2, [r3, #1]
						g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE = TRUE;
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	719a      	strb	r2, [r3, #6]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <ADCT_SystemFPT_RunOutput+0x27c>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <ADCT_SystemFPT_RunOutput+0x280>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0adb      	lsrs	r3, r3, #11
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <ADCT_SystemFPT_RunOutput+0x284>)
 8002b10:	719a      	strb	r2, [r3, #6]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <ADCT_SystemFPT_RunOutput+0x288>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <ADCT_SystemFPT_RunOutput+0x284>)
 8002b20:	71da      	strb	r2, [r3, #7]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
 8002b22:	69f9      	ldr	r1, [r7, #28]
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <ADCT_SystemFPT_RunOutput+0x288>)
 8002b26:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2a:	095a      	lsrs	r2, r3, #5
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	1aca      	subs	r2, r1, r3
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <ADCT_SystemFPT_RunOutput+0x284>)
 8002b3a:	721a      	strb	r2, [r3, #8]
						ADCT_BGS_AIR_1_2_OFF();
						g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = FALSE;
					}
					// Detect if air 2 output just activate and run min_timer
					if(g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE)
					{
 8002b3c:	e090      	b.n	8002c60 <ADCT_SystemFPT_RunOutput+0x368>
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
					}
					else
					{
						ADCT_BGS_AIR_3_4_ON();
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	4808      	ldr	r0, [pc, #32]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002b44:	f005 faca 	bl	80080dc <GPIO_ResetBits>
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <ADCT_SystemFPT_RunOutput+0x26c>)
 8002b4e:	f005 fac5 	bl	80080dc <GPIO_ResetBits>
						g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <ADCT_SystemFPT_RunOutput+0x270>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	705a      	strb	r2, [r3, #1]
 8002b58:	e082      	b.n	8002c60 <ADCT_SystemFPT_RunOutput+0x368>
 8002b5a:	bf00      	nop
 8002b5c:	20002550 	.word	0x20002550
 8002b60:	40010c00 	.word	0x40010c00
 8002b64:	40011000 	.word	0x40011000
 8002b68:	200024fc 	.word	0x200024fc
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	20002558 	.word	0x20002558
 8002b74:	2000250c 	.word	0x2000250c
 8002b78:	91a2b3c5 	.word	0x91a2b3c5
 8002b7c:	200024dc 	.word	0x200024dc
 8002b80:	88888889 	.word	0x88888889
					}
				}
				else
				{
					if(g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE ==FALSE )
 8002b84:	4baf      	ldr	r3, [pc, #700]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002b86:	795b      	ldrb	r3, [r3, #5]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d13d      	bne.n	8002c08 <ADCT_SystemFPT_RunOutput+0x310>
 8002b8c:	4bad      	ldr	r3, [pc, #692]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d139      	bne.n	8002c08 <ADCT_SystemFPT_RunOutput+0x310>
					{
						ADCT_BGS_AIR_1_2_ON();
 8002b94:	2120      	movs	r1, #32
 8002b96:	48ac      	ldr	r0, [pc, #688]	; (8002e48 <ADCT_SystemFPT_RunOutput+0x550>)
 8002b98:	f005 faa0 	bl	80080dc <GPIO_ResetBits>
 8002b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ba0:	48aa      	ldr	r0, [pc, #680]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002ba2:	f005 fa9b 	bl	80080dc <GPIO_ResetBits>
						g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002ba6:	4ba7      	ldr	r3, [pc, #668]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
						g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE = TRUE;
 8002bac:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	715a      	strb	r2, [r3, #5]
						uint32_t temp_variable;
						temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002bb2:	4ba7      	ldr	r3, [pc, #668]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4aa7      	ldr	r2, [pc, #668]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002bb8:	fba2 1203 	umull	r1, r2, r2, r3
 8002bbc:	0ad2      	lsrs	r2, r2, #11
 8002bbe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002bc2:	fb01 f202 	mul.w	r2, r1, r2
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002bca:	4ba1      	ldr	r3, [pc, #644]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4aa1      	ldr	r2, [pc, #644]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0adb      	lsrs	r3, r3, #11
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b9f      	ldr	r3, [pc, #636]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002bda:	70da      	strb	r2, [r3, #3]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute =temp_variable/60;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4a9f      	ldr	r2, [pc, #636]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	4b9b      	ldr	r3, [pc, #620]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002bea:	711a      	strb	r2, [r3, #4]
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;
 8002bec:	69b9      	ldr	r1, [r7, #24]
 8002bee:	4b9b      	ldr	r3, [pc, #620]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf4:	095a      	lsrs	r2, r3, #5
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	1aca      	subs	r2, r1, r3
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002c04:	715a      	strb	r2, [r3, #5]
					}
				}
				else
				{
					if(g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE ==FALSE )
					{
 8002c06:	e00b      	b.n	8002c20 <ADCT_SystemFPT_RunOutput+0x328>
						g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;

					}
					else
					{
						ADCT_BGS_AIR_1_2_ON();
 8002c08:	2120      	movs	r1, #32
 8002c0a:	488f      	ldr	r0, [pc, #572]	; (8002e48 <ADCT_SystemFPT_RunOutput+0x550>)
 8002c0c:	f005 fa66 	bl	80080dc <GPIO_ResetBits>
 8002c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c14:	488d      	ldr	r0, [pc, #564]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c16:	f005 fa61 	bl	80080dc <GPIO_ResetBits>
						g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002c1a:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
					}
					// Detect if the t_min_timer is still running, if YES, output remains high
					if(g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == TRUE)
 8002c20:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c22:	799b      	ldrb	r3, [r3, #6]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10e      	bne.n	8002c46 <ADCT_SystemFPT_RunOutput+0x34e>
 8002c28:	4b86      	ldr	r3, [pc, #536]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10a      	bne.n	8002c46 <ADCT_SystemFPT_RunOutput+0x34e>
					{
						ADCT_BGS_AIR_3_4_ON();
 8002c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c34:	4885      	ldr	r0, [pc, #532]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c36:	f005 fa51 	bl	80080dc <GPIO_ResetBits>
 8002c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c3e:	4883      	ldr	r0, [pc, #524]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c40:	f005 fa4c 	bl	80080dc <GPIO_ResetBits>
 8002c44:	e00c      	b.n	8002c60 <ADCT_SystemFPT_RunOutput+0x368>
					}
					else
					{
						ADCT_BGS_AIR_3_4_OFF();
 8002c46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c4a:	4880      	ldr	r0, [pc, #512]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c4c:	f005 fa38 	bl	80080c0 <GPIO_SetBits>
 8002c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c54:	487d      	ldr	r0, [pc, #500]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c56:	f005 fa33 	bl	80080c0 <GPIO_SetBits>
						g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = FALSE;
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	705a      	strb	r2, [r3, #1]
					}
				}

				if(g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE)
 8002c60:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c62:	79db      	ldrb	r3, [r3, #7]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d114      	bne.n	8002c92 <ADCT_SystemFPT_RunOutput+0x39a>
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002c6a:	789b      	ldrb	r3, [r3, #2]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d110      	bne.n	8002c92 <ADCT_SystemFPT_RunOutput+0x39a>
				{
					ADCT_BGS_FAN_ON();
 8002c70:	2104      	movs	r1, #4
 8002c72:	487b      	ldr	r0, [pc, #492]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002c74:	f005 fa24 	bl	80080c0 <GPIO_SetBits>
 8002c78:	2108      	movs	r1, #8
 8002c7a:	4879      	ldr	r0, [pc, #484]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002c7c:	f005 fa20 	bl	80080c0 <GPIO_SetBits>
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4872      	ldr	r0, [pc, #456]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c84:	f005 fa1c 	bl	80080c0 <GPIO_SetBits>
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	4870      	ldr	r0, [pc, #448]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002c8c:	f005 fa18 	bl	80080c0 <GPIO_SetBits>
						ADCT_BGS_AIR_3_4_OFF();
						g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = FALSE;
					}
				}

				if(g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE)
 8002c90:	e1f8      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
				{
					ADCT_BGS_FAN_ON();
				}
				else
				{
					ADCT_BGS_FAN_OFF();
 8002c92:	2104      	movs	r1, #4
 8002c94:	4872      	ldr	r0, [pc, #456]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002c96:	f005 fa21 	bl	80080dc <GPIO_ResetBits>
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	4870      	ldr	r0, [pc, #448]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002c9e:	f005 fa1d 	bl	80080dc <GPIO_ResetBits>
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	4869      	ldr	r0, [pc, #420]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002ca6:	f005 fa19 	bl	80080dc <GPIO_ResetBits>
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	4867      	ldr	r0, [pc, #412]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002cae:	f005 fa15 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
 8002cb2:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	709a      	strb	r2, [r3, #2]
						ADCT_BGS_AIR_3_4_OFF();
						g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = FALSE;
					}
				}

				if(g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE)
 8002cb8:	e1e4      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
					ADCT_BGS_FAN_OFF();
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
				}
			}
			/* High Temperature (SNMP_SYT_003) */
			else if((GstSystemStatus.dhtData.usTemp_Main > GstSystemSetting.usHighTemperatureT2) &&
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <ADCT_SystemFPT_RunOutput+0x56c>)
 8002cbc:	8ada      	ldrh	r2, [r3, #22]
 8002cbe:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	f240 80e4 	bls.w	8002e90 <ADCT_SystemFPT_RunOutput+0x598>
					(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usFanTemperatureT3))
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <ADCT_SystemFPT_RunOutput+0x56c>)
 8002cca:	8ada      	ldrh	r2, [r3, #22]
 8002ccc:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002cce:	889b      	ldrh	r3, [r3, #4]
					ADCT_BGS_FAN_OFF();
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
				}
			}
			/* High Temperature (SNMP_SYT_003) */
			else if((GstSystemStatus.dhtData.usTemp_Main > GstSystemSetting.usHighTemperatureT2) &&
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f200 80dd 	bhi.w	8002e90 <ADCT_SystemFPT_RunOutput+0x598>
					(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usFanTemperatureT3))
			{
				// Detect if air 1 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == FALSE) {
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002cd8:	795b      	ldrb	r3, [r3, #5]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d13d      	bne.n	8002d5a <ADCT_SystemFPT_RunOutput+0x462>
 8002cde:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d139      	bne.n	8002d5a <ADCT_SystemFPT_RunOutput+0x462>
					ADCT_BGS_AIR_1_2_ON();
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	4857      	ldr	r0, [pc, #348]	; (8002e48 <ADCT_SystemFPT_RunOutput+0x550>)
 8002cea:	f005 f9f7 	bl	80080dc <GPIO_ResetBits>
 8002cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cf2:	4856      	ldr	r0, [pc, #344]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002cf4:	f005 f9f2 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
					g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE = TRUE;
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	715a      	strb	r2, [r3, #5]
					uint32_t temp_variable;
					temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002d04:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002d0a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0e:	0ad2      	lsrs	r2, r2, #11
 8002d10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002d14:	fb01 f202 	mul.w	r2, r1, r2
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002d2c:	70da      	strb	r2, [r3, #3]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute =temp_variable/60;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002d3c:	711a      	strb	r2, [r3, #4]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002d42:	fba3 2301 	umull	r2, r3, r3, r1
 8002d46:	095a      	lsrs	r2, r3, #5
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	1aca      	subs	r2, r1, r3
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002d56:	715a      	strb	r2, [r3, #5]
			/* High Temperature (SNMP_SYT_003) */
			else if((GstSystemStatus.dhtData.usTemp_Main > GstSystemSetting.usHighTemperatureT2) &&
					(GstSystemStatus.dhtData.usTemp_Main <= GstSystemSetting.usFanTemperatureT3))
			{
				// Detect if air 1 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == FALSE) {
 8002d58:	e00b      	b.n	8002d72 <ADCT_SystemFPT_RunOutput+0x47a>
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.hour = GstSystemSetting.ulMinSwitchingTime/3600;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute =temp_variable/60;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;
				}
				else {
					ADCT_BGS_AIR_1_2_ON();
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	483a      	ldr	r0, [pc, #232]	; (8002e48 <ADCT_SystemFPT_RunOutput+0x550>)
 8002d5e:	f005 f9bd 	bl	80080dc <GPIO_ResetBits>
 8002d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d66:	4839      	ldr	r0, [pc, #228]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002d68:	f005 f9b8 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
				}

				// Detect if air 2 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE) {
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d74:	799b      	ldrb	r3, [r3, #6]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d13e      	bne.n	8002df8 <ADCT_SystemFPT_RunOutput+0x500>
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d13a      	bne.n	8002df8 <ADCT_SystemFPT_RunOutput+0x500>
					ADCT_BGS_AIR_3_4_ON();
 8002d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d86:	4831      	ldr	r0, [pc, #196]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002d88:	f005 f9a8 	bl	80080dc <GPIO_ResetBits>
 8002d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d90:	482e      	ldr	r0, [pc, #184]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002d92:	f005 f9a3 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	705a      	strb	r2, [r3, #1]
					g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE = TRUE;
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	719a      	strb	r2, [r3, #6]
					uint32_t temp_variable;
					temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002da2:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002da8:	fba2 1203 	umull	r1, r2, r2, r3
 8002dac:	0ad2      	lsrs	r2, r2, #11
 8002dae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002db2:	fb01 f202 	mul.w	r2, r1, r2
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <ADCT_SystemFPT_RunOutput+0x558>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <ADCT_SystemFPT_RunOutput+0x55c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	0adb      	lsrs	r3, r3, #11
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002dca:	719a      	strb	r2, [r3, #6]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002dda:	71da      	strb	r2, [r3, #7]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <ADCT_SystemFPT_RunOutput+0x564>)
 8002de0:	fba3 2301 	umull	r2, r3, r3, r1
 8002de4:	095a      	lsrs	r2, r3, #5
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	1aca      	subs	r2, r1, r3
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <ADCT_SystemFPT_RunOutput+0x560>)
 8002df4:	721a      	strb	r2, [r3, #8]
					ADCT_BGS_AIR_1_2_ON();
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
				}

				// Detect if air 2 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE) {
 8002df6:	e00c      	b.n	8002e12 <ADCT_SystemFPT_RunOutput+0x51a>
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.hour = GstSystemSetting.ulMinSwitchingTime/3600;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
				}
				else {
					ADCT_BGS_AIR_3_4_ON();
 8002df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfc:	4813      	ldr	r0, [pc, #76]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002dfe:	f005 f96d 	bl	80080dc <GPIO_ResetBits>
 8002e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e06:	4811      	ldr	r0, [pc, #68]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002e08:	f005 f968 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	705a      	strb	r2, [r3, #1]
				}

				// Detect if the t_min_timer is still running, if YES, output remains high
				if (g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE) {
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002e14:	79db      	ldrb	r3, [r3, #7]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d126      	bne.n	8002e68 <ADCT_SystemFPT_RunOutput+0x570>
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <ADCT_SystemFPT_RunOutput+0x54c>)
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d122      	bne.n	8002e68 <ADCT_SystemFPT_RunOutput+0x570>
					ADCT_BGS_FAN_ON();
 8002e22:	2104      	movs	r1, #4
 8002e24:	480e      	ldr	r0, [pc, #56]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002e26:	f005 f94b 	bl	80080c0 <GPIO_SetBits>
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <ADCT_SystemFPT_RunOutput+0x568>)
 8002e2e:	f005 f947 	bl	80080c0 <GPIO_SetBits>
 8002e32:	2140      	movs	r1, #64	; 0x40
 8002e34:	4805      	ldr	r0, [pc, #20]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002e36:	f005 f943 	bl	80080c0 <GPIO_SetBits>
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	4803      	ldr	r0, [pc, #12]	; (8002e4c <ADCT_SystemFPT_RunOutput+0x554>)
 8002e3e:	f005 f93f 	bl	80080c0 <GPIO_SetBits>
					ADCT_BGS_AIR_3_4_ON();
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
				}

				// Detect if the t_min_timer is still running, if YES, output remains high
				if (g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE) {
 8002e42:	e11f      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
 8002e44:	200024fc 	.word	0x200024fc
 8002e48:	40010c00 	.word	0x40010c00
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	2000250c 	.word	0x2000250c
 8002e54:	91a2b3c5 	.word	0x91a2b3c5
 8002e58:	200024dc 	.word	0x200024dc
 8002e5c:	88888889 	.word	0x88888889
 8002e60:	40010800 	.word	0x40010800
 8002e64:	20002558 	.word	0x20002558
					ADCT_BGS_FAN_ON();
				}
				else {
					ADCT_BGS_FAN_OFF();
 8002e68:	2104      	movs	r1, #4
 8002e6a:	48b0      	ldr	r0, [pc, #704]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8002e6c:	f005 f936 	bl	80080dc <GPIO_ResetBits>
 8002e70:	2108      	movs	r1, #8
 8002e72:	48ae      	ldr	r0, [pc, #696]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8002e74:	f005 f932 	bl	80080dc <GPIO_ResetBits>
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	48ad      	ldr	r0, [pc, #692]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002e7c:	f005 f92e 	bl	80080dc <GPIO_ResetBits>
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	48ab      	ldr	r0, [pc, #684]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002e84:	f005 f92a 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = FALSE;
 8002e88:	4baa      	ldr	r3, [pc, #680]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	709a      	strb	r2, [r3, #2]
					ADCT_BGS_AIR_3_4_ON();
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
				}

				// Detect if the t_min_timer is still running, if YES, output remains high
				if (g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == TRUE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == TRUE) {
 8002e8e:	e0f9      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
			}
			else
				/* Fan Temperature (SNMP_SYT_004) */
			{
				// Detect if air 1 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == FALSE) {
 8002e90:	4ba8      	ldr	r3, [pc, #672]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002e92:	795b      	ldrb	r3, [r3, #5]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d13d      	bne.n	8002f14 <ADCT_SystemFPT_RunOutput+0x61c>
 8002e98:	4ba6      	ldr	r3, [pc, #664]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d139      	bne.n	8002f14 <ADCT_SystemFPT_RunOutput+0x61c>
					ADCT_BGS_AIR_1_2_ON();
 8002ea0:	2120      	movs	r1, #32
 8002ea2:	48a5      	ldr	r0, [pc, #660]	; (8003138 <ADCT_SystemFPT_RunOutput+0x840>)
 8002ea4:	f005 f91a 	bl	80080dc <GPIO_ResetBits>
 8002ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eac:	48a0      	ldr	r0, [pc, #640]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002eae:	f005 f915 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002eb2:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
					g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE = TRUE;
 8002eb8:	4b9e      	ldr	r3, [pc, #632]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	715a      	strb	r2, [r3, #5]
					uint32_t temp_variable;
					temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002ebe:	4b9f      	ldr	r3, [pc, #636]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a9f      	ldr	r2, [pc, #636]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 8002ec4:	fba2 1203 	umull	r1, r2, r2, r3
 8002ec8:	0ad2      	lsrs	r2, r2, #11
 8002eca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ece:	fb01 f202 	mul.w	r2, r1, r2
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002ed6:	4b99      	ldr	r3, [pc, #612]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a99      	ldr	r2, [pc, #612]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0adb      	lsrs	r3, r3, #11
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b97      	ldr	r3, [pc, #604]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002ee6:	70da      	strb	r2, [r3, #3]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute =temp_variable/60;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a97      	ldr	r2, [pc, #604]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b93      	ldr	r3, [pc, #588]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002ef6:	711a      	strb	r2, [r3, #4]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	4b93      	ldr	r3, [pc, #588]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8002efc:	fba3 2301 	umull	r2, r3, r3, r1
 8002f00:	095a      	lsrs	r2, r3, #5
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	1aca      	subs	r2, r1, r3
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002f10:	715a      	strb	r2, [r3, #5]
			}
			else
				/* Fan Temperature (SNMP_SYT_004) */
			{
				// Detect if air 1 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_1_2TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE == FALSE) {
 8002f12:	e00b      	b.n	8002f2c <ADCT_SystemFPT_RunOutput+0x634>
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.hour = GstSystemSetting.ulMinSwitchingTime/3600;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.minute =temp_variable/60;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR1_2.second =temp_variable%60;
				}
				else {
					ADCT_BGS_AIR_1_2_ON();
 8002f14:	2120      	movs	r1, #32
 8002f16:	4888      	ldr	r0, [pc, #544]	; (8003138 <ADCT_SystemFPT_RunOutput+0x840>)
 8002f18:	f005 f8e0 	bl	80080dc <GPIO_ResetBits>
 8002f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f20:	4883      	ldr	r0, [pc, #524]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002f22:	f005 f8db 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
 8002f26:	4b83      	ldr	r3, [pc, #524]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
				}

				// Detect if air 2 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE) {
 8002f2c:	4b81      	ldr	r3, [pc, #516]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002f2e:	799b      	ldrb	r3, [r3, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13e      	bne.n	8002fb2 <ADCT_SystemFPT_RunOutput+0x6ba>
 8002f34:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13a      	bne.n	8002fb2 <ADCT_SystemFPT_RunOutput+0x6ba>
					ADCT_BGS_AIR_3_4_ON();
 8002f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f40:	487b      	ldr	r0, [pc, #492]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002f42:	f005 f8cb 	bl	80080dc <GPIO_ResetBits>
 8002f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4a:	4879      	ldr	r0, [pc, #484]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002f4c:	f005 f8c6 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002f50:	4b78      	ldr	r3, [pc, #480]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	705a      	strb	r2, [r3, #1]
					g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE = TRUE;
 8002f56:	4b77      	ldr	r3, [pc, #476]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	719a      	strb	r2, [r3, #6]
					uint32_t temp_variable;
					temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8002f5c:	4b77      	ldr	r3, [pc, #476]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a77      	ldr	r2, [pc, #476]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 8002f62:	fba2 1203 	umull	r1, r2, r2, r3
 8002f66:	0ad2      	lsrs	r2, r2, #11
 8002f68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002f6c:	fb01 f202 	mul.w	r2, r1, r2
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8002f74:	4b71      	ldr	r3, [pc, #452]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4a71      	ldr	r2, [pc, #452]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b70      	ldr	r3, [pc, #448]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002f84:	719a      	strb	r2, [r3, #6]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4a6f      	ldr	r2, [pc, #444]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002f94:	71da      	strb	r2, [r3, #7]
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4b6b      	ldr	r3, [pc, #428]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8002f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9e:	095a      	lsrs	r2, r3, #5
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	1aca      	subs	r2, r1, r3
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	4b65      	ldr	r3, [pc, #404]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8002fae:	721a      	strb	r2, [r3, #8]
					ADCT_BGS_AIR_1_2_ON();
					g_ADCT_BGS_StateOutput.AIR_1_2_OUTPUT_STATE = TRUE;
				}

				// Detect if air 2 output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.AIR_3_4TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE == FALSE) {
 8002fb0:	e00c      	b.n	8002fcc <ADCT_SystemFPT_RunOutput+0x6d4>
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.hour = GstSystemSetting.ulMinSwitchingTime/3600;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.minute =temp_variable/60;
					g_ADCT_BGS_TimerManager.MinSwitchingTimerAIR3_4.second =temp_variable%60;
				}
				else {
					ADCT_BGS_AIR_3_4_ON();
 8002fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb6:	485e      	ldr	r0, [pc, #376]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002fb8:	f005 f890 	bl	80080dc <GPIO_ResetBits>
 8002fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc0:	485b      	ldr	r0, [pc, #364]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002fc2:	f005 f88b 	bl	80080dc <GPIO_ResetBits>
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	705a      	strb	r2, [r3, #1]
				}

				// Detect if a fan output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == FALSE) {
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002fce:	79db      	ldrb	r3, [r3, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d144      	bne.n	800305e <ADCT_SystemFPT_RunOutput+0x766>
 8002fd4:	4b57      	ldr	r3, [pc, #348]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002fd6:	789b      	ldrb	r3, [r3, #2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d140      	bne.n	800305e <ADCT_SystemFPT_RunOutput+0x766>
					ADCT_BGS_FAN_ON();
 8002fdc:	2104      	movs	r1, #4
 8002fde:	4853      	ldr	r0, [pc, #332]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8002fe0:	f005 f86e 	bl	80080c0 <GPIO_SetBits>
 8002fe4:	2108      	movs	r1, #8
 8002fe6:	4851      	ldr	r0, [pc, #324]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8002fe8:	f005 f86a 	bl	80080c0 <GPIO_SetBits>
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	4850      	ldr	r0, [pc, #320]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002ff0:	f005 f866 	bl	80080c0 <GPIO_SetBits>
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	484e      	ldr	r0, [pc, #312]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8002ff8:	f005 f862 	bl	80080c0 <GPIO_SetBits>
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = TRUE;
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	709a      	strb	r2, [r3, #2]
					g_ADCT_BGS_StateOutput.FAN_TIMER_STATE = TRUE;
 8003002:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8003004:	2201      	movs	r2, #1
 8003006:	71da      	strb	r2, [r3, #7]
					uint32_t temp_variable;
					temp_variable = GstSystemSetting.ulMinSwitchingTime%3600 ;
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 800300e:	fba2 1203 	umull	r1, r2, r2, r3
 8003012:	0ad2      	lsrs	r2, r2, #11
 8003014:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003018:	fb01 f202 	mul.w	r2, r1, r2
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	607b      	str	r3, [r7, #4]
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.hour = GstSystemSetting.ulMinSwitchingTime/3600;
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a46      	ldr	r2, [pc, #280]	; (8003140 <ADCT_SystemFPT_RunOutput+0x848>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b45      	ldr	r3, [pc, #276]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8003030:	749a      	strb	r2, [r3, #18]
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.minute = temp_variable/60;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a44      	ldr	r2, [pc, #272]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 8003040:	74da      	strb	r2, [r3, #19]
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.second = temp_variable%60;
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <ADCT_SystemFPT_RunOutput+0x850>)
 8003046:	fba3 2301 	umull	r2, r3, r3, r1
 800304a:	095a      	lsrs	r2, r3, #5
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	1aca      	subs	r2, r1, r3
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <ADCT_SystemFPT_RunOutput+0x84c>)
 800305a:	751a      	strb	r2, [r3, #20]
					ADCT_BGS_AIR_3_4_ON();
					g_ADCT_BGS_StateOutput.AIR_3_4_OUTPUT_STATE = TRUE;
				}

				// Detect if a fan output just activate and run min_timer
				if (g_ADCT_BGS_StateOutput.FAN_TIMER_STATE == FALSE && g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE == FALSE) {
 800305c:	e012      	b.n	8003084 <ADCT_SystemFPT_RunOutput+0x78c>
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.hour = GstSystemSetting.ulMinSwitchingTime/3600;
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.minute = temp_variable/60;
					g_ADCT_BGS_TimerManager.MinRuningTimerFan.second = temp_variable%60;
				}
				else {
					ADCT_BGS_FAN_ON();
 800305e:	2104      	movs	r1, #4
 8003060:	4832      	ldr	r0, [pc, #200]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8003062:	f005 f82d 	bl	80080c0 <GPIO_SetBits>
 8003066:	2108      	movs	r1, #8
 8003068:	4830      	ldr	r0, [pc, #192]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 800306a:	f005 f829 	bl	80080c0 <GPIO_SetBits>
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	482f      	ldr	r0, [pc, #188]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 8003072:	f005 f825 	bl	80080c0 <GPIO_SetBits>
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	482d      	ldr	r0, [pc, #180]	; (8003130 <ADCT_SystemFPT_RunOutput+0x838>)
 800307a:	f005 f821 	bl	80080c0 <GPIO_SetBits>
					g_ADCT_BGS_StateOutput.FAN_OUTPUT_STATE = TRUE;
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 8003080:	2201      	movs	r2, #1
 8003082:	709a      	strb	r2, [r3, #2]
				}
			}
		}
	}
	// Lamp alarm
	if (ADCT_SystemFPT_CheckAlarm()) {
 8003084:	f7ff fbb2 	bl	80027ec <ADCT_SystemFPT_CheckAlarm>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <ADCT_SystemFPT_RunOutput+0x7a0>
		ADCT_BGS_RELAY_LAMP_ON();
 800308e:	2101      	movs	r1, #1
 8003090:	4826      	ldr	r0, [pc, #152]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8003092:	f005 f815 	bl	80080c0 <GPIO_SetBits>
 8003096:	e003      	b.n	80030a0 <ADCT_SystemFPT_RunOutput+0x7a8>
		//ADCT_BGS_FAN_ON();
	}
	else {
		ADCT_BGS_RELAY_LAMP_OFF();
 8003098:	2101      	movs	r1, #1
 800309a:	4824      	ldr	r0, [pc, #144]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 800309c:	f005 f81e 	bl	80080dc <GPIO_ResetBits>
	}

	if(GstSystemWarning.State == MAINSTATE_ALARM )
 80030a0:	4b2a      	ldr	r3, [pc, #168]	; (800314c <ADCT_SystemFPT_RunOutput+0x854>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d113      	bne.n	80030d0 <ADCT_SystemFPT_RunOutput+0x7d8>
	{
		// Check if siren should be activated or not. If ADCT_BGS_sys.siren_timer_run == FALSE
		// siren will be activated
		if ((g_ADCT_BGS_StateOutput.ALARM_TIMER_Flag == TRUE) && (g_ADCT_BGS_StateOutput.BUZZER_TIMER_STATE == FALSE) && (ADCT_SystemFPT_CheckAlarm_Siren() == TRUE) ){
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 80030aa:	7adb      	ldrb	r3, [r3, #11]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10c      	bne.n	80030ca <ADCT_SystemFPT_RunOutput+0x7d2>
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 80030b2:	791b      	ldrb	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d108      	bne.n	80030ca <ADCT_SystemFPT_RunOutput+0x7d2>
 80030b8:	f7ff fbf0 	bl	800289c <ADCT_SystemFPT_CheckAlarm_Siren>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d103      	bne.n	80030ca <ADCT_SystemFPT_RunOutput+0x7d2>
			g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE =  TRUE;
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	70da      	strb	r2, [r3, #3]
 80030c8:	e002      	b.n	80030d0 <ADCT_SystemFPT_RunOutput+0x7d8>
		}
		else {
			g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE =FALSE;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	70da      	strb	r2, [r3, #3]
		}

	}
	// Siren alarm
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <ADCT_SystemFPT_RunOutput+0x844>)
 80030d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <ADCT_SystemFPT_RunOutput+0x7ec>
		ADCT_BGS_RELAY_BUZZER_OFF();
 80030da:	2102      	movs	r1, #2
 80030dc:	4813      	ldr	r0, [pc, #76]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 80030de:	f004 fffd 	bl	80080dc <GPIO_ResetBits>
		}
		else {
			ADCT_BGS_RELAY_BUZZER_OFF();
		}
	}
}
 80030e2:	e058      	b.n	8003196 <ADCT_SystemFPT_RunOutput+0x89e>
	// Siren alarm
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <ADCT_SystemFPT_RunOutput+0x83c>)
 80030e6:	78db      	ldrb	r3, [r3, #3]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d14e      	bne.n	800318a <ADCT_SystemFPT_RunOutput+0x892>
 80030ec:	f7ff fbd6 	bl	800289c <ADCT_SystemFPT_CheckAlarm_Siren>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d049      	beq.n	800318a <ADCT_SystemFPT_RunOutput+0x892>
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <ADCT_SystemFPT_RunOutput+0x854>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <ADCT_SystemFPT_RunOutput+0x828>
					ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == TRUE||
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <ADCT_SystemFPT_RunOutput+0x854>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	09db      	lsrs	r3, r3, #7
 800310a:	f003 0301 	and.w	r3, r3, #1
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <ADCT_SystemFPT_RunOutput+0x828>
					ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == TRUE||
					ReadBit(GstSystemWarning.othWarn, WARN_WATER) == TRUE) {
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <ADCT_SystemFPT_RunOutput+0x854>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0301 	and.w	r3, r3, #1
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
					ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == TRUE||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <ADCT_SystemFPT_RunOutput+0x858>
					ReadBit(GstSystemWarning.othWarn, WARN_WATER) == TRUE) {
				ADCT_BGS_RELAY_BUZZER_ON();
 8003120:	2102      	movs	r1, #2
 8003122:	4802      	ldr	r0, [pc, #8]	; (800312c <ADCT_SystemFPT_RunOutput+0x834>)
 8003124:	f004 ffcc 	bl	80080c0 <GPIO_SetBits>
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 8003128:	e034      	b.n	8003194 <ADCT_SystemFPT_RunOutput+0x89c>
 800312a:	bf00      	nop
 800312c:	40010800 	.word	0x40010800
 8003130:	40011000 	.word	0x40011000
 8003134:	200024fc 	.word	0x200024fc
 8003138:	40010c00 	.word	0x40010c00
 800313c:	2000250c 	.word	0x2000250c
 8003140:	91a2b3c5 	.word	0x91a2b3c5
 8003144:	200024dc 	.word	0x200024dc
 8003148:	88888889 	.word	0x88888889
 800314c:	20002550 	.word	0x20002550
					ReadBit(GstSystemWarning.othWarn, WARN_SMOKE) == TRUE||
					ReadBit(GstSystemWarning.othWarn, WARN_WATER) == TRUE) {
				ADCT_BGS_RELAY_BUZZER_ON();
			}
			else if (ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON  || ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON) {
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <ADCT_SystemFPT_RunOutput+0x8a8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <ADCT_SystemFPT_RunOutput+0x874>
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <ADCT_SystemFPT_RunOutput+0x8a8>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <ADCT_SystemFPT_RunOutput+0x89c>
				if (GstSystemSetting.ucDoorBurglarEnableAlarm == TRUE) {
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <ADCT_SystemFPT_RunOutput+0x8ac>)
 800316e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <ADCT_SystemFPT_RunOutput+0x888>
					ADCT_BGS_RELAY_BUZZER_ON();
 8003176:	2102      	movs	r1, #2
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <ADCT_SystemFPT_RunOutput+0x8b0>)
 800317a:	f004 ffa1 	bl	80080c0 <GPIO_SetBits>
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 800317e:	e009      	b.n	8003194 <ADCT_SystemFPT_RunOutput+0x89c>
			else if (ReadBit(GstSystemWarning.othWarn, WARN_DOOR) == WARN_ON  || ReadBit(GstSystemWarning.othWarn, WARN_BURGLAR) == WARN_ON) {
				if (GstSystemSetting.ucDoorBurglarEnableAlarm == TRUE) {
					ADCT_BGS_RELAY_BUZZER_ON();
				}
				else {
					ADCT_BGS_RELAY_BUZZER_OFF();
 8003180:	2102      	movs	r1, #2
 8003182:	4809      	ldr	r0, [pc, #36]	; (80031a8 <ADCT_SystemFPT_RunOutput+0x8b0>)
 8003184:	f004 ffaa 	bl	80080dc <GPIO_ResetBits>
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 8003188:	e004      	b.n	8003194 <ADCT_SystemFPT_RunOutput+0x89c>
					ADCT_BGS_RELAY_BUZZER_OFF();
				}
			}
		}
		else {
			ADCT_BGS_RELAY_BUZZER_OFF();
 800318a:	2102      	movs	r1, #2
 800318c:	4806      	ldr	r0, [pc, #24]	; (80031a8 <ADCT_SystemFPT_RunOutput+0x8b0>)
 800318e:	f004 ffa5 	bl	80080dc <GPIO_ResetBits>
		}
	}
}
 8003192:	e000      	b.n	8003196 <ADCT_SystemFPT_RunOutput+0x89e>
	if (GstSystemSetting.ucEnableAlarm == FALSE) {
		ADCT_BGS_RELAY_BUZZER_OFF();
	}
	else {
		if (g_ADCT_BGS_StateOutput.BUZZER_OUTPUT_STATE == TRUE && ADCT_SystemFPT_CheckAlarm_Siren()) {
			if (ReadBit(GstSystemWarning.othWarn, WARN_FIRE) == WARN_ON ||
 8003194:	bf00      	nop
		}
		else {
			ADCT_BGS_RELAY_BUZZER_OFF();
		}
	}
}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20002550 	.word	0x20002550
 80031a4:	2000250c 	.word	0x2000250c
 80031a8:	40010800 	.word	0x40010800

080031ac <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <Delay+0x3c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	micros *= (SystemCoreClock / 1000000);
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <Delay+0x40>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <Delay+0x44>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0c9b      	lsrs	r3, r3, #18
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	fb02 f303 	mul.w	r3, r2, r3
 80031cc:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80031ce:	bf00      	nop
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <Delay+0x3c>)
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3f8      	bcc.n	80031d0 <Delay+0x24>
	micros *= (SystemCoreClock / 1000000) / 5;

	/* Wait till done */
	while (micros--);
#endif
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	e0001000 	.word	0xe0001000
 80031ec:	20000198 	.word	0x20000198
 80031f0:	431bde83 	.word	0x431bde83

080031f4 <DHT22_Module_Init_Hardware>:
/******************************************************************************
 * Defines
 *****************************************************************************/

void DHT22_Module_Init_Hardware(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	vExtiInit();
 80031f8:	f000 faa4 	bl	8003744 <vExtiInit>
	ADCT_BGS_DHT22Init();
 80031fc:	f000 f88e 	bl	800331c <ADCT_BGS_DHT22Init>
	vExtiStart();
 8003200:	f000 fad8 	bl	80037b4 <vExtiStart>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <ADCT_DHT22_FPT_GetValue>:
void ADCT_DHT22_FPT_GetValue(DHT22_MODULE_DATA *pDHT22Data)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	if(ADCT_BGS_DHT22Measuring(DHT22_Device_1) == ADCT_FALSE)
 8003210:	2000      	movs	r0, #0
 8003212:	f000 fa39 	bl	8003688 <ADCT_BGS_DHT22Measuring>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11f      	bne.n	800325c <ADCT_DHT22_FPT_GetValue+0x54>
	{
		if (ADCT_BGS_DHT22_CheckCRC(DHT22_Device_1))
 800321c:	2000      	movs	r0, #0
 800321e:	f000 f971 	bl	8003504 <ADCT_BGS_DHT22_CheckCRC>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d019      	beq.n	800325c <ADCT_DHT22_FPT_GetValue+0x54>
		{
			uint32_t temp_value = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
			uint32_t humid_value = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]

			temp_value = ADCT_BGS_DHT22GetTemp(DHT22_Device_1);
 8003230:	2000      	movs	r0, #0
 8003232:	f000 fa39 	bl	80036a8 <ADCT_BGS_DHT22GetTemp>
 8003236:	6178      	str	r0, [r7, #20]
			humid_value = ADCT_BGS_DHT22GetHumidity(DHT22_Device_1) ;
 8003238:	2000      	movs	r0, #0
 800323a:	f000 fa5d 	bl	80036f8 <ADCT_BGS_DHT22GetHumidity>
 800323e:	6138      	str	r0, [r7, #16]
			if(temp_value < 5)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d903      	bls.n	800324e <ADCT_DHT22_FPT_GetValue+0x46>
			{

			}
			else
			{
				pDHT22Data->usTemp_Sub = temp_value ;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	809a      	strh	r2, [r3, #4]

			}

			if (!humid_value)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <ADCT_DHT22_FPT_GetValue+0x54>
			{

			}
			else
			{
				pDHT22Data->usHumid_Sub = humid_value;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	80da      	strh	r2, [r3, #6]

			}
		}
	}
#ifdef SUB_DHT22
	if(ADCT_BGS_DHT22Measuring(DHT22_Device_2) == ADCT_FALSE)
 800325c:	2001      	movs	r0, #1
 800325e:	f000 fa13 	bl	8003688 <ADCT_BGS_DHT22Measuring>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11f      	bne.n	80032a8 <ADCT_DHT22_FPT_GetValue+0xa0>
	{

		if (ADCT_BGS_DHT22_CheckCRC(DHT22_Device_2))
 8003268:	2001      	movs	r0, #1
 800326a:	f000 f94b 	bl	8003504 <ADCT_BGS_DHT22_CheckCRC>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d019      	beq.n	80032a8 <ADCT_DHT22_FPT_GetValue+0xa0>
		{
			uint32_t temp_value = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
			uint32_t humid_value = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]

			temp_value = ADCT_BGS_DHT22GetTemp(DHT22_Device_2) ;
 800327c:	2001      	movs	r0, #1
 800327e:	f000 fa13 	bl	80036a8 <ADCT_BGS_DHT22GetTemp>
 8003282:	60f8      	str	r0, [r7, #12]
			humid_value = ADCT_BGS_DHT22GetHumidity(DHT22_Device_2) ;
 8003284:	2001      	movs	r0, #1
 8003286:	f000 fa37 	bl	80036f8 <ADCT_BGS_DHT22GetHumidity>
 800328a:	60b8      	str	r0, [r7, #8]
			if(temp_value < 5)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d903      	bls.n	800329a <ADCT_DHT22_FPT_GetValue+0x92>
			{

			}
			else
			{
				pDHT22Data->usTemp_Main = temp_value;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	801a      	strh	r2, [r3, #0]
			}

			if(! humid_value)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <ADCT_DHT22_FPT_GetValue+0xa0>
			{

			}
			else
			{
				pDHT22Data->usHumid_Main = humid_value ;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	805a      	strh	r2, [r3, #2]
			}

		}
	}
#endif
}
 80032a8:	bf00      	nop
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <ADCT_BGS_DHT22_PWR_Init>:
#endif
/******************************************************************************
 * Function definitions
 *****************************************************************************/
void ADCT_BGS_DHT22_PWR_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(DHT22_PWR_01_CLK, ENABLE);
 80032b6:	2101      	movs	r1, #1
 80032b8:	2004      	movs	r0, #4
 80032ba:	f005 fbb5 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(DHT22_PWR_02_CLK, ENABLE);
 80032be:	2101      	movs	r1, #1
 80032c0:	2008      	movs	r0, #8
 80032c2:	f005 fbb1 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DHT22_PWR_01_PIN;
 80032c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ca:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032cc:	2303      	movs	r3, #3
 80032ce:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80032d0:	2310      	movs	r3, #16
 80032d2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(DHT22_PWR_01_PORT, &GPIO_InitStructure);
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	4619      	mov	r1, r3
 80032d8:	480e      	ldr	r0, [pc, #56]	; (8003314 <ADCT_BGS_DHT22_PWR_Init+0x64>)
 80032da:	f004 fe01 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = DHT22_PWR_02_PIN;
 80032de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032e4:	2303      	movs	r3, #3
 80032e6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80032e8:	2310      	movs	r3, #16
 80032ea:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(DHT22_PWR_02_PORT, &GPIO_InitStructure);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4809      	ldr	r0, [pc, #36]	; (8003318 <ADCT_BGS_DHT22_PWR_Init+0x68>)
 80032f2:	f004 fdf5 	bl	8007ee0 <GPIO_Init>
	DHT22_01_PWR_OFF();
 80032f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <ADCT_BGS_DHT22_PWR_Init+0x64>)
 80032fc:	f004 feee 	bl	80080dc <GPIO_ResetBits>
	DHT22_02_PWR_OFF();
 8003300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <ADCT_BGS_DHT22_PWR_Init+0x68>)
 8003306:	f004 fee9 	bl	80080dc <GPIO_ResetBits>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40010800 	.word	0x40010800
 8003318:	40010c00 	.word	0x40010c00

0800331c <ADCT_BGS_DHT22Init>:

void ADCT_BGS_DHT22Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(DHT22_01_CLK, ENABLE);
 8003322:	2101      	movs	r1, #1
 8003324:	2008      	movs	r0, #8
 8003326:	f005 fb7f 	bl	8008a28 <RCC_APB2PeriphClockCmd>
#ifdef SUB_DHT22
	RCC_APB2PeriphClockCmd(DHT22_02_CLK, ENABLE);
 800332a:	2101      	movs	r1, #1
 800332c:	2010      	movs	r0, #16
 800332e:	f005 fb7b 	bl	8008a28 <RCC_APB2PeriphClockCmd>
#endif
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8003332:	2101      	movs	r1, #1
 8003334:	2001      	movs	r0, #1
 8003336:	f005 fb77 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	vExtiAddCb(DHT22_01_PortSource, DHT22_01_PinSource, ADCT_BGS_DHT22_01_CbkState);
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <ADCT_BGS_DHT22Init+0x6c>)
 800333c:	2109      	movs	r1, #9
 800333e:	2001      	movs	r0, #1
 8003340:	f000 fa0c 	bl	800375c <vExtiAddCb>
#ifdef SUB_DHT22
	vExtiAddCb(DHT22_02_PortSource, DHT22_02_PinSource, ADCT_BGS_DHT22_02_CbkState);
 8003344:	4a11      	ldr	r2, [pc, #68]	; (800338c <ADCT_BGS_DHT22Init+0x70>)
 8003346:	210c      	movs	r1, #12
 8003348:	2002      	movs	r0, #2
 800334a:	f000 fa07 	bl	800375c <vExtiAddCb>
#endif
	GPIO_InitStructure.GPIO_Pin = DHT22_01_PIN;
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003352:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003354:	2303      	movs	r3, #3
 8003356:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003358:	2348      	movs	r3, #72	; 0x48
 800335a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(DHT22_01_PORT, &GPIO_InitStructure);
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4619      	mov	r1, r3
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <ADCT_BGS_DHT22Init+0x74>)
 8003362:	f004 fdbd 	bl	8007ee0 <GPIO_Init>
#ifdef SUB_DHT22
	GPIO_InitStructure.GPIO_Pin = DHT22_02_PIN;
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800336c:	2303      	movs	r3, #3
 800336e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003370:	2348      	movs	r3, #72	; 0x48
 8003372:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(DHT22_02_PORT, &GPIO_InitStructure);
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4806      	ldr	r0, [pc, #24]	; (8003394 <ADCT_BGS_DHT22Init+0x78>)
 800337a:	f004 fdb1 	bl	8007ee0 <GPIO_Init>
#endif
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08003399 	.word	0x08003399
 800338c:	08003449 	.word	0x08003449
 8003390:	40010c00 	.word	0x40010c00
 8003394:	40011000 	.word	0x40011000

08003398 <ADCT_BGS_DHT22_01_CbkState>:

void ADCT_BGS_DHT22_01_CbkState(ExtiLineState_t state)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
	static uint32_t timeUs=0;
	static uint8_t cnt=0;
	uint32_t t;

	t=TimerGetUS();
 80033a2:	f004 f80f 	bl	80073c4 <TimerGetUS>
 80033a6:	60f8      	str	r0, [r7, #12]

	if (g_DhtMeasuring[DHT22_Device_1])
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <ADCT_BGS_DHT22_01_CbkState+0xa0>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d038      	beq.n	8003422 <ADCT_BGS_DHT22_01_CbkState+0x8a>
	{
		if (state == LineState_Low) // last was low
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d138      	bne.n	8003428 <ADCT_BGS_DHT22_01_CbkState+0x90>
		{
			if (cnt)
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <ADCT_BGS_DHT22_01_CbkState+0x68>
			{
				g_DhtRaw[DHT22_Device_1][ (cnt-1) / 8] <<= 1;
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da00      	bge.n	80033ca <ADCT_BGS_DHT22_01_CbkState+0x32>
 80033c8:	3307      	adds	r3, #7
 80033ca:	10db      	asrs	r3, r3, #3
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <ADCT_BGS_DHT22_01_CbkState+0xa8>)
 80033ce:	5cd2      	ldrb	r2, [r2, r3]
 80033d0:	0052      	lsls	r2, r2, #1
 80033d2:	b2d1      	uxtb	r1, r2
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <ADCT_BGS_DHT22_01_CbkState+0xa8>)
 80033d6:	54d1      	strb	r1, [r2, r3]
				if ((t - timeUs) > 50) // 1
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <ADCT_BGS_DHT22_01_CbkState+0xac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b32      	cmp	r3, #50	; 0x32
 80033e2:	d90d      	bls.n	8003400 <ADCT_BGS_DHT22_01_CbkState+0x68>
					g_DhtRaw[DHT22_Device_1][(cnt-1) / 8] |= 1;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da00      	bge.n	80033f0 <ADCT_BGS_DHT22_01_CbkState+0x58>
 80033ee:	3307      	adds	r3, #7
 80033f0:	10db      	asrs	r3, r3, #3
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <ADCT_BGS_DHT22_01_CbkState+0xa8>)
 80033f4:	5cd2      	ldrb	r2, [r2, r3]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	b2d1      	uxtb	r1, r2
 80033fc:	4a10      	ldr	r2, [pc, #64]	; (8003440 <ADCT_BGS_DHT22_01_CbkState+0xa8>)
 80033fe:	54d1      	strb	r1, [r2, r3]
			}

			cnt++;
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 800340a:	701a      	strb	r2, [r3, #0]

			if (cnt >= 41) {
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b28      	cmp	r3, #40	; 0x28
 8003412:	d909      	bls.n	8003428 <ADCT_BGS_DHT22_01_CbkState+0x90>
				g_DhtMeasuring[DHT22_Device_1] = 0;
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <ADCT_BGS_DHT22_01_CbkState+0xa0>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
				cnt = 0;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e002      	b.n	8003428 <ADCT_BGS_DHT22_01_CbkState+0x90>
			}
		}
	} else
		cnt = 0;
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <ADCT_BGS_DHT22_01_CbkState+0xa4>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]

	timeUs=t;
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <ADCT_BGS_DHT22_01_CbkState+0xac>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200002dc 	.word	0x200002dc
 800343c:	200002de 	.word	0x200002de
 8003440:	200002d0 	.word	0x200002d0
 8003444:	200002e0 	.word	0x200002e0

08003448 <ADCT_BGS_DHT22_02_CbkState>:
#ifdef SUB_DHT22
void ADCT_BGS_DHT22_02_CbkState(ExtiLineState_t state)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
	static uint32_t timeUs=0;
	static uint8_t cnt=0;
	uint32_t t;

	t=TimerGetUS();
 8003452:	f003 ffb7 	bl	80073c4 <TimerGetUS>
 8003456:	60f8      	str	r0, [r7, #12]

	if (g_DhtMeasuring[DHT22_Device_2])
 8003458:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <ADCT_BGS_DHT22_02_CbkState+0xac>)
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03e      	beq.n	80034de <ADCT_BGS_DHT22_02_CbkState+0x96>
	{
		if (state == LineState_Low) // last was low
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13e      	bne.n	80034e4 <ADCT_BGS_DHT22_02_CbkState+0x9c>
		{
			if (cnt)
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d026      	beq.n	80034bc <ADCT_BGS_DHT22_02_CbkState+0x74>
			{
				g_DhtRaw[DHT22_Device_2][ (cnt-1) / 8] <<= 1;
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	da00      	bge.n	800347a <ADCT_BGS_DHT22_02_CbkState+0x32>
 8003478:	3307      	adds	r3, #7
 800347a:	10db      	asrs	r3, r3, #3
 800347c:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <ADCT_BGS_DHT22_02_CbkState+0xb4>)
 800347e:	441a      	add	r2, r3
 8003480:	7952      	ldrb	r2, [r2, #5]
 8003482:	0052      	lsls	r2, r2, #1
 8003484:	b2d1      	uxtb	r1, r2
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <ADCT_BGS_DHT22_02_CbkState+0xb4>)
 8003488:	4413      	add	r3, r2
 800348a:	460a      	mov	r2, r1
 800348c:	715a      	strb	r2, [r3, #5]
				if ((t - timeUs) > 50) // 1
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <ADCT_BGS_DHT22_02_CbkState+0xb8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b32      	cmp	r3, #50	; 0x32
 8003498:	d910      	bls.n	80034bc <ADCT_BGS_DHT22_02_CbkState+0x74>
					g_DhtRaw[DHT22_Device_2][(cnt-1) / 8] |= 1;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da00      	bge.n	80034a6 <ADCT_BGS_DHT22_02_CbkState+0x5e>
 80034a4:	3307      	adds	r3, #7
 80034a6:	10db      	asrs	r3, r3, #3
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <ADCT_BGS_DHT22_02_CbkState+0xb4>)
 80034aa:	441a      	add	r2, r3
 80034ac:	7952      	ldrb	r2, [r2, #5]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	b2d1      	uxtb	r1, r2
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <ADCT_BGS_DHT22_02_CbkState+0xb4>)
 80034b6:	4413      	add	r3, r2
 80034b8:	460a      	mov	r2, r1
 80034ba:	715a      	strb	r2, [r3, #5]
			}

			cnt++;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 80034c6:	701a      	strb	r2, [r3, #0]

			if (cnt >= 41) {
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b28      	cmp	r3, #40	; 0x28
 80034ce:	d909      	bls.n	80034e4 <ADCT_BGS_DHT22_02_CbkState+0x9c>
				g_DhtMeasuring[DHT22_Device_2] = 0;
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <ADCT_BGS_DHT22_02_CbkState+0xac>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	705a      	strb	r2, [r3, #1]
				cnt = 0;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e002      	b.n	80034e4 <ADCT_BGS_DHT22_02_CbkState+0x9c>
			}
		}
	} else
		cnt = 0;
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <ADCT_BGS_DHT22_02_CbkState+0xb0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]

	timeUs=t;
 80034e4:	4a06      	ldr	r2, [pc, #24]	; (8003500 <ADCT_BGS_DHT22_02_CbkState+0xb8>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200002dc 	.word	0x200002dc
 80034f8:	200002e4 	.word	0x200002e4
 80034fc:	200002d0 	.word	0x200002d0
 8003500:	200002e8 	.word	0x200002e8

08003504 <ADCT_BGS_DHT22_CheckCRC>:
#endif
uint8_t ADCT_BGS_DHT22_CheckCRC(ADCT_BGS_DHT22_devicetypes device)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc;
	crc=g_DhtRaw[device][0]+g_DhtRaw[device][1]+g_DhtRaw[device][2]+g_DhtRaw[device][3];
 800350e:	79fa      	ldrb	r2, [r7, #7]
 8003510:	491b      	ldr	r1, [pc, #108]	; (8003580 <ADCT_BGS_DHT22_CheckCRC+0x7c>)
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	440b      	add	r3, r1
 800351a:	7819      	ldrb	r1, [r3, #0]
 800351c:	79fa      	ldrb	r2, [r7, #7]
 800351e:	4818      	ldr	r0, [pc, #96]	; (8003580 <ADCT_BGS_DHT22_CheckCRC+0x7c>)
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	4403      	add	r3, r0
 8003528:	3301      	adds	r3, #1
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	440b      	add	r3, r1
 800352e:	b2d9      	uxtb	r1, r3
 8003530:	79fa      	ldrb	r2, [r7, #7]
 8003532:	4813      	ldr	r0, [pc, #76]	; (8003580 <ADCT_BGS_DHT22_CheckCRC+0x7c>)
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	4403      	add	r3, r0
 800353c:	3302      	adds	r3, #2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	440b      	add	r3, r1
 8003542:	b2d9      	uxtb	r1, r3
 8003544:	79fa      	ldrb	r2, [r7, #7]
 8003546:	480e      	ldr	r0, [pc, #56]	; (8003580 <ADCT_BGS_DHT22_CheckCRC+0x7c>)
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	4403      	add	r3, r0
 8003550:	3303      	adds	r3, #3
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	440b      	add	r3, r1
 8003556:	73fb      	strb	r3, [r7, #15]
	return crc==g_DhtRaw[device][4];
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	4909      	ldr	r1, [pc, #36]	; (8003580 <ADCT_BGS_DHT22_CheckCRC+0x7c>)
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	440b      	add	r3, r1
 8003564:	3304      	adds	r3, #4
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	200002d0 	.word	0x200002d0

08003584 <ADCT_BGS_DHT22Start>:

void ADCT_BGS_DHT22Start(ADCT_BGS_DHT22_devicetypes device)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStructure;
	switch (device)
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <ADCT_BGS_DHT22Start+0x16>
 8003594:	2b01      	cmp	r3, #1
 8003596:	d034      	beq.n	8003602 <ADCT_BGS_DHT22Start+0x7e>

		g_DhtMeasuring[DHT22_Device_2] = 1;
		memset(&g_DhtRaw[DHT22_Device_2], 0, 5);
	}
#endif
	default : break;
 8003598:	e066      	b.n	8003668 <ADCT_BGS_DHT22Start+0xe4>
	{

	case DHT22_Device_1:
	{

		GPIO_InitStructure.GPIO_Pin = DHT22_01_PIN;
 800359a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359e:	81bb      	strh	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035a0:	2303      	movs	r3, #3
 80035a2:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80035a4:	2310      	movs	r3, #16
 80035a6:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(DHT22_01_PORT, &GPIO_InitStructure);
 80035a8:	f107 030c 	add.w	r3, r7, #12
 80035ac:	4619      	mov	r1, r3
 80035ae:	4831      	ldr	r0, [pc, #196]	; (8003674 <ADCT_BGS_DHT22Start+0xf0>)
 80035b0:	f004 fc96 	bl	8007ee0 <GPIO_Init>

		DHT22_01_PIN_LOW();
 80035b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035b8:	482e      	ldr	r0, [pc, #184]	; (8003674 <ADCT_BGS_DHT22Start+0xf0>)
 80035ba:	f004 fd8f 	bl	80080dc <GPIO_ResetBits>
		Delay(500);
 80035be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035c2:	f7ff fdf3 	bl	80031ac <Delay>
		DHT22_01_PIN_HIGH();
 80035c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ca:	482a      	ldr	r0, [pc, #168]	; (8003674 <ADCT_BGS_DHT22Start+0xf0>)
 80035cc:	f004 fd78 	bl	80080c0 <GPIO_SetBits>
		Delay(40);
 80035d0:	2028      	movs	r0, #40	; 0x28
 80035d2:	f7ff fdeb 	bl	80031ac <Delay>


		GPIO_InitStructure.GPIO_Pin = DHT22_01_PIN;
 80035d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035da:	81bb      	strh	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035dc:	2303      	movs	r3, #3
 80035de:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80035e0:	2348      	movs	r3, #72	; 0x48
 80035e2:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(DHT22_01_PORT, &GPIO_InitStructure);
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4619      	mov	r1, r3
 80035ea:	4822      	ldr	r0, [pc, #136]	; (8003674 <ADCT_BGS_DHT22Start+0xf0>)
 80035ec:	f004 fc78 	bl	8007ee0 <GPIO_Init>

		g_DhtMeasuring[DHT22_Device_1] = 1;
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <ADCT_BGS_DHT22Start+0xf4>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
		memset(&g_DhtRaw[DHT22_Device_1], 0, 5);
 80035f6:	2205      	movs	r2, #5
 80035f8:	2100      	movs	r1, #0
 80035fa:	4820      	ldr	r0, [pc, #128]	; (800367c <ADCT_BGS_DHT22Start+0xf8>)
 80035fc:	f006 fa39 	bl	8009a72 <memset>
		break;
 8003600:	e033      	b.n	800366a <ADCT_BGS_DHT22Start+0xe6>
	}
#ifdef SUB_DHT22
	case DHT22_Device_2:
	{
		GPIO_InitStructure.GPIO_Pin = DHT22_02_PIN;
 8003602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003606:	81bb      	strh	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003608:	2303      	movs	r3, #3
 800360a:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800360c:	2310      	movs	r3, #16
 800360e:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(DHT22_02_PORT, &GPIO_InitStructure);
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	4619      	mov	r1, r3
 8003616:	481a      	ldr	r0, [pc, #104]	; (8003680 <ADCT_BGS_DHT22Start+0xfc>)
 8003618:	f004 fc62 	bl	8007ee0 <GPIO_Init>

		DHT22_02_PIN_LOW();
 800361c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003620:	4817      	ldr	r0, [pc, #92]	; (8003680 <ADCT_BGS_DHT22Start+0xfc>)
 8003622:	f004 fd5b 	bl	80080dc <GPIO_ResetBits>
		Delay(500);
 8003626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800362a:	f7ff fdbf 	bl	80031ac <Delay>
		DHT22_02_PIN_HIGH();
 800362e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003632:	4813      	ldr	r0, [pc, #76]	; (8003680 <ADCT_BGS_DHT22Start+0xfc>)
 8003634:	f004 fd44 	bl	80080c0 <GPIO_SetBits>
		Delay(40);
 8003638:	2028      	movs	r0, #40	; 0x28
 800363a:	f7ff fdb7 	bl	80031ac <Delay>


		GPIO_InitStructure.GPIO_Pin = DHT22_02_PIN;
 800363e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003642:	81bb      	strh	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003644:	2303      	movs	r3, #3
 8003646:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003648:	2348      	movs	r3, #72	; 0x48
 800364a:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(DHT22_02_PORT, &GPIO_InitStructure);
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4619      	mov	r1, r3
 8003652:	480b      	ldr	r0, [pc, #44]	; (8003680 <ADCT_BGS_DHT22Start+0xfc>)
 8003654:	f004 fc44 	bl	8007ee0 <GPIO_Init>

		g_DhtMeasuring[DHT22_Device_2] = 1;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <ADCT_BGS_DHT22Start+0xf4>)
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
		memset(&g_DhtRaw[DHT22_Device_2], 0, 5);
 800365e:	2205      	movs	r2, #5
 8003660:	2100      	movs	r1, #0
 8003662:	4808      	ldr	r0, [pc, #32]	; (8003684 <ADCT_BGS_DHT22Start+0x100>)
 8003664:	f006 fa05 	bl	8009a72 <memset>
	}
#endif
	default : break;
 8003668:	bf00      	nop
	}
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40010c00 	.word	0x40010c00
 8003678:	200002dc 	.word	0x200002dc
 800367c:	200002d0 	.word	0x200002d0
 8003680:	40011000 	.word	0x40011000
 8003684:	200002d5 	.word	0x200002d5

08003688 <ADCT_BGS_DHT22Measuring>:


uint8_t ADCT_BGS_DHT22Measuring(ADCT_BGS_DHT22_devicetypes device)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	return 	g_DhtMeasuring[device];
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <ADCT_BGS_DHT22Measuring+0x1c>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200002dc 	.word	0x200002dc

080036a8 <ADCT_BGS_DHT22GetTemp>:

uint32_t ADCT_BGS_DHT22GetTemp(ADCT_BGS_DHT22_devicetypes device)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
	uint32_t res=0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
	res=g_DhtRaw[device][2];
 80036b6:	79fa      	ldrb	r2, [r7, #7]
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <ADCT_BGS_DHT22GetTemp+0x4c>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	3302      	adds	r3, #2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
	res<<=8;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	60fb      	str	r3, [r7, #12]
	res|=g_DhtRaw[device][3];
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	4908      	ldr	r1, [pc, #32]	; (80036f4 <ADCT_BGS_DHT22GetTemp+0x4c>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	440b      	add	r3, r1
 80036da:	3303      	adds	r3, #3
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
	return res;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	200002d0 	.word	0x200002d0

080036f8 <ADCT_BGS_DHT22GetHumidity>:

uint32_t ADCT_BGS_DHT22GetHumidity(ADCT_BGS_DHT22_devicetypes device)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
	uint32_t res=0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
	res=g_DhtRaw[device][0];
 8003706:	79fa      	ldrb	r2, [r7, #7]
 8003708:	490d      	ldr	r1, [pc, #52]	; (8003740 <ADCT_BGS_DHT22GetHumidity+0x48>)
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	440b      	add	r3, r1
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
	res<<=8;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	60fb      	str	r3, [r7, #12]
	res|=g_DhtRaw[device][1];
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <ADCT_BGS_DHT22GetHumidity+0x48>)
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	440b      	add	r3, r1
 8003728:	3301      	adds	r3, #1
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
	return res;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	200002d0 	.word	0x200002d0

08003744 <vExtiInit>:
/******************************************************************************
 * Function definitions
 *****************************************************************************/

void vExtiInit(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	memset(&g_ExtiConfig, 0, sizeof(ExtiConfig_t)*MAX_NUMS_OF_EXTI);
 8003748:	22c0      	movs	r2, #192	; 0xc0
 800374a:	2100      	movs	r1, #0
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <vExtiInit+0x14>)
 800374e:	f006 f990 	bl	8009a72 <memset>
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200002ec 	.word	0x200002ec

0800375c <vExtiAddCb>:

void vExtiAddCb(uint8_t port, uint8_t line, vExtiCbState_t pCb)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	603a      	str	r2, [r7, #0]
 8003766:	71fb      	strb	r3, [r7, #7]
 8003768:	460b      	mov	r3, r1
 800376a:	71bb      	strb	r3, [r7, #6]
	g_ExtiConfig[line].port=port;
 800376c:	79ba      	ldrb	r2, [r7, #6]
 800376e:	4910      	ldr	r1, [pc, #64]	; (80037b0 <vExtiAddCb+0x54>)
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	79fa      	ldrb	r2, [r7, #7]
 800377c:	701a      	strb	r2, [r3, #0]
	g_ExtiConfig[line].cb=pCb;
 800377e:	79ba      	ldrb	r2, [r7, #6]
 8003780:	490b      	ldr	r1, [pc, #44]	; (80037b0 <vExtiAddCb+0x54>)
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3304      	adds	r3, #4
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	601a      	str	r2, [r3, #0]
	g_ExtiConfig[line].state=ENABLE;
 8003792:	79ba      	ldrb	r2, [r7, #6]
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <vExtiAddCb+0x54>)
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3308      	adds	r3, #8
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	200002ec 	.word	0x200002ec

080037b4 <vExtiStart>:
{
	g_ExtiConfig[line].state=state;
}

void vExtiStart(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	uint32_t uExtiLines=0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
	uint8_t exti=0;
 80037be:	2300      	movs	r3, #0
 80037c0:	74fb      	strb	r3, [r7, #19]

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 10;
 80037c2:	230a      	movs	r3, #10
 80037c4:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]

    for (exti=0;exti<MAX_NUMS_OF_EXTI;exti++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	74fb      	strb	r3, [r7, #19]
 80037d2:	e05b      	b.n	800388c <vExtiStart+0xd8>
	{
		if ((g_ExtiConfig[exti].state==ENABLE) && (g_ExtiConfig[exti].cb!=0))
 80037d4:	7cfa      	ldrb	r2, [r7, #19]
 80037d6:	4938      	ldr	r1, [pc, #224]	; (80038b8 <vExtiStart+0x104>)
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3308      	adds	r3, #8
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d14d      	bne.n	8003886 <vExtiStart+0xd2>
 80037ea:	7cfa      	ldrb	r2, [r7, #19]
 80037ec:	4932      	ldr	r1, [pc, #200]	; (80038b8 <vExtiStart+0x104>)
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3304      	adds	r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d042      	beq.n	8003886 <vExtiStart+0xd2>
		{
			uExtiLines|=(1<<exti);	// set line for exti
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2201      	movs	r2, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	461a      	mov	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

			if (exti>9)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b09      	cmp	r3, #9
 8003814:	d902      	bls.n	800381c <vExtiStart+0x68>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8003816:	2328      	movs	r3, #40	; 0x28
 8003818:	733b      	strb	r3, [r7, #12]
 800381a:	e022      	b.n	8003862 <vExtiStart+0xae>
			else if (exti>4)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d902      	bls.n	8003828 <vExtiStart+0x74>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8003822:	2317      	movs	r3, #23
 8003824:	733b      	strb	r3, [r7, #12]
 8003826:	e01c      	b.n	8003862 <vExtiStart+0xae>
			else if (exti==4)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d102      	bne.n	8003834 <vExtiStart+0x80>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 800382e:	230a      	movs	r3, #10
 8003830:	733b      	strb	r3, [r7, #12]
 8003832:	e016      	b.n	8003862 <vExtiStart+0xae>
			else if (exti==3)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d102      	bne.n	8003840 <vExtiStart+0x8c>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 800383a:	2309      	movs	r3, #9
 800383c:	733b      	strb	r3, [r7, #12]
 800383e:	e010      	b.n	8003862 <vExtiStart+0xae>
			else if (exti==2)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d102      	bne.n	800384c <vExtiStart+0x98>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
 8003846:	2308      	movs	r3, #8
 8003848:	733b      	strb	r3, [r7, #12]
 800384a:	e00a      	b.n	8003862 <vExtiStart+0xae>
			else if (exti==1)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <vExtiStart+0xa4>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8003852:	2307      	movs	r3, #7
 8003854:	733b      	strb	r3, [r7, #12]
 8003856:	e004      	b.n	8003862 <vExtiStart+0xae>
			else if (exti==0)
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <vExtiStart+0xae>
				NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 800385e:	2306      	movs	r3, #6
 8003860:	733b      	strb	r3, [r7, #12]
		    // Enable the EXTIxxxx Interrupt
		    NVIC_Init(&NVIC_InitStructure);
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fe52 	bl	8007510 <NVIC_Init>

		    // Connect EXTI LineXX to port
		    GPIO_EXTILineConfig(g_ExtiConfig[exti].port, exti);
 800386c:	7cfa      	ldrb	r2, [r7, #19]
 800386e:	4912      	ldr	r1, [pc, #72]	; (80038b8 <vExtiStart+0x104>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	7cfa      	ldrb	r2, [r7, #19]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f004 fc39 	bl	80080f8 <GPIO_EXTILineConfig>

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 10;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    for (exti=0;exti<MAX_NUMS_OF_EXTI;exti++)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	3301      	adds	r3, #1
 800388a:	74fb      	strb	r3, [r7, #19]
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d9a0      	bls.n	80037d4 <vExtiStart+0x20>
		    GPIO_EXTILineConfig(g_ExtiConfig[exti].port, exti);
		}
	}


    if (uExtiLines)	// if any of exti set
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <vExtiStart+0xfc>
    {
		// Configure EXTI Lines to generate an interrupt on rising or falling edge
		EXTI_InitStructure.EXTI_Line = uExtiLines;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	607b      	str	r3, [r7, #4]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800389c:	2300      	movs	r3, #0
 800389e:	723b      	strb	r3, [r7, #8]
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80038a0:	2310      	movs	r3, #16
 80038a2:	727b      	strb	r3, [r7, #9]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	72bb      	strb	r3, [r7, #10]
		EXTI_Init(&EXTI_InitStructure);
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fa2e 	bl	8007d0c <EXTI_Init>
    }
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200002ec 	.word	0x200002ec

080038bc <vExtiHandleInt>:
	// tbd
}

// Handle interrupt
void vExtiHandleInt(uint8_t line)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *pGPIO=0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

	if (g_ExtiConfig[line].state==ENABLE) // if interrupt handler enabled
 80038ca:	79fa      	ldrb	r2, [r7, #7]
 80038cc:	492b      	ldr	r1, [pc, #172]	; (800397c <vExtiHandleInt+0xc0>)
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3308      	adds	r3, #8
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d148      	bne.n	8003972 <vExtiHandleInt+0xb6>
	{
		if (g_ExtiConfig[line].cb!=0)		// and handler is set
 80038e0:	79fa      	ldrb	r2, [r7, #7]
 80038e2:	4926      	ldr	r1, [pc, #152]	; (800397c <vExtiHandleInt+0xc0>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3304      	adds	r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03d      	beq.n	8003972 <vExtiHandleInt+0xb6>
		{
			switch(g_ExtiConfig[line].port)
 80038f6:	79fa      	ldrb	r2, [r7, #7]
 80038f8:	4920      	ldr	r1, [pc, #128]	; (800397c <vExtiHandleInt+0xc0>)
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d007      	beq.n	800391a <vExtiHandleInt+0x5e>
 800390a:	2b02      	cmp	r3, #2
 800390c:	d008      	beq.n	8003920 <vExtiHandleInt+0x64>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <vExtiHandleInt+0x58>
				break;
			case GPIO_PortSourceGPIOC:
				pGPIO = GPIOC;
				break;
			default:
				break;
 8003912:	e008      	b.n	8003926 <vExtiHandleInt+0x6a>
		if (g_ExtiConfig[line].cb!=0)		// and handler is set
		{
			switch(g_ExtiConfig[line].port)
			{
			case GPIO_PortSourceGPIOA:
				pGPIO = GPIOA;
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <vExtiHandleInt+0xc4>)
 8003916:	60fb      	str	r3, [r7, #12]
				break;
 8003918:	e005      	b.n	8003926 <vExtiHandleInt+0x6a>
			case GPIO_PortSourceGPIOB:
				pGPIO = GPIOB;
 800391a:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <vExtiHandleInt+0xc8>)
 800391c:	60fb      	str	r3, [r7, #12]
				break;
 800391e:	e002      	b.n	8003926 <vExtiHandleInt+0x6a>
			case GPIO_PortSourceGPIOC:
				pGPIO = GPIOC;
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <vExtiHandleInt+0xcc>)
 8003922:	60fb      	str	r3, [r7, #12]
				break;
 8003924:	bf00      	nop
			default:
				break;
			}

			if (pGPIO)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <vExtiHandleInt+0xb6>
			{
				if (GPIO_ReadInputDataBit(pGPIO, (1 << line)) == 1)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2201      	movs	r2, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f004 fb8d 	bl	8008058 <GPIO_ReadInputDataBit>
 800393e:	4603      	mov	r3, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10b      	bne.n	800395c <vExtiHandleInt+0xa0>
					g_ExtiConfig[line].cb(LineState_High);
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	490d      	ldr	r1, [pc, #52]	; (800397c <vExtiHandleInt+0xc0>)
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3304      	adds	r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2001      	movs	r0, #1
 8003958:	4798      	blx	r3
				else
					g_ExtiConfig[line].cb(LineState_Low);
			}
		}
	}
}
 800395a:	e00a      	b.n	8003972 <vExtiHandleInt+0xb6>
			if (pGPIO)
			{
				if (GPIO_ReadInputDataBit(pGPIO, (1 << line)) == 1)
					g_ExtiConfig[line].cb(LineState_High);
				else
					g_ExtiConfig[line].cb(LineState_Low);
 800395c:	79fa      	ldrb	r2, [r7, #7]
 800395e:	4907      	ldr	r1, [pc, #28]	; (800397c <vExtiHandleInt+0xc0>)
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3304      	adds	r3, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2000      	movs	r0, #0
 8003970:	4798      	blx	r3
			}
		}
	}
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200002ec 	.word	0x200002ec
 8003980:	40010800 	.word	0x40010800
 8003984:	40010c00 	.word	0x40010c00
 8003988:	40011000 	.word	0x40011000

0800398c <EXTI0_IRQHandler>:
//
//This function handles External line 0 interrupt request.
//
//**************************************************************************
void EXTI0_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET)
 8003990:	2001      	movs	r0, #1
 8003992:	f004 fa2d 	bl	8007df0 <EXTI_GetITStatus>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <EXTI0_IRQHandler+0x16>
    {
        EXTI_ClearITPendingBit(EXTI_Line0);
 800399c:	2001      	movs	r0, #1
 800399e:	f004 fa4b 	bl	8007e38 <EXTI_ClearITPendingBit>
    }
    vExtiHandleInt(0);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f7ff ff8a 	bl	80038bc <vExtiHandleInt>
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line1) != RESET)
 80039b0:	2002      	movs	r0, #2
 80039b2:	f004 fa1d 	bl	8007df0 <EXTI_GetITStatus>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <EXTI1_IRQHandler+0x16>
    {
        EXTI_ClearITPendingBit(EXTI_Line1);
 80039bc:	2002      	movs	r0, #2
 80039be:	f004 fa3b 	bl	8007e38 <EXTI_ClearITPendingBit>
    }
    vExtiHandleInt(1);
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7ff ff7a 	bl	80038bc <vExtiHandleInt>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line2) != RESET)
 80039d0:	2004      	movs	r0, #4
 80039d2:	f004 fa0d 	bl	8007df0 <EXTI_GetITStatus>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <EXTI2_IRQHandler+0x16>
    {
        EXTI_ClearITPendingBit(EXTI_Line2);
 80039dc:	2004      	movs	r0, #4
 80039de:	f004 fa2b 	bl	8007e38 <EXTI_ClearITPendingBit>
    }
    vExtiHandleInt(2);
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7ff ff6a 	bl	80038bc <vExtiHandleInt>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}

080039ec <EXTI15_10_IRQHandler>:
//
//This function handles External lines 10 to 15 interrupt request.
//
//**************************************************************************
void EXTI15_10_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
	uint8_t line=0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	71fb      	strb	r3, [r7, #7]

    if (EXTI_GetITStatus(EXTI_Line10) != RESET)
 80039f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039fa:	f004 f9f9 	bl	8007df0 <EXTI_GetITStatus>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <EXTI15_10_IRQHandler+0x26>
    {
    	line=10;
 8003a04:	230a      	movs	r3, #10
 8003a06:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line10);
 8003a08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a0c:	f004 fa14 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003a10:	e044      	b.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    }
    else if (EXTI_GetITStatus(EXTI_Line11) != RESET)
 8003a12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a16:	f004 f9eb 	bl	8007df0 <EXTI_GetITStatus>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <EXTI15_10_IRQHandler+0x42>
    {
    	line=11;
 8003a20:	230b      	movs	r3, #11
 8003a22:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line11);
 8003a24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a28:	f004 fa06 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003a2c:	e036      	b.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    }
    else if (EXTI_GetITStatus(EXTI_Line12) != RESET)
 8003a2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a32:	f004 f9dd 	bl	8007df0 <EXTI_GetITStatus>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <EXTI15_10_IRQHandler+0x5e>
    {
    	line=12;
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line12);
 8003a40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a44:	f004 f9f8 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003a48:	e028      	b.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    }
    else if (EXTI_GetITStatus(EXTI_Line13) != RESET)
 8003a4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a4e:	f004 f9cf 	bl	8007df0 <EXTI_GetITStatus>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <EXTI15_10_IRQHandler+0x7a>
    {
    	line=13;
 8003a58:	230d      	movs	r3, #13
 8003a5a:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line13);
 8003a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a60:	f004 f9ea 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003a64:	e01a      	b.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    }
    else if (EXTI_GetITStatus(EXTI_Line14) != RESET)
 8003a66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a6a:	f004 f9c1 	bl	8007df0 <EXTI_GetITStatus>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <EXTI15_10_IRQHandler+0x96>
    {
    	line=14;
 8003a74:	230e      	movs	r3, #14
 8003a76:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line14);
 8003a78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a7c:	f004 f9dc 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003a80:	e00c      	b.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    }
    else if (EXTI_GetITStatus(EXTI_Line15) != RESET)
 8003a82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a86:	f004 f9b3 	bl	8007df0 <EXTI_GetITStatus>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <EXTI15_10_IRQHandler+0xb0>
    {
    	line=15;
 8003a90:	230f      	movs	r3, #15
 8003a92:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line15);
 8003a94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a98:	f004 f9ce 	bl	8007e38 <EXTI_ClearITPendingBit>
    }

    vExtiHandleInt(line);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff0c 	bl	80038bc <vExtiHandleInt>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <EXTI9_5_IRQHandler>:
//
//This function handles External lines 9 to 5 interrupt request.
//
//**************************************************************************
void EXTI9_5_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
	uint8_t line=0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71fb      	strb	r3, [r7, #7]

    if (EXTI_GetITStatus(EXTI_Line5) != RESET)
 8003ab6:	2020      	movs	r0, #32
 8003ab8:	f004 f99a 	bl	8007df0 <EXTI_GetITStatus>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <EXTI9_5_IRQHandler+0x22>
    {
    	line=5;
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line5);
 8003ac6:	2020      	movs	r0, #32
 8003ac8:	f004 f9b6 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003acc:	e032      	b.n	8003b34 <EXTI9_5_IRQHandler+0x88>
    }
    else if (EXTI_GetITStatus(EXTI_Line6) != RESET)
 8003ace:	2040      	movs	r0, #64	; 0x40
 8003ad0:	f004 f98e 	bl	8007df0 <EXTI_GetITStatus>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <EXTI9_5_IRQHandler+0x3a>
    {
    	line=6;
 8003ada:	2306      	movs	r3, #6
 8003adc:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line6);
 8003ade:	2040      	movs	r0, #64	; 0x40
 8003ae0:	f004 f9aa 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003ae4:	e026      	b.n	8003b34 <EXTI9_5_IRQHandler+0x88>
    }
    else if (EXTI_GetITStatus(EXTI_Line7) != RESET)
 8003ae6:	2080      	movs	r0, #128	; 0x80
 8003ae8:	f004 f982 	bl	8007df0 <EXTI_GetITStatus>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <EXTI9_5_IRQHandler+0x52>
    {
    	line=7;
 8003af2:	2307      	movs	r3, #7
 8003af4:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line7);
 8003af6:	2080      	movs	r0, #128	; 0x80
 8003af8:	f004 f99e 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003afc:	e01a      	b.n	8003b34 <EXTI9_5_IRQHandler+0x88>
    }
    else if (EXTI_GetITStatus(EXTI_Line8) != RESET)
 8003afe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b02:	f004 f975 	bl	8007df0 <EXTI_GetITStatus>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <EXTI9_5_IRQHandler+0x6e>
    {
    	line=8;
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line8);
 8003b10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b14:	f004 f990 	bl	8007e38 <EXTI_ClearITPendingBit>
 8003b18:	e00c      	b.n	8003b34 <EXTI9_5_IRQHandler+0x88>
    }
    else if (EXTI_GetITStatus(EXTI_Line9) != RESET)
 8003b1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b1e:	f004 f967 	bl	8007df0 <EXTI_GetITStatus>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <EXTI9_5_IRQHandler+0x88>
    {
    	line=9;
 8003b28:	2309      	movs	r3, #9
 8003b2a:	71fb      	strb	r3, [r7, #7]
        EXTI_ClearITPendingBit(EXTI_Line9);
 8003b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b30:	f004 f982 	bl	8007e38 <EXTI_ClearITPendingBit>
    }

    vExtiHandleInt(line);
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fec0 	bl	80038bc <vExtiHandleInt>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <EEPROM_LowLevel_Init>:
 * @brief  Initializes peripherals used by the I2C EEPROM driver.
 * @param  None
 * @retval None
 */
void EEPROM_LowLevel_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/*!< EEPROM_I2C_SCL_GPIO_CLK and EEPROM_I2C_SDA_GPIO_CLK Periph clock enable */
	RCC_APB2PeriphClockCmd(EEPROM_I2C_SCL_GPIO_CLK | EEPROM_I2C_SDA_GPIO_CLK, ENABLE);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2008      	movs	r0, #8
 8003b4e:	f004 ff6b 	bl	8008a28 <RCC_APB2PeriphClockCmd>

	/*!< EEPROM_I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(EEPROM_I2C_CLK, ENABLE);
 8003b52:	2101      	movs	r1, #1
 8003b54:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b58:	f004 ff84 	bl	8008a64 <RCC_APB1PeriphClockCmd>

	/*!< GPIO configuration */
	/*!< Configure EEPROM_I2C pins: SCL */
	GPIO_InitStructure.GPIO_Pin = EEPROM_I2C_SCL_PIN;
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003b60:	2303      	movs	r3, #3
 8003b62:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8003b64:	231c      	movs	r3, #28
 8003b66:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(EEPROM_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4831      	ldr	r0, [pc, #196]	; (8003c34 <EEPROM_LowLevel_Init+0xf0>)
 8003b6e:	f004 f9b7 	bl	8007ee0 <GPIO_Init>

	/*!< Configure EEPROM_I2C pins: SDA */
	GPIO_InitStructure.GPIO_Pin = EEPROM_I2C_SDA_PIN;
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(EEPROM_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	482e      	ldr	r0, [pc, #184]	; (8003c34 <EEPROM_LowLevel_Init+0xf0>)
 8003b7c:	f004 f9b0 	bl	8007ee0 <GPIO_Init>

	/* Configure and enable I2C DMA TX Channel interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EEPROM_I2C_DMA_TX_IRQn;
 8003b80:	2310      	movs	r3, #16
 8003b82:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EEPROM_I2C_DMA_PREPRIO;
 8003b84:	2303      	movs	r3, #3
 8003b86:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = EEPROM_I2C_DMA_SUBPRIO;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8003b90:	463b      	mov	r3, r7
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 fcbc 	bl	8007510 <NVIC_Init>

	/* Configure and enable I2C DMA RX Channel interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EEPROM_I2C_DMA_RX_IRQn;
 8003b98:	2311      	movs	r3, #17
 8003b9a:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EEPROM_I2C_DMA_PREPRIO;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = EEPROM_I2C_DMA_SUBPRIO;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&NVIC_InitStructure);
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fcb2 	bl	8007510 <NVIC_Init>

	/*!< I2C DMA TX and RX channels configuration */
	/* Enable the DMA clock */
	RCC_AHBPeriphClockCmd(EEPROM_I2C_DMA_CLK, ENABLE);
 8003bac:	2101      	movs	r1, #1
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f004 ff1c 	bl	80089ec <RCC_AHBPeriphClockCmd>

	/* I2C TX DMA Channel configuration */
	DMA_DeInit(EEPROM_I2C_DMA_CHANNEL_TX);
 8003bb4:	4820      	ldr	r0, [pc, #128]	; (8003c38 <EEPROM_LowLevel_Init+0xf4>)
 8003bb6:	f003 ff33 	bl	8007a20 <DMA_DeInit>
	EEPROMDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)EEPROM_I2C_DR_Address;
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <EEPROM_LowLevel_Init+0xfc>)
 8003bbe:	601a      	str	r2, [r3, #0]
	EEPROMDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)0;   /* This parameter will be configured durig communication */
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	605a      	str	r2, [r3, #4]
	EEPROMDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bc8:	2210      	movs	r2, #16
 8003bca:	609a      	str	r2, [r3, #8]
	EEPROMDMA_InitStructure.DMA_BufferSize = 0xFFFF;            /* This parameter will be configured durig communication */
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd2:	60da      	str	r2, [r3, #12]
	EEPROMDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
	EEPROMDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	615a      	str	r2, [r3, #20]
	EEPROMDMA_InitStructure.DMA_PeripheralDataSize = DMA_MemoryDataSize_Byte;
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
	EEPROMDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	61da      	str	r2, [r3, #28]
	EEPROMDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	621a      	str	r2, [r3, #32]
	EEPROMDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bf4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
	EEPROMDMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
	DMA_Init(EEPROM_I2C_DMA_CHANNEL_TX, &EEPROMDMA_InitStructure);
 8003c00:	490e      	ldr	r1, [pc, #56]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003c02:	480d      	ldr	r0, [pc, #52]	; (8003c38 <EEPROM_LowLevel_Init+0xf4>)
 8003c04:	f003 ffc8 	bl	8007b98 <DMA_Init>

	/* I2C RX DMA Channel configuration */
	DMA_DeInit(EEPROM_I2C_DMA_CHANNEL_RX);
 8003c08:	480e      	ldr	r0, [pc, #56]	; (8003c44 <EEPROM_LowLevel_Init+0x100>)
 8003c0a:	f003 ff09 	bl	8007a20 <DMA_DeInit>
	DMA_Init(EEPROM_I2C_DMA_CHANNEL_RX, &EEPROMDMA_InitStructure);
 8003c0e:	490b      	ldr	r1, [pc, #44]	; (8003c3c <EEPROM_LowLevel_Init+0xf8>)
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <EEPROM_LowLevel_Init+0x100>)
 8003c12:	f003 ffc1 	bl	8007b98 <DMA_Init>

	/* Enable the DMA Channels Interrupts */
	DMA_ITConfig(EEPROM_I2C_DMA_CHANNEL_TX, DMA_IT_TC, ENABLE);
 8003c16:	2201      	movs	r2, #1
 8003c18:	2102      	movs	r1, #2
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <EEPROM_LowLevel_Init+0xf4>)
 8003c1c:	f004 f816 	bl	8007c4c <DMA_ITConfig>
	DMA_ITConfig(EEPROM_I2C_DMA_CHANNEL_RX, DMA_IT_TC, ENABLE);
 8003c20:	2201      	movs	r2, #1
 8003c22:	2102      	movs	r1, #2
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <EEPROM_LowLevel_Init+0x100>)
 8003c26:	f004 f811 	bl	8007c4c <DMA_ITConfig>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40010c00 	.word	0x40010c00
 8003c38:	4002006c 	.word	0x4002006c
 8003c3c:	200025a4 	.word	0x200025a4
 8003c40:	40005410 	.word	0x40005410
 8003c44:	40020080 	.word	0x40020080

08003c48 <EEPROM_LowLevel_DMAConfig>:
 * @brief  Initializes DMA channel used by the I2C EEPROM driver.
 * @param  None
 * @retval None
 */
void EEPROM_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
	/* Initialize the DMA with the new parameters */
	if (Direction == EEPROM_DIRECTION_TX)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <EEPROM_LowLevel_DMAConfig+0x2e>
	{
		/* Configure the DMA Tx Channel with the buffer address and the buffer size */
		EEPROMDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8003c5a:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6053      	str	r3, [r2, #4]
		EEPROMDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c62:	2210      	movs	r2, #16
 8003c64:	609a      	str	r2, [r3, #8]
		EEPROMDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;
 8003c66:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
		DMA_Init(EEPROM_I2C_DMA_CHANNEL_TX, &EEPROMDMA_InitStructure);
 8003c6c:	490a      	ldr	r1, [pc, #40]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c6e:	480b      	ldr	r0, [pc, #44]	; (8003c9c <EEPROM_LowLevel_DMAConfig+0x54>)
 8003c70:	f003 ff92 	bl	8007b98 <DMA_Init>
		EEPROMDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
		EEPROMDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
		EEPROMDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;
		DMA_Init(EEPROM_I2C_DMA_CHANNEL_RX, &EEPROMDMA_InitStructure);
	}
}
 8003c74:	e00c      	b.n	8003c90 <EEPROM_LowLevel_DMAConfig+0x48>
		DMA_Init(EEPROM_I2C_DMA_CHANNEL_TX, &EEPROMDMA_InitStructure);
	}
	else
	{
		/* Configure the DMA Rx Channel with the buffer address and the buffer size */
		EEPROMDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8003c76:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6053      	str	r3, [r2, #4]
		EEPROMDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
		EEPROMDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
		DMA_Init(EEPROM_I2C_DMA_CHANNEL_RX, &EEPROMDMA_InitStructure);
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <EEPROM_LowLevel_DMAConfig+0x50>)
 8003c8a:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <EEPROM_LowLevel_DMAConfig+0x58>)
 8003c8c:	f003 ff84 	bl	8007b98 <DMA_Init>
	}
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200025a4 	.word	0x200025a4
 8003c9c:	4002006c 	.word	0x4002006c
 8003ca0:	40020080 	.word	0x40020080

08003ca4 <EEPROM_Init>:
 * @brief  Initializes peripherals used by the I2C EEPROM driver.
 * @param  None
 * @retval None
 */
void EEPROM_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
	I2C_InitTypeDef  I2C_InitStructure;

	EEPROM_LowLevel_Init();
 8003caa:	f7ff ff4b 	bl	8003b44 <EEPROM_LowLevel_Init>

	/*!< I2C configuration */
	/* EEPROM_I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8003cb2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003cb6:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
 8003cb8:	23a0      	movs	r3, #160	; 0xa0
 8003cba:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8003cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc0:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cc6:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <EEPROM_Init+0x50>)
 8003cca:	603b      	str	r3, [r7, #0]

	/* EEPROM_I2C Peripheral Enable */
	I2C_Cmd(EEPROM_I2C, ENABLE);
 8003ccc:	2101      	movs	r1, #1
 8003cce:	480a      	ldr	r0, [pc, #40]	; (8003cf8 <EEPROM_Init+0x54>)
 8003cd0:	f004 fb16 	bl	8008300 <I2C_Cmd>
	/* Apply EEPROM_I2C configuration after enabling it */
	I2C_Init(EEPROM_I2C, &I2C_InitStructure);
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4807      	ldr	r0, [pc, #28]	; (8003cf8 <EEPROM_Init+0x54>)
 8003cda:	f004 fa4f 	bl	800817c <I2C_Init>

	/* Enable the EEPROM_I2C peripheral DMA requests */
	I2C_DMACmd(EEPROM_I2C, ENABLE);
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <EEPROM_Init+0x54>)
 8003ce2:	f004 fb2d 	bl	8008340 <I2C_DMACmd>

#if defined (EEPROM_M24C64_32)
	/*!< Select the EEPROM address according to the state of E0, E1, E2 pins */
	EEPROMAddress = EEPROM_HW_ADDRESS;
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <EEPROM_Init+0x58>)
 8003ce8:	22a0      	movs	r2, #160	; 0xa0
 8003cea:	801a      	strh	r2, [r3, #0]
#endif /*!< EEPROM_M24C64_32 */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	000493e0 	.word	0x000493e0
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	200003ac 	.word	0x200003ac

08003d00 <EEPROM_ReadBuffer>:
 *
 * @retval EEPROM_OK (0) if operation is correctly performed, else return value
 *         different from EEPROM_OK (0) or the timeout user callback.
 */
uint32_t EEPROM_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	817b      	strh	r3, [r7, #10]
	/* Set the pointer to the Number of data to be read. This pointer will be used
      by the DMA Transfer Completer interrupt Handler in order to reset the
      variable to 0. User should check on this variable in order to know if the
      DMA transfer has been complete or not. */
	EEPROMDataReadPointer = NumByteToRead;
 8003d0e:	4aa5      	ldr	r2, [pc, #660]	; (8003fa4 <EEPROM_ReadBuffer+0x2a4>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6013      	str	r3, [r2, #0]

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8003d14:	4ba4      	ldr	r3, [pc, #656]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d16:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003d1a:	601a      	str	r2, [r3, #0]
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 8003d1c:	e00a      	b.n	8003d34 <EEPROM_ReadBuffer+0x34>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003d1e:	4ba2      	ldr	r3, [pc, #648]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	49a0      	ldr	r1, [pc, #640]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d26:	600a      	str	r2, [r1, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <EEPROM_ReadBuffer+0x34>
 8003d2c:	f000 fc90 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003d30:	4603      	mov	r3, r0
 8003d32:	e132      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
      DMA transfer has been complete or not. */
	EEPROMDataReadPointer = NumByteToRead;

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 8003d34:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003d38:	489c      	ldr	r0, [pc, #624]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003d3a:	f004 fc0d 	bl	8008558 <I2C_GetFlagStatus>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ec      	bne.n	8003d1e <EEPROM_ReadBuffer+0x1e>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send START condition */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);
 8003d44:	2101      	movs	r1, #1
 8003d46:	4899      	ldr	r0, [pc, #612]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003d48:	f004 fb3a 	bl	80083c0 <I2C_GenerateSTART>

	/*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003d4c:	4b96      	ldr	r3, [pc, #600]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d52:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8003d54:	e00a      	b.n	8003d6c <EEPROM_ReadBuffer+0x6c>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003d56:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	4992      	ldr	r1, [pc, #584]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d5e:	600a      	str	r2, [r1, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d103      	bne.n	8003d6c <EEPROM_ReadBuffer+0x6c>
 8003d64:	f000 fc74 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	e116      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	/*!< Send START condition */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);

	/*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8003d6c:	4990      	ldr	r1, [pc, #576]	; (8003fb0 <EEPROM_ReadBuffer+0x2b0>)
 8003d6e:	488f      	ldr	r0, [pc, #572]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003d70:	f004 fbc2 	bl	80084f8 <I2C_CheckEvent>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ed      	beq.n	8003d56 <EEPROM_ReadBuffer+0x56>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send EEPROM address for write */
	I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Transmitter);
 8003d7a:	4b8e      	ldr	r3, [pc, #568]	; (8003fb4 <EEPROM_ReadBuffer+0x2b4>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2200      	movs	r2, #0
 8003d84:	4619      	mov	r1, r3
 8003d86:	4889      	ldr	r0, [pc, #548]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003d88:	f004 fb98 	bl	80084bc <I2C_Send7bitAddress>

	/*!< Test on EV6 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003d8c:	4b86      	ldr	r3, [pc, #536]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d92:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8003d94:	e00a      	b.n	8003dac <EEPROM_ReadBuffer+0xac>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003d96:	4b84      	ldr	r3, [pc, #528]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	4982      	ldr	r1, [pc, #520]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003d9e:	600a      	str	r2, [r1, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <EEPROM_ReadBuffer+0xac>
 8003da4:	f000 fc54 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003da8:	4603      	mov	r3, r0
 8003daa:	e0f6      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	/*!< Send EEPROM address for write */
	I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Transmitter);

	/*!< Test on EV6 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8003dac:	4982      	ldr	r1, [pc, #520]	; (8003fb8 <EEPROM_ReadBuffer+0x2b8>)
 8003dae:	487f      	ldr	r0, [pc, #508]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003db0:	f004 fba2 	bl	80084f8 <I2C_CheckEvent>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ed      	beq.n	8003d96 <EEPROM_ReadBuffer+0x96>
	I2C_SendData(EEPROM_I2C, ReadAddr);

#elif defined (EEPROM_M24C64_32)

	/*!< Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(EEPROM_I2C, (uint8_t)((ReadAddr & 0xFF00) >> 8));
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4879      	ldr	r0, [pc, #484]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003dc6:	f004 fb5b 	bl	8008480 <I2C_SendData>

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003dca:	4b77      	ldr	r3, [pc, #476]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd0:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8003dd2:	e00a      	b.n	8003dea <EEPROM_ReadBuffer+0xea>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003dd4:	4b74      	ldr	r3, [pc, #464]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	4973      	ldr	r1, [pc, #460]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003ddc:	600a      	str	r2, [r1, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <EEPROM_ReadBuffer+0xea>
 8003de2:	f000 fc35 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003de6:	4603      	mov	r3, r0
 8003de8:	e0d7      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	/*!< Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(EEPROM_I2C, (uint8_t)((ReadAddr & 0xFF00) >> 8));

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8003dea:	4974      	ldr	r1, [pc, #464]	; (8003fbc <EEPROM_ReadBuffer+0x2bc>)
 8003dec:	486f      	ldr	r0, [pc, #444]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003dee:	f004 fb83 	bl	80084f8 <I2C_CheckEvent>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ed      	beq.n	8003dd4 <EEPROM_ReadBuffer+0xd4>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send the EEPROM's internal address to read from: LSB of the address */
	I2C_SendData(EEPROM_I2C, (uint8_t)(ReadAddr & 0x00FF));
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	486b      	ldr	r0, [pc, #428]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003e00:	f004 fb3e 	bl	8008480 <I2C_SendData>

#endif /*!< EEPROM_M24C08 */

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003e04:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e0a:	601a      	str	r2, [r3, #0]
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BTF) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <EEPROM_ReadBuffer+0x124>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003e0e:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	1e5a      	subs	r2, r3, #1
 8003e14:	4964      	ldr	r1, [pc, #400]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e16:	600a      	str	r2, [r1, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <EEPROM_ReadBuffer+0x124>
 8003e1c:	f000 fc18 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003e20:	4603      	mov	r3, r0
 8003e22:	e0ba      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>

#endif /*!< EEPROM_M24C08 */

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BTF) == RESET)
 8003e24:	4966      	ldr	r1, [pc, #408]	; (8003fc0 <EEPROM_ReadBuffer+0x2c0>)
 8003e26:	4861      	ldr	r0, [pc, #388]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003e28:	f004 fb96 	bl	8008558 <I2C_GetFlagStatus>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ed      	beq.n	8003e0e <EEPROM_ReadBuffer+0x10e>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send STRAT condition a second time */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);
 8003e32:	2101      	movs	r1, #1
 8003e34:	485d      	ldr	r0, [pc, #372]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003e36:	f004 fac3 	bl	80083c0 <I2C_GenerateSTART>

	/*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e40:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8003e42:	e00a      	b.n	8003e5a <EEPROM_ReadBuffer+0x15a>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003e44:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	4957      	ldr	r1, [pc, #348]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e4c:	600a      	str	r2, [r1, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <EEPROM_ReadBuffer+0x15a>
 8003e52:	f000 fbfd 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003e56:	4603      	mov	r3, r0
 8003e58:	e09f      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	/*!< Send STRAT condition a second time */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);

	/*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8003e5a:	4955      	ldr	r1, [pc, #340]	; (8003fb0 <EEPROM_ReadBuffer+0x2b0>)
 8003e5c:	4853      	ldr	r0, [pc, #332]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003e5e:	f004 fb4b 	bl	80084f8 <I2C_CheckEvent>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ed      	beq.n	8003e44 <EEPROM_ReadBuffer+0x144>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send EEPROM address for read */
	I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Receiver);
 8003e68:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <EEPROM_ReadBuffer+0x2b4>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2201      	movs	r2, #1
 8003e72:	4619      	mov	r1, r3
 8003e74:	484d      	ldr	r0, [pc, #308]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003e76:	f004 fb21 	bl	80084bc <I2C_Send7bitAddress>

	/* If number of data to be read is 1, then DMA couldn't be used */
	/* One Byte Master Reception procedure (POLLING) ---------------------------*/
	if ((uint16_t)(*NumByteToRead) < 2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d864      	bhi.n	8003f4c <EEPROM_ReadBuffer+0x24c>
	{
		/* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e88:	601a      	str	r2, [r3, #0]
		while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_ADDR) == RESET)
 8003e8a:	e00a      	b.n	8003ea2 <EEPROM_ReadBuffer+0x1a2>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	4945      	ldr	r1, [pc, #276]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003e94:	600a      	str	r2, [r1, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <EEPROM_ReadBuffer+0x1a2>
 8003e9a:	f000 fbd9 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	e07b      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	/* One Byte Master Reception procedure (POLLING) ---------------------------*/
	if ((uint16_t)(*NumByteToRead) < 2)
	{
		/* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
		while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_ADDR) == RESET)
 8003ea2:	4948      	ldr	r1, [pc, #288]	; (8003fc4 <EEPROM_ReadBuffer+0x2c4>)
 8003ea4:	4841      	ldr	r0, [pc, #260]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003ea6:	f004 fb57 	bl	8008558 <I2C_GetFlagStatus>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ed      	beq.n	8003e8c <EEPROM_ReadBuffer+0x18c>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
		}

		/*!< Disable Acknowledgement */
		I2C_AcknowledgeConfig(EEPROM_I2C, DISABLE);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	483e      	ldr	r0, [pc, #248]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003eb4:	f004 fac4 	bl	8008440 <I2C_AcknowledgeConfig>

		/* Call User callback for critical section start (should typically disable interrupts) */
		EEPROM_EnterCriticalSection_UserCallback();
 8003eb8:	f000 fbce 	bl	8004658 <EEPROM_EnterCriticalSection_UserCallback>

		/* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
		(void)EEPROM_I2C->SR2;
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003ebe:	8b1b      	ldrh	r3, [r3, #24]

		/*!< Send STOP Condition */
		I2C_GenerateSTOP(EEPROM_I2C, ENABLE);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	483a      	ldr	r0, [pc, #232]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003ec4:	f004 fa9c 	bl	8008400 <I2C_GenerateSTOP>

		/* Call User callback for critical section end (should typically re-enable interrupts) */
		EEPROM_ExitCriticalSection_UserCallback();
 8003ec8:	f000 fbce 	bl	8004668 <EEPROM_ExitCriticalSection_UserCallback>

		/* Wait for the byte to be received */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003ece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ed2:	601a      	str	r2, [r3, #0]
		while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_RXNE) == RESET)
 8003ed4:	e00a      	b.n	8003eec <EEPROM_ReadBuffer+0x1ec>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	4932      	ldr	r1, [pc, #200]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003ede:	600a      	str	r2, [r1, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <EEPROM_ReadBuffer+0x1ec>
 8003ee4:	f000 fbb4 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	e056      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
		/* Call User callback for critical section end (should typically re-enable interrupts) */
		EEPROM_ExitCriticalSection_UserCallback();

		/* Wait for the byte to be received */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
		while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_RXNE) == RESET)
 8003eec:	4936      	ldr	r1, [pc, #216]	; (8003fc8 <EEPROM_ReadBuffer+0x2c8>)
 8003eee:	482f      	ldr	r0, [pc, #188]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003ef0:	f004 fb32 	bl	8008558 <I2C_GetFlagStatus>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ed      	beq.n	8003ed6 <EEPROM_ReadBuffer+0x1d6>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
		}

		/*!< Read the byte received from the EEPROM */
		*pBuffer = I2C_ReceiveData(EEPROM_I2C);
 8003efa:	482c      	ldr	r0, [pc, #176]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003efc:	f004 fad0 	bl	80084a0 <I2C_ReceiveData>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]

		/*!< Decrement the read bytes counter */
		(uint16_t)(*NumByteToRead)--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	801a      	strh	r2, [r3, #0]

		/* Wait to make sure that STOP control bit has been cleared */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f1a:	601a      	str	r2, [r3, #0]
		while(EEPROM_I2C->CR1 & I2C_CR1_STOP)
 8003f1c:	e00a      	b.n	8003f34 <EEPROM_ReadBuffer+0x234>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	4920      	ldr	r1, [pc, #128]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <EEPROM_ReadBuffer+0x234>
 8003f2c:	f000 fb90 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003f30:	4603      	mov	r3, r0
 8003f32:	e032      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
		/*!< Decrement the read bytes counter */
		(uint16_t)(*NumByteToRead)--;

		/* Wait to make sure that STOP control bit has been cleared */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
		while(EEPROM_I2C->CR1 & I2C_CR1_STOP)
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ed      	bne.n	8003f1e <EEPROM_ReadBuffer+0x21e>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
		}

		/*!< Re-Enable Acknowledgement to be ready for another reception */
		I2C_AcknowledgeConfig(EEPROM_I2C, ENABLE);
 8003f42:	2101      	movs	r1, #1
 8003f44:	4819      	ldr	r0, [pc, #100]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003f46:	f004 fa7b 	bl	8008440 <I2C_AcknowledgeConfig>
 8003f4a:	e025      	b.n	8003f98 <EEPROM_ReadBuffer+0x298>
	}
	else/* More than one Byte Master Reception procedure (DMA) -----------------*/
	{
		/*!< Test on EV6 and clear it */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8003f4c:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f52:	601a      	str	r2, [r3, #0]
		while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8003f54:	e00a      	b.n	8003f6c <EEPROM_ReadBuffer+0x26c>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	4912      	ldr	r1, [pc, #72]	; (8003fa8 <EEPROM_ReadBuffer+0x2a8>)
 8003f5e:	600a      	str	r2, [r1, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <EEPROM_ReadBuffer+0x26c>
 8003f64:	f000 fb74 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	e016      	b.n	8003f9a <EEPROM_ReadBuffer+0x29a>
	}
	else/* More than one Byte Master Reception procedure (DMA) -----------------*/
	{
		/*!< Test on EV6 and clear it */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
		while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8003f6c:	4917      	ldr	r1, [pc, #92]	; (8003fcc <EEPROM_ReadBuffer+0x2cc>)
 8003f6e:	480f      	ldr	r0, [pc, #60]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003f70:	f004 fac2 	bl	80084f8 <I2C_CheckEvent>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ed      	beq.n	8003f56 <EEPROM_ReadBuffer+0x256>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
		}

		/* Configure the DMA Rx Channel with the buffer address and the buffer size */
		EEPROM_LowLevel_DMAConfig((uint32_t)pBuffer, (uint16_t)(*NumByteToRead), EEPROM_DIRECTION_RX);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7ff fe60 	bl	8003c48 <EEPROM_LowLevel_DMAConfig>

		/* Inform the DMA that the next End Of Transfer Signal will be the last one */
		I2C_DMALastTransferCmd(EEPROM_I2C, ENABLE);
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4808      	ldr	r0, [pc, #32]	; (8003fac <EEPROM_ReadBuffer+0x2ac>)
 8003f8c:	f004 f9f8 	bl	8008380 <I2C_DMALastTransferCmd>

		/* Enable the DMA Rx Channel */
		DMA_Cmd(EEPROM_I2C_DMA_CHANNEL_RX, ENABLE);
 8003f90:	2101      	movs	r1, #1
 8003f92:	480f      	ldr	r0, [pc, #60]	; (8003fd0 <EEPROM_ReadBuffer+0x2d0>)
 8003f94:	f003 fe3e 	bl	8007c14 <DMA_Cmd>
	}

	/* If all operations OK, return EEPROM_OK (0) */
	return EEPROM_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200025a0 	.word	0x200025a0
 8003fa8:	200000f4 	.word	0x200000f4
 8003fac:	40005400 	.word	0x40005400
 8003fb0:	00030001 	.word	0x00030001
 8003fb4:	200003ac 	.word	0x200003ac
 8003fb8:	00070082 	.word	0x00070082
 8003fbc:	00070084 	.word	0x00070084
 8003fc0:	10000004 	.word	0x10000004
 8003fc4:	10000002 	.word	0x10000002
 8003fc8:	10000040 	.word	0x10000040
 8003fcc:	00030002 	.word	0x00030002
 8003fd0:	40020080 	.word	0x40020080

08003fd4 <EEPROM_WritePage>:
 *
 * @retval EEPROM_OK (0) if operation is correctly performed, else return value
 *         different from EEPROM_OK (0) or the timeout user callback.
 */
uint32_t EEPROM_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint8_t* NumByteToWrite)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	817b      	strh	r3, [r7, #10]
	/* Set the pointer to the Number of data to be written. This pointer will be used
      by the DMA Transfer Completer interrupt Handler in order to reset the
      variable to 0. User should check on this variable in order to know if the
      DMA transfer has been complete or not. */
	EEPROMDataWritePointer = NumByteToWrite;
 8003fe2:	4a53      	ldr	r2, [pc, #332]	; (8004130 <EEPROM_WritePage+0x15c>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6013      	str	r3, [r2, #0]

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8003fe8:	4b52      	ldr	r3, [pc, #328]	; (8004134 <EEPROM_WritePage+0x160>)
 8003fea:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003fee:	601a      	str	r2, [r3, #0]
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 8003ff0:	e00a      	b.n	8004008 <EEPROM_WritePage+0x34>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8003ff2:	4b50      	ldr	r3, [pc, #320]	; (8004134 <EEPROM_WritePage+0x160>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	494e      	ldr	r1, [pc, #312]	; (8004134 <EEPROM_WritePage+0x160>)
 8003ffa:	600a      	str	r2, [r1, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <EEPROM_WritePage+0x34>
 8004000:	f000 fb26 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8004004:	4603      	mov	r3, r0
 8004006:	e08e      	b.n	8004126 <EEPROM_WritePage+0x152>
      DMA transfer has been complete or not. */
	EEPROMDataWritePointer = NumByteToWrite;

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 8004008:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800400c:	484a      	ldr	r0, [pc, #296]	; (8004138 <EEPROM_WritePage+0x164>)
 800400e:	f004 faa3 	bl	8008558 <I2C_GetFlagStatus>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ec      	bne.n	8003ff2 <EEPROM_WritePage+0x1e>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send START condition */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);
 8004018:	2101      	movs	r1, #1
 800401a:	4847      	ldr	r0, [pc, #284]	; (8004138 <EEPROM_WritePage+0x164>)
 800401c:	f004 f9d0 	bl	80083c0 <I2C_GenerateSTART>

	/*!< Test on EV5 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8004020:	4b44      	ldr	r3, [pc, #272]	; (8004134 <EEPROM_WritePage+0x160>)
 8004022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004026:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8004028:	e00a      	b.n	8004040 <EEPROM_WritePage+0x6c>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 800402a:	4b42      	ldr	r3, [pc, #264]	; (8004134 <EEPROM_WritePage+0x160>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	4940      	ldr	r1, [pc, #256]	; (8004134 <EEPROM_WritePage+0x160>)
 8004032:	600a      	str	r2, [r1, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <EEPROM_WritePage+0x6c>
 8004038:	f000 fb0a 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800403c:	4603      	mov	r3, r0
 800403e:	e072      	b.n	8004126 <EEPROM_WritePage+0x152>
	/*!< Send START condition */
	I2C_GenerateSTART(EEPROM_I2C, ENABLE);

	/*!< Test on EV5 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8004040:	493e      	ldr	r1, [pc, #248]	; (800413c <EEPROM_WritePage+0x168>)
 8004042:	483d      	ldr	r0, [pc, #244]	; (8004138 <EEPROM_WritePage+0x164>)
 8004044:	f004 fa58 	bl	80084f8 <I2C_CheckEvent>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ed      	beq.n	800402a <EEPROM_WritePage+0x56>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send EEPROM address for write */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <EEPROM_WritePage+0x160>)
 8004050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004054:	601a      	str	r2, [r3, #0]
	I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Transmitter);
 8004056:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <EEPROM_WritePage+0x16c>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2200      	movs	r2, #0
 8004060:	4619      	mov	r1, r3
 8004062:	4835      	ldr	r0, [pc, #212]	; (8004138 <EEPROM_WritePage+0x164>)
 8004064:	f004 fa2a 	bl	80084bc <I2C_Send7bitAddress>

	/*!< Test on EV6 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <EEPROM_WritePage+0x160>)
 800406a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800406e:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8004070:	e00a      	b.n	8004088 <EEPROM_WritePage+0xb4>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <EEPROM_WritePage+0x160>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	492e      	ldr	r1, [pc, #184]	; (8004134 <EEPROM_WritePage+0x160>)
 800407a:	600a      	str	r2, [r1, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <EEPROM_WritePage+0xb4>
 8004080:	f000 fae6 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8004084:	4603      	mov	r3, r0
 8004086:	e04e      	b.n	8004126 <EEPROM_WritePage+0x152>
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Transmitter);

	/*!< Test on EV6 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8004088:	492e      	ldr	r1, [pc, #184]	; (8004144 <EEPROM_WritePage+0x170>)
 800408a:	482b      	ldr	r0, [pc, #172]	; (8004138 <EEPROM_WritePage+0x164>)
 800408c:	f004 fa34 	bl	80084f8 <I2C_CheckEvent>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ed      	beq.n	8004072 <EEPROM_WritePage+0x9e>
	I2C_SendData(EEPROM_I2C, WriteAddr);

#elif defined(EEPROM_M24C64_32)

	/*!< Send the EEPROM's internal address to write to : MSB of the address first */
	I2C_SendData(EEPROM_I2C, (uint8_t)((WriteAddr & 0xFF00) >> 8));
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	b29b      	uxth	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	4619      	mov	r1, r3
 80040a0:	4825      	ldr	r0, [pc, #148]	; (8004138 <EEPROM_WritePage+0x164>)
 80040a2:	f004 f9ed 	bl	8008480 <I2C_SendData>

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <EEPROM_WritePage+0x160>)
 80040a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040ac:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80040ae:	e00a      	b.n	80040c6 <EEPROM_WritePage+0xf2>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <EEPROM_WritePage+0x160>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	491f      	ldr	r1, [pc, #124]	; (8004134 <EEPROM_WritePage+0x160>)
 80040b8:	600a      	str	r2, [r1, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <EEPROM_WritePage+0xf2>
 80040be:	f000 fac7 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80040c2:	4603      	mov	r3, r0
 80040c4:	e02f      	b.n	8004126 <EEPROM_WritePage+0x152>
	/*!< Send the EEPROM's internal address to write to : MSB of the address first */
	I2C_SendData(EEPROM_I2C, (uint8_t)((WriteAddr & 0xFF00) >> 8));

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80040c6:	4920      	ldr	r1, [pc, #128]	; (8004148 <EEPROM_WritePage+0x174>)
 80040c8:	481b      	ldr	r0, [pc, #108]	; (8004138 <EEPROM_WritePage+0x164>)
 80040ca:	f004 fa15 	bl	80084f8 <I2C_CheckEvent>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ed      	beq.n	80040b0 <EEPROM_WritePage+0xdc>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/*!< Send the EEPROM's internal address to write to : LSB of the address */
	I2C_SendData(EEPROM_I2C, (uint8_t)(WriteAddr & 0x00FF));
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	4619      	mov	r1, r3
 80040da:	4817      	ldr	r0, [pc, #92]	; (8004138 <EEPROM_WritePage+0x164>)
 80040dc:	f004 f9d0 	bl	8008480 <I2C_SendData>

#endif /*!< EEPROM_M24C08 */

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <EEPROM_WritePage+0x160>)
 80040e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e6:	601a      	str	r2, [r3, #0]
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80040e8:	e00a      	b.n	8004100 <EEPROM_WritePage+0x12c>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <EEPROM_WritePage+0x160>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	4910      	ldr	r1, [pc, #64]	; (8004134 <EEPROM_WritePage+0x160>)
 80040f2:	600a      	str	r2, [r1, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <EEPROM_WritePage+0x12c>
 80040f8:	f000 faaa 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80040fc:	4603      	mov	r3, r0
 80040fe:	e012      	b.n	8004126 <EEPROM_WritePage+0x152>

#endif /*!< EEPROM_M24C08 */

	/*!< Test on EV8 and clear it */
	EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
	while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004100:	4911      	ldr	r1, [pc, #68]	; (8004148 <EEPROM_WritePage+0x174>)
 8004102:	480d      	ldr	r0, [pc, #52]	; (8004138 <EEPROM_WritePage+0x164>)
 8004104:	f004 f9f8 	bl	80084f8 <I2C_CheckEvent>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0ed      	beq.n	80040ea <EEPROM_WritePage+0x116>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
	}

	/* Configure the DMA Tx Channel with the buffer address and the buffer size */
	EEPROM_LowLevel_DMAConfig((uint32_t)pBuffer, (uint8_t)(*NumByteToWrite), EEPROM_DIRECTION_TX);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2200      	movs	r2, #0
 8004116:	4619      	mov	r1, r3
 8004118:	f7ff fd96 	bl	8003c48 <EEPROM_LowLevel_DMAConfig>

	/* Enable the DMA Tx Channel */
	DMA_Cmd(EEPROM_I2C_DMA_CHANNEL_TX, ENABLE);
 800411c:	2101      	movs	r1, #1
 800411e:	480b      	ldr	r0, [pc, #44]	; (800414c <EEPROM_WritePage+0x178>)
 8004120:	f003 fd78 	bl	8007c14 <DMA_Cmd>

	/* If all operations OK, return EEPROM_OK (0) */
	return EEPROM_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000259c 	.word	0x2000259c
 8004134:	200000f4 	.word	0x200000f4
 8004138:	40005400 	.word	0x40005400
 800413c:	00030001 	.word	0x00030001
 8004140:	200003ac 	.word	0x200003ac
 8004144:	00070082 	.word	0x00070082
 8004148:	00070084 	.word	0x00070084
 800414c:	4002006c 	.word	0x4002006c

08004150 <EEPROM_WriteBuffer>:
 * @param  WriteAddr : EEPROM's internal address to write to.
 * @param  NumByteToWrite : number of bytes to write to the EEPROM.
 * @retval None
 */
void EEPROM_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	803b      	strh	r3, [r7, #0]
	uint8_t NumOfPage = 0, NumOfSingle = 0, count = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	2300      	movs	r3, #0
 8004166:	73bb      	strb	r3, [r7, #14]
 8004168:	2300      	movs	r3, #0
 800416a:	737b      	strb	r3, [r7, #13]
	uint16_t Addr = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	817b      	strh	r3, [r7, #10]

	Addr = WriteAddr % EEPROM_PAGESIZE;
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	817b      	strh	r3, [r7, #10]
	count = EEPROM_PAGESIZE - Addr;
 8004178:	897b      	ldrh	r3, [r7, #10]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f1c3 0320 	rsb	r3, r3, #32
 8004180:	737b      	strb	r3, [r7, #13]
	NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 8004182:	883b      	ldrh	r3, [r7, #0]
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	b29b      	uxth	r3, r3
 8004188:	73fb      	strb	r3, [r7, #15]
	NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 800418a:	883b      	ldrh	r3, [r7, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	73bb      	strb	r3, [r7, #14]

	/*!< If WriteAddr is EEPROM_PAGESIZE aligned  */
	if(Addr == 0)
 8004194:	897b      	ldrh	r3, [r7, #10]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d170      	bne.n	800427c <EEPROM_WriteBuffer+0x12c>
	{
		/*!< If NumByteToWrite < EEPROM_PAGESIZE */
		if(NumOfPage == 0)
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d144      	bne.n	800422a <EEPROM_WriteBuffer+0xda>
		{
			/* Store the number of data to be written */
			EEPROMDataNum = NumOfSingle;
 80041a0:	4a98      	ldr	r2, [pc, #608]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80041a2:	7bbb      	ldrb	r3, [r7, #14]
 80041a4:	7013      	strb	r3, [r2, #0]
			/* Start writing data */
			EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	4a96      	ldr	r2, [pc, #600]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff11 	bl	8003fd4 <EEPROM_WritePage>
			/* Wait transfer through DMA to be complete */
			EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80041b4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80041b8:	601a      	str	r2, [r3, #0]
			while (EEPROMDataNum > 0)
 80041ba:	e009      	b.n	80041d0 <EEPROM_WriteBuffer+0x80>
			{
				if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	4991      	ldr	r1, [pc, #580]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80041c4:	600a      	str	r2, [r1, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <EEPROM_WriteBuffer+0x80>
 80041ca:	f000 fa41 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80041ce:	e151      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
			EEPROMDataNum = NumOfSingle;
			/* Start writing data */
			EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
			/* Wait transfer through DMA to be complete */
			EEPROMTimeout = EEPROM_LONG_TIMEOUT;
			while (EEPROMDataNum > 0)
 80041d0:	4b8c      	ldr	r3, [pc, #560]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <EEPROM_WriteBuffer+0x6c>
			{
				if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
			}
			EEPROM_WaitEepromStandbyState();
 80041da:	f000 f953 	bl	8004484 <EEPROM_WaitEepromStandbyState>
 80041de:	e149      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
		else
		{
			while(NumOfPage--)
			{
				/* Store the number of data to be written */
				EEPROMDataNum = EEPROM_PAGESIZE;
 80041e0:	4b88      	ldr	r3, [pc, #544]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80041e2:	2220      	movs	r2, #32
 80041e4:	701a      	strb	r2, [r3, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	4a86      	ldr	r2, [pc, #536]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fef1 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 80041f2:	4b85      	ldr	r3, [pc, #532]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80041f4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80041f8:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 80041fa:	e009      	b.n	8004210 <EEPROM_WriteBuffer+0xc0>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 80041fc:	4b82      	ldr	r3, [pc, #520]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	4981      	ldr	r1, [pc, #516]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004204:	600a      	str	r2, [r1, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <EEPROM_WriteBuffer+0xc0>
 800420a:	f000 fa21 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800420e:	e131      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				/* Store the number of data to be written */
				EEPROMDataNum = EEPROM_PAGESIZE;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 8004210:	4b7c      	ldr	r3, [pc, #496]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <EEPROM_WriteBuffer+0xac>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 800421a:	f000 f933 	bl	8004484 <EEPROM_WaitEepromStandbyState>
				WriteAddr +=  EEPROM_PAGESIZE;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	3320      	adds	r3, #32
 8004222:	807b      	strh	r3, [r7, #2]
				pBuffer += EEPROM_PAGESIZE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3320      	adds	r3, #32
 8004228:	607b      	str	r3, [r7, #4]
			EEPROM_WaitEepromStandbyState();
		}
		/*!< If NumByteToWrite > EEPROM_PAGESIZE */
		else
		{
			while(NumOfPage--)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	73fa      	strb	r2, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1d5      	bne.n	80041e0 <EEPROM_WriteBuffer+0x90>
				EEPROM_WaitEepromStandbyState();
				WriteAddr +=  EEPROM_PAGESIZE;
				pBuffer += EEPROM_PAGESIZE;
			}

			if(NumOfSingle!=0)
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 811c 	beq.w	8004474 <EEPROM_WriteBuffer+0x324>
			{
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
 800423c:	4a71      	ldr	r2, [pc, #452]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 800423e:	7bbb      	ldrb	r3, [r7, #14]
 8004240:	7013      	strb	r3, [r2, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 8004242:	887b      	ldrh	r3, [r7, #2]
 8004244:	4a6f      	ldr	r2, [pc, #444]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fec3 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 800424e:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004250:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004254:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 8004256:	e009      	b.n	800426c <EEPROM_WriteBuffer+0x11c>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	496a      	ldr	r1, [pc, #424]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004260:	600a      	str	r2, [r1, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <EEPROM_WriteBuffer+0x11c>
 8004266:	f000 f9f3 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800426a:	e103      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 800426c:	4b65      	ldr	r3, [pc, #404]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <EEPROM_WriteBuffer+0x108>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 8004276:	f000 f905 	bl	8004484 <EEPROM_WaitEepromStandbyState>
 800427a:	e0fb      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
	}
	/*!< If WriteAddr is not EEPROM_PAGESIZE aligned  */
	else
	{
		/*!< If NumByteToWrite < EEPROM_PAGESIZE */
		if(NumOfPage== 0)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d16d      	bne.n	800435e <EEPROM_WriteBuffer+0x20e>
		{
			/*!< If the number of data to be written is more than the remaining space
      in the current page: */
			if (NumByteToWrite > count)
 8004282:	7b7b      	ldrb	r3, [r7, #13]
 8004284:	b29b      	uxth	r3, r3
 8004286:	883a      	ldrh	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d948      	bls.n	800431e <EEPROM_WriteBuffer+0x1ce>
			{
				/* Store the number of data to be written */
				EEPROMDataNum = count;
 800428c:	4a5d      	ldr	r2, [pc, #372]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 800428e:	7b7b      	ldrb	r3, [r7, #13]
 8004290:	7013      	strb	r3, [r2, #0]
				/*!< Write the data conained in same page */
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004296:	4619      	mov	r1, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fe9b 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 800429e:	4b5a      	ldr	r3, [pc, #360]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80042a0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80042a4:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 80042a6:	e009      	b.n	80042bc <EEPROM_WriteBuffer+0x16c>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	4956      	ldr	r1, [pc, #344]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80042b0:	600a      	str	r2, [r1, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <EEPROM_WriteBuffer+0x16c>
 80042b6:	f000 f9cb 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80042ba:	e0db      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				EEPROMDataNum = count;
				/*!< Write the data conained in same page */
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 80042bc:	4b51      	ldr	r3, [pc, #324]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <EEPROM_WriteBuffer+0x158>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 80042c6:	f000 f8dd 	bl	8004484 <EEPROM_WaitEepromStandbyState>

				/* Store the number of data to be written */
				EEPROMDataNum = (NumByteToWrite - count);
 80042ca:	883b      	ldrh	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	7b7b      	ldrb	r3, [r7, #13]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80042d6:	701a      	strb	r2, [r3, #0]
				/*!< Write the remaining data in the following page */
				EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&EEPROMDataNum));
 80042d8:	7b7b      	ldrb	r3, [r7, #13]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	18d0      	adds	r0, r2, r3
 80042de:	7b7b      	ldrb	r3, [r7, #13]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	4413      	add	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4a46      	ldr	r2, [pc, #280]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80042ea:	4619      	mov	r1, r3
 80042ec:	f7ff fe72 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 80042f0:	4b45      	ldr	r3, [pc, #276]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80042f2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80042f6:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 80042f8:	e009      	b.n	800430e <EEPROM_WriteBuffer+0x1be>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	4941      	ldr	r1, [pc, #260]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004302:	600a      	str	r2, [r1, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <EEPROM_WriteBuffer+0x1be>
 8004308:	f000 f9a2 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800430c:	e0b2      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				EEPROMDataNum = (NumByteToWrite - count);
				/*!< Write the remaining data in the following page */
				EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <EEPROM_WriteBuffer+0x1aa>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 8004318:	f000 f8b4 	bl	8004484 <EEPROM_WaitEepromStandbyState>
 800431c:	e0aa      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
			}
			else
			{
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
 800431e:	4a39      	ldr	r2, [pc, #228]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004320:	7bbb      	ldrb	r3, [r7, #14]
 8004322:	7013      	strb	r3, [r2, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 8004324:	887b      	ldrh	r3, [r7, #2]
 8004326:	4a37      	ldr	r2, [pc, #220]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fe52 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004332:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004336:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 8004338:	e009      	b.n	800434e <EEPROM_WriteBuffer+0x1fe>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	1e5a      	subs	r2, r3, #1
 8004340:	4931      	ldr	r1, [pc, #196]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004342:	600a      	str	r2, [r1, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <EEPROM_WriteBuffer+0x1fe>
 8004348:	f000 f982 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800434c:	e092      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <EEPROM_WriteBuffer+0x1ea>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 8004358:	f000 f894 	bl	8004484 <EEPROM_WaitEepromStandbyState>
 800435c:	e08a      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
			}
		}
		/*!< If NumByteToWrite > EEPROM_PAGESIZE */
		else
		{
			NumByteToWrite -= count;
 800435e:	7b7b      	ldrb	r3, [r7, #13]
 8004360:	b29b      	uxth	r3, r3
 8004362:	883a      	ldrh	r2, [r7, #0]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	803b      	strh	r3, [r7, #0]
			NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 8004368:	883b      	ldrh	r3, [r7, #0]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	b29b      	uxth	r3, r3
 800436e:	73fb      	strb	r3, [r7, #15]
			NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8004370:	883b      	ldrh	r3, [r7, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	73bb      	strb	r3, [r7, #14]

			if(count != 0)
 800437a:	7b7b      	ldrb	r3, [r7, #13]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d052      	beq.n	8004426 <EEPROM_WriteBuffer+0x2d6>
			{
				/* Store the number of data to be written */
				EEPROMDataNum = count;
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 8004382:	7b7b      	ldrb	r3, [r7, #13]
 8004384:	7013      	strb	r3, [r2, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fe21 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 8004394:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004398:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 800439a:	e009      	b.n	80043b0 <EEPROM_WriteBuffer+0x260>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	4919      	ldr	r1, [pc, #100]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80043a4:	600a      	str	r2, [r1, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <EEPROM_WriteBuffer+0x260>
 80043aa:	f000 f951 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80043ae:	e061      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				/* Store the number of data to be written */
				EEPROMDataNum = count;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <EEPROM_WriteBuffer+0x24c>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 80043ba:	f000 f863 	bl	8004484 <EEPROM_WaitEepromStandbyState>
				WriteAddr += count;
 80043be:	7b7b      	ldrb	r3, [r7, #13]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	4413      	add	r3, r2
 80043c6:	807b      	strh	r3, [r7, #2]
				pBuffer += count;
 80043c8:	7b7b      	ldrb	r3, [r7, #13]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	607b      	str	r3, [r7, #4]
			}

			while(NumOfPage--)
 80043d0:	e029      	b.n	8004426 <EEPROM_WriteBuffer+0x2d6>
			{
				/* Store the number of data to be written */
				EEPROMDataNum = EEPROM_PAGESIZE;
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80043d4:	2220      	movs	r2, #32
 80043d6:	701a      	strb	r2, [r3, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 80043d8:	887b      	ldrh	r3, [r7, #2]
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <EEPROM_WriteBuffer+0x2b4>)
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fdf8 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80043e6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80043ea:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 80043ec:	e00e      	b.n	800440c <EEPROM_WriteBuffer+0x2bc>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	4904      	ldr	r1, [pc, #16]	; (8004408 <EEPROM_WriteBuffer+0x2b8>)
 80043f6:	600a      	str	r2, [r1, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <EEPROM_WriteBuffer+0x2bc>
 80043fc:	f000 f928 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8004400:	e038      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
 8004402:	bf00      	nop
 8004404:	200025d0 	.word	0x200025d0
 8004408:	200000f4 	.word	0x200000f4
				/* Store the number of data to be written */
				EEPROMDataNum = EEPROM_PAGESIZE;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <EEPROM_WriteBuffer+0x32c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1eb      	bne.n	80043ee <EEPROM_WriteBuffer+0x29e>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 8004416:	f000 f835 	bl	8004484 <EEPROM_WaitEepromStandbyState>
				WriteAddr +=  EEPROM_PAGESIZE;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	3320      	adds	r3, #32
 800441e:	807b      	strh	r3, [r7, #2]
				pBuffer += EEPROM_PAGESIZE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3320      	adds	r3, #32
 8004424:	607b      	str	r3, [r7, #4]
				EEPROM_WaitEepromStandbyState();
				WriteAddr += count;
				pBuffer += count;
			}

			while(NumOfPage--)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	73fa      	strb	r2, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1d0      	bne.n	80043d2 <EEPROM_WriteBuffer+0x282>
				}
				EEPROM_WaitEepromStandbyState();
				WriteAddr +=  EEPROM_PAGESIZE;
				pBuffer += EEPROM_PAGESIZE;
			}
			if(NumOfSingle != 0)
 8004430:	7bbb      	ldrb	r3, [r7, #14]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01e      	beq.n	8004474 <EEPROM_WriteBuffer+0x324>
			{
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <EEPROM_WriteBuffer+0x32c>)
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	7013      	strb	r3, [r2, #0]
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	4a0f      	ldr	r2, [pc, #60]	; (800447c <EEPROM_WriteBuffer+0x32c>)
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fdc6 	bl	8003fd4 <EEPROM_WritePage>
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <EEPROM_WriteBuffer+0x330>)
 800444a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800444e:	601a      	str	r2, [r3, #0]
				while (EEPROMDataNum > 0)
 8004450:	e009      	b.n	8004466 <EEPROM_WriteBuffer+0x316>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <EEPROM_WriteBuffer+0x330>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1e5a      	subs	r2, r3, #1
 8004458:	4909      	ldr	r1, [pc, #36]	; (8004480 <EEPROM_WriteBuffer+0x330>)
 800445a:	600a      	str	r2, [r1, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <EEPROM_WriteBuffer+0x316>
 8004460:	f000 f8f6 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8004464:	e006      	b.n	8004474 <EEPROM_WriteBuffer+0x324>
				/* Store the number of data to be written */
				EEPROMDataNum = NumOfSingle;
				EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&EEPROMDataNum));
				/* Wait transfer through DMA to be complete */
				EEPROMTimeout = EEPROM_LONG_TIMEOUT;
				while (EEPROMDataNum > 0)
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <EEPROM_WriteBuffer+0x32c>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <EEPROM_WriteBuffer+0x302>
				{
					if((EEPROMTimeout--) == 0) {EEPROM_TIMEOUT_UserCallback(); return;};
				}
				EEPROM_WaitEepromStandbyState();
 8004470:	f000 f808 	bl	8004484 <EEPROM_WaitEepromStandbyState>
			}
		}
	}
}
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200025d0 	.word	0x200025d0
 8004480:	200000f4 	.word	0x200000f4

08004484 <EEPROM_WaitEepromStandbyState>:
 * @param  None
 * @retval EEPROM_OK (0) if operation is correctly performed, else return value
 *         different from EEPROM_OK (0) or the timeout user callback.
 */
uint32_t EEPROM_WaitEepromStandbyState(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
	__IO uint16_t tmpSR1 = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	80fb      	strh	r3, [r7, #6]
	__IO uint32_t EEPROMTrials = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	603b      	str	r3, [r7, #0]

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 8004492:	4b3a      	ldr	r3, [pc, #232]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 8004494:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004498:	601a      	str	r2, [r3, #0]
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 800449a:	e00a      	b.n	80044b2 <EEPROM_WaitEepromStandbyState+0x2e>
	{
		if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 800449c:	4b37      	ldr	r3, [pc, #220]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	4936      	ldr	r1, [pc, #216]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 80044a4:	600a      	str	r2, [r1, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <EEPROM_WaitEepromStandbyState+0x2e>
 80044aa:	f000 f8d1 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80044ae:	4603      	mov	r3, r0
 80044b0:	e060      	b.n	8004574 <EEPROM_WaitEepromStandbyState+0xf0>
	__IO uint16_t tmpSR1 = 0;
	__IO uint32_t EEPROMTrials = 0;

	/*!< While the bus is busy */
	EEPROMTimeout = EEPROM_LONG_TIMEOUT;
	while(I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BUSY))
 80044b2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80044b6:	4832      	ldr	r0, [pc, #200]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 80044b8:	f004 f84e 	bl	8008558 <I2C_GetFlagStatus>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ec      	bne.n	800449c <EEPROM_WaitEepromStandbyState+0x18>
     of trials is reached (this number is defined by EEPROM_MAX_TRIALS_NUMBER define
     in stm32_eval_i2c_ee.h file) */
	while (1)
	{
		/*!< Send START condition */
		I2C_GenerateSTART(EEPROM_I2C, ENABLE);
 80044c2:	2101      	movs	r1, #1
 80044c4:	482e      	ldr	r0, [pc, #184]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 80044c6:	f003 ff7b 	bl	80083c0 <I2C_GenerateSTART>

		/*!< Test on EV5 and clear it */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
 80044ca:	4b2c      	ldr	r3, [pc, #176]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 80044cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044d0:	601a      	str	r2, [r3, #0]
		while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80044d2:	e00a      	b.n	80044ea <EEPROM_WaitEepromStandbyState+0x66>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 80044d4:	4b29      	ldr	r3, [pc, #164]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	1e5a      	subs	r2, r3, #1
 80044da:	4928      	ldr	r1, [pc, #160]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 80044dc:	600a      	str	r2, [r1, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <EEPROM_WaitEepromStandbyState+0x66>
 80044e2:	f000 f8b5 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 80044e6:	4603      	mov	r3, r0
 80044e8:	e044      	b.n	8004574 <EEPROM_WaitEepromStandbyState+0xf0>
		/*!< Send START condition */
		I2C_GenerateSTART(EEPROM_I2C, ENABLE);

		/*!< Test on EV5 and clear it */
		EEPROMTimeout = EEPROM_FLAG_TIMEOUT;
		while(!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80044ea:	4926      	ldr	r1, [pc, #152]	; (8004584 <EEPROM_WaitEepromStandbyState+0x100>)
 80044ec:	4824      	ldr	r0, [pc, #144]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 80044ee:	f004 f803 	bl	80084f8 <I2C_CheckEvent>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ed      	beq.n	80044d4 <EEPROM_WaitEepromStandbyState+0x50>
		{
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
		}

		/*!< Send EEPROM address for write */
		I2C_Send7bitAddress(EEPROM_I2C, EEPROMAddress, I2C_Direction_Transmitter);
 80044f8:	4b23      	ldr	r3, [pc, #140]	; (8004588 <EEPROM_WaitEepromStandbyState+0x104>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2200      	movs	r2, #0
 8004502:	4619      	mov	r1, r3
 8004504:	481e      	ldr	r0, [pc, #120]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 8004506:	f003 ffd9 	bl	80084bc <I2C_Send7bitAddress>

		/* Wait for ADDR flag to be set (Slave acknowledged his address) */
		EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 800450c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004510:	601a      	str	r2, [r3, #0]
		do
		{
			/* Get the current value of the SR1 register */
			tmpSR1 = EEPROM_I2C->SR1;
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 8004514:	8a9b      	ldrh	r3, [r3, #20]
 8004516:	b29b      	uxth	r3, r3
 8004518:	80fb      	strh	r3, [r7, #6]

			/* Update the timeout value and exit if it reach 0 */
			if((EEPROMTimeout--) == 0) return EEPROM_TIMEOUT_UserCallback();
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	4916      	ldr	r1, [pc, #88]	; (800457c <EEPROM_WaitEepromStandbyState+0xf8>)
 8004522:	600a      	str	r2, [r1, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <EEPROM_WaitEepromStandbyState+0xac>
 8004528:	f000 f892 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 800452c:	4603      	mov	r3, r0
 800452e:	e021      	b.n	8004574 <EEPROM_WaitEepromStandbyState+0xf0>
		}
		/* Keep looping till the Address is acknowledged or the AF flag is
       set (address not acknowledged at time) */
		while((tmpSR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) == 0);
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	f240 4302 	movw	r3, #1026	; 0x402
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0e8      	beq.n	8004512 <EEPROM_WaitEepromStandbyState+0x8e>

		/* Check if the ADDR flag has been set */
		if (tmpSR1 & I2C_SR1_ADDR)
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <EEPROM_WaitEepromStandbyState+0xd8>
		{
			/* Clear ADDR Flag by reading SR1 then SR2 registers (SR1 have already
         been read) */
			(void)EEPROM_I2C->SR2;
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 800454e:	8b1b      	ldrh	r3, [r3, #24]

			/*!< STOP condition */
			I2C_GenerateSTOP(EEPROM_I2C, ENABLE);
 8004550:	2101      	movs	r1, #1
 8004552:	480b      	ldr	r0, [pc, #44]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 8004554:	f003 ff54 	bl	8008400 <I2C_GenerateSTOP>

			/* Exit the function */
			return EEPROM_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e00b      	b.n	8004574 <EEPROM_WaitEepromStandbyState+0xf0>
		}
		else
		{
			/*!< Clear AF flag */
			I2C_ClearFlag(EEPROM_I2C, I2C_FLAG_AF);
 800455c:	490b      	ldr	r1, [pc, #44]	; (800458c <EEPROM_WaitEepromStandbyState+0x108>)
 800455e:	4808      	ldr	r0, [pc, #32]	; (8004580 <EEPROM_WaitEepromStandbyState+0xfc>)
 8004560:	f004 f82c 	bl	80085bc <I2C_ClearFlag>
		}

		/* Check if the maximum allowed numbe of trials has bee reached */
		if (EEPROMTrials++ == EEPROM_MAX_TRIALS_NUMBER)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	603a      	str	r2, [r7, #0]
 800456a:	2b96      	cmp	r3, #150	; 0x96
 800456c:	d1a9      	bne.n	80044c2 <EEPROM_WaitEepromStandbyState+0x3e>
		{
			/* If the maximum number of trials has been reached, exit the function */
			return EEPROM_TIMEOUT_UserCallback();
 800456e:	f000 f86f 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
 8004572:	4603      	mov	r3, r0
		}
	}
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	200000f4 	.word	0x200000f4
 8004580:	40005400 	.word	0x40005400
 8004584:	00030001 	.word	0x00030001
 8004588:	200003ac 	.word	0x200003ac
 800458c:	10000400 	.word	0x10000400

08004590 <DMA1_Channel6_IRQHandler>:
 * @brief  This function handles the DMA Tx Channel interrupt Handler.
 * @param  None
 * @retval None
 */
void EEPROM_I2C_DMA_TX_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	/* Check if the DMA transfer is complete */
	if(DMA_GetFlagStatus(EEPROM_I2C_DMA_FLAG_TX_TC) != RESET)
 8004594:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004598:	f003 fb76 	bl	8007c88 <DMA_GetFlagStatus>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d028      	beq.n	80045f4 <DMA1_Channel6_IRQHandler+0x64>
	{
		/* Disable the DMA Tx Channel and Clear all its Flags */
		DMA_Cmd(EEPROM_I2C_DMA_CHANNEL_TX, DISABLE);
 80045a2:	2100      	movs	r1, #0
 80045a4:	4814      	ldr	r0, [pc, #80]	; (80045f8 <DMA1_Channel6_IRQHandler+0x68>)
 80045a6:	f003 fb35 	bl	8007c14 <DMA_Cmd>
		DMA_ClearFlag(EEPROM_I2C_DMA_FLAG_TX_GL);
 80045aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80045ae:	f003 fb93 	bl	8007cd8 <DMA_ClearFlag>

		/*!< Wait till all data have been physically transferred on the bus */
		EEPROMTimeout = EEPROM_LONG_TIMEOUT;
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <DMA1_Channel6_IRQHandler+0x6c>)
 80045b4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80045b8:	601a      	str	r2, [r3, #0]
		while(!I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BTF))
 80045ba:	e008      	b.n	80045ce <DMA1_Channel6_IRQHandler+0x3e>
		{
			if((EEPROMTimeout--) == 0) EEPROM_TIMEOUT_UserCallback();
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <DMA1_Channel6_IRQHandler+0x6c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	490e      	ldr	r1, [pc, #56]	; (80045fc <DMA1_Channel6_IRQHandler+0x6c>)
 80045c4:	600a      	str	r2, [r1, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <DMA1_Channel6_IRQHandler+0x3e>
 80045ca:	f000 f841 	bl	8004650 <EEPROM_TIMEOUT_UserCallback>
		DMA_Cmd(EEPROM_I2C_DMA_CHANNEL_TX, DISABLE);
		DMA_ClearFlag(EEPROM_I2C_DMA_FLAG_TX_GL);

		/*!< Wait till all data have been physically transferred on the bus */
		EEPROMTimeout = EEPROM_LONG_TIMEOUT;
		while(!I2C_GetFlagStatus(EEPROM_I2C, I2C_FLAG_BTF))
 80045ce:	490c      	ldr	r1, [pc, #48]	; (8004600 <DMA1_Channel6_IRQHandler+0x70>)
 80045d0:	480c      	ldr	r0, [pc, #48]	; (8004604 <DMA1_Channel6_IRQHandler+0x74>)
 80045d2:	f003 ffc1 	bl	8008558 <I2C_GetFlagStatus>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <DMA1_Channel6_IRQHandler+0x2c>
		{
			if((EEPROMTimeout--) == 0) EEPROM_TIMEOUT_UserCallback();
		}

		/*!< Send STOP condition */
		I2C_GenerateSTOP(EEPROM_I2C, ENABLE);
 80045dc:	2101      	movs	r1, #1
 80045de:	4809      	ldr	r0, [pc, #36]	; (8004604 <DMA1_Channel6_IRQHandler+0x74>)
 80045e0:	f003 ff0e 	bl	8008400 <I2C_GenerateSTOP>

		/* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
		(void)EEPROM_I2C->SR1;
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <DMA1_Channel6_IRQHandler+0x74>)
 80045e6:	8a9b      	ldrh	r3, [r3, #20]
		(void)EEPROM_I2C->SR2;
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <DMA1_Channel6_IRQHandler+0x74>)
 80045ea:	8b1b      	ldrh	r3, [r3, #24]

		/* Reset the variable holding the number of data to be written */
		*EEPROMDataWritePointer = 0;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <DMA1_Channel6_IRQHandler+0x78>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
	}
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	4002006c 	.word	0x4002006c
 80045fc:	200000f4 	.word	0x200000f4
 8004600:	10000004 	.word	0x10000004
 8004604:	40005400 	.word	0x40005400
 8004608:	2000259c 	.word	0x2000259c

0800460c <DMA1_Channel7_IRQHandler>:
 * @brief  This function handles the DMA Rx Channel interrupt Handler.
 * @param  None
 * @retval None
 */
void EEPROM_I2C_DMA_RX_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
	/* Check if the DMA transfer is complete */
	if(DMA_GetFlagStatus(EEPROM_I2C_DMA_FLAG_RX_TC) != RESET)
 8004610:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004614:	f003 fb38 	bl	8007c88 <DMA_GetFlagStatus>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00f      	beq.n	800463e <DMA1_Channel7_IRQHandler+0x32>
	{
		/*!< Send STOP Condition */
		I2C_GenerateSTOP(EEPROM_I2C, ENABLE);
 800461e:	2101      	movs	r1, #1
 8004620:	4808      	ldr	r0, [pc, #32]	; (8004644 <DMA1_Channel7_IRQHandler+0x38>)
 8004622:	f003 feed 	bl	8008400 <I2C_GenerateSTOP>

		/* Disable the DMA Rx Channel and Clear all its Flags */
		DMA_Cmd(EEPROM_I2C_DMA_CHANNEL_RX, DISABLE);
 8004626:	2100      	movs	r1, #0
 8004628:	4807      	ldr	r0, [pc, #28]	; (8004648 <DMA1_Channel7_IRQHandler+0x3c>)
 800462a:	f003 faf3 	bl	8007c14 <DMA_Cmd>
		DMA_ClearFlag(EEPROM_I2C_DMA_FLAG_RX_GL);
 800462e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004632:	f003 fb51 	bl	8007cd8 <DMA_ClearFlag>

		/* Reset the variable holding the number of data to be read */
		*EEPROMDataReadPointer = 0;
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <DMA1_Channel7_IRQHandler+0x40>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]
	}
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40005400 	.word	0x40005400
 8004648:	40020080 	.word	0x40020080
 800464c:	200025a0 	.word	0x200025a0

08004650 <EEPROM_TIMEOUT_UserCallback>:
 * @brief  Basic management of the timeout situation.
 * @param  None.
 * @retval None.
 */
uint32_t EEPROM_TIMEOUT_UserCallback(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	/* Block communication and all processes */
	while (1)
	{
	}
 8004654:	e7fe      	b.n	8004654 <EEPROM_TIMEOUT_UserCallback+0x4>
 8004656:	bf00      	nop

08004658 <EEPROM_EnterCriticalSection_UserCallback>:
 *         application.
 * @param  None.
 * @retval None.
 */
void EEPROM_EnterCriticalSection_UserCallback(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800465c:	b672      	cpsid	i
	__disable_irq();
}
 800465e:	bf00      	nop
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop

08004668 <EEPROM_ExitCriticalSection_UserCallback>:
 *         application.
 * @param  None.
 * @retval None.
 */
void EEPROM_ExitCriticalSection_UserCallback(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800466c:	b662      	cpsie	i
	__enable_irq();
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <ADCT_AT24C64_ReadOneByte>:

uint8_t ADCT_AT24C64_ReadOneByte(uint16_t Address_ui16 )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t NumDataRead_ui16 = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	81fb      	strh	r3, [r7, #14]
	uint8_t data_ui8;
	EEPROM_ReadBuffer(&data_ui8, Address_ui16, (uint16_t *)(&NumDataRead_ui16));
 8004686:	f107 020e 	add.w	r2, r7, #14
 800468a:	88f9      	ldrh	r1, [r7, #6]
 800468c:	f107 030d 	add.w	r3, r7, #13
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fb35 	bl	8003d00 <EEPROM_ReadBuffer>
	while(NumDataRead_ui16 >0)
 8004696:	bf00      	nop
 8004698:	89fb      	ldrh	r3, [r7, #14]
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1fb      	bne.n	8004698 <ADCT_AT24C64_ReadOneByte+0x20>
	{

	}
	return data_ui8;
 80046a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop

080046ac <ADCT_AT24C64_WriteTwoBytes>:
	{}
	return (pDataui8[1] * 256 + pDataui8[0]);
}

void ADCT_AT24C64_WriteTwoBytes(uint16_t ui16MemAddr , uint16_t ui16data)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	460a      	mov	r2, r1
 80046b6:	80fb      	strh	r3, [r7, #6]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80bb      	strh	r3, [r7, #4]
	uint8_t txbuffer_a[2] = {(uint8_t)(ui16data%256), (uint8_t)(ui16data >> 8) };
 80046bc:	88bb      	ldrh	r3, [r7, #4]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	733b      	strb	r3, [r7, #12]
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	737b      	strb	r3, [r7, #13]
	EEPROM_WriteBuffer(txbuffer_a , ui16MemAddr , 2 );
 80046cc:	88f9      	ldrh	r1, [r7, #6]
 80046ce:	f107 030c 	add.w	r3, r7, #12
 80046d2:	2202      	movs	r2, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fd3b 	bl	8004150 <EEPROM_WriteBuffer>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop

080046e4 <ADCT_AT24C64_WriteOneBytes>:
void ADCT_AT24C64_WriteOneBytes(uint16_t ui16MemAddr, uint8_t ui8data)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	460a      	mov	r2, r1
 80046ee:	80fb      	strh	r3, [r7, #6]
 80046f0:	4613      	mov	r3, r2
 80046f2:	717b      	strb	r3, [r7, #5]
	EEPROM_WriteBuffer(&ui8data , ui16MemAddr , 1 );
 80046f4:	88f9      	ldrh	r1, [r7, #6]
 80046f6:	1d7b      	adds	r3, r7, #5
 80046f8:	2201      	movs	r2, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fd28 	bl	8004150 <EEPROM_WriteBuffer>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <ADCT_BGS_Button_Init>:
TM_BUTTON_t* UpButton;
TM_BUTTON_t* DownButton;


void ADCT_BGS_Button_Init(void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af02      	add	r7, sp, #8
	/* Enter button initialization  */
	EnterButton = TM_BUTTON_Init(ENTER_BUTTON_GPIO_PORT,ENTER_BUTTON_GPIO_CLK,ENTER_BUTTON_PIN, 0, BUTTON_ENTER_Callback);
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <ADCT_BGS_Button_Init+0xac>)
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2300      	movs	r3, #0
 8004714:	2201      	movs	r2, #1
 8004716:	2108      	movs	r1, #8
 8004718:	4827      	ldr	r0, [pc, #156]	; (80047b8 <ADCT_BGS_Button_Init+0xb0>)
 800471a:	f000 f85f 	bl	80047dc <TM_BUTTON_Init>
 800471e:	4602      	mov	r2, r0
 8004720:	4b26      	ldr	r3, [pc, #152]	; (80047bc <ADCT_BGS_Button_Init+0xb4>)
 8004722:	601a      	str	r2, [r3, #0]
	/* ESC button initialization */
	CancelButton = TM_BUTTON_Init(ESC_BUTTON_GPIO_PORT,ESC_BUTTON_GPIO_CLK,ESC_BUTTON_PIN, 0, BUTTON_CANCEL_Callback);
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <ADCT_BGS_Button_Init+0xb8>)
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2300      	movs	r3, #0
 800472a:	2220      	movs	r2, #32
 800472c:	2110      	movs	r1, #16
 800472e:	4825      	ldr	r0, [pc, #148]	; (80047c4 <ADCT_BGS_Button_Init+0xbc>)
 8004730:	f000 f854 	bl	80047dc <TM_BUTTON_Init>
 8004734:	4602      	mov	r2, r0
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <ADCT_BGS_Button_Init+0xc0>)
 8004738:	601a      	str	r2, [r3, #0]
	/* Up button initialization */
	UpButton = TM_BUTTON_Init(UP_BUTTON_GPIO_PORT,UP_BUTTON_GPIO_CLK,UP_BUTTON_PIN, 0, BUTTON_UP_Callback);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <ADCT_BGS_Button_Init+0xc4>)
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	2204      	movs	r2, #4
 8004742:	2108      	movs	r1, #8
 8004744:	481c      	ldr	r0, [pc, #112]	; (80047b8 <ADCT_BGS_Button_Init+0xb0>)
 8004746:	f000 f849 	bl	80047dc <TM_BUTTON_Init>
 800474a:	4602      	mov	r2, r0
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <ADCT_BGS_Button_Init+0xc8>)
 800474e:	601a      	str	r2, [r3, #0]
	/* Down button initialization */
	DownButton = TM_BUTTON_Init(DOWN_BUTTON_GPIO_PORT,DOWN_BUTTON_GPIO_CLK,DOWN_BUTTON_PIN, 0, BUTTON_DOWN_Callback);
 8004750:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <ADCT_BGS_Button_Init+0xcc>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	2202      	movs	r2, #2
 8004758:	2108      	movs	r1, #8
 800475a:	4817      	ldr	r0, [pc, #92]	; (80047b8 <ADCT_BGS_Button_Init+0xb0>)
 800475c:	f000 f83e 	bl	80047dc <TM_BUTTON_Init>
 8004760:	4602      	mov	r2, r0
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <ADCT_BGS_Button_Init+0xd0>)
 8004764:	601a      	str	r2, [r3, #0]

	TM_BUTTON_SetPressTime(EnterButton, 2000, 3000);
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <ADCT_BGS_Button_Init+0xb4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800476e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f890 	bl	8004898 <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(CancelButton, 2000, 3000);
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <ADCT_BGS_Button_Init+0xc0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004780:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f887 	bl	8004898 <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(UpButton, 2000, 3000);
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <ADCT_BGS_Button_Init+0xc8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004792:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f87e 	bl	8004898 <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(DownButton, 2000, 3000);
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <ADCT_BGS_Button_Init+0xd0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80047a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f875 	bl	8004898 <TM_BUTTON_SetPressTime>
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	08001089 	.word	0x08001089
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	200025e0 	.word	0x200025e0
 80047c0:	080010ed 	.word	0x080010ed
 80047c4:	40011000 	.word	0x40011000
 80047c8:	200025d4 	.word	0x200025d4
 80047cc:	08001155 	.word	0x08001155
 80047d0:	200025d8 	.word	0x200025d8
 80047d4:	080011bd 	.word	0x080011bd
 80047d8:	200025dc 	.word	0x200025dc

080047dc <TM_BUTTON_Init>:
static TM_BUTTON_INT_t Buttons;

/* Internal functions */
static void TM_BUTTON_INT_CheckButton(TM_BUTTON_t* ButtonStruct);

TM_BUTTON_t* TM_BUTTON_Init(GPIO_TypeDef* GPIOx, uint32_t GPIO_CLOCK, uint16_t GPIO_Pin, uint8_t ButtonState, void (*ButtonHandler)(TM_BUTTON_t*, TM_BUTTON_PressType_t)) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4611      	mov	r1, r2
 80047e8:	461a      	mov	r2, r3
 80047ea:	460b      	mov	r3, r1
 80047ec:	80fb      	strh	r3, [r7, #6]
 80047ee:	4613      	mov	r3, r2
 80047f0:	717b      	strb	r3, [r7, #5]
	TM_BUTTON_t* ButtonStruct;
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Check if available */
	if (Buttons.ButtonsCount >= BUTTON_MAX_BUTTONS) {
 80047f2:	4b28      	ldr	r3, [pc, #160]	; (8004894 <TM_BUTTON_Init+0xb8>)
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d901      	bls.n	80047fe <TM_BUTTON_Init+0x22>
		return NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e045      	b.n	800488a <TM_BUTTON_Init+0xae>
	}
	
	/* Allocate memory for button */
	ButtonStruct = (TM_BUTTON_t *) malloc(sizeof(TM_BUTTON_t));
 80047fe:	2018      	movs	r0, #24
 8004800:	f005 f924 	bl	8009a4c <malloc>
 8004804:	4603      	mov	r3, r0
 8004806:	617b      	str	r3, [r7, #20]
	
	/* Check if allocated */
	if (ButtonStruct == NULL) {
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <TM_BUTTON_Init+0x36>
		return NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	e03b      	b.n	800488a <TM_BUTTON_Init+0xae>
	}
	
	/* Save settings */
	ButtonStruct->GPIOx = GPIOx;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]
	ButtonStruct->GPIO_Pin = GPIO_Pin;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	809a      	strh	r2, [r3, #4]
	ButtonStruct->GPIO_State = ButtonState ? 1 : 0;
 800481e:	797b      	ldrb	r3, [r7, #5]
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	719a      	strb	r2, [r3, #6]
	ButtonStruct->ButtonHandler = ButtonHandler;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	609a      	str	r2, [r3, #8]
	ButtonStruct->State = BUTTON_STATE_START;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	745a      	strb	r2, [r3, #17]
	
	/* Set default values */
	ButtonStruct->PressNormalTime = BUTTON_NORMAL_PRESS_TIME;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004842:	829a      	strh	r2, [r3, #20]
	ButtonStruct->PressLongTime = BUTTON_LONG_PRESS_TIME;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800484a:	82da      	strh	r2, [r3, #22]
	ButtonStruct->PressDebounceTime = BUTTON_DEBOUNCE_TIME;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2205      	movs	r2, #5
 8004850:	825a      	strh	r2, [r3, #18]
	
	/* Init GPIO pin as input with proper pull resistor */
	RCC_APB2PeriphClockCmd(GPIO_CLOCK, ENABLE);
 8004852:	2101      	movs	r1, #1
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f004 f8e7 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin;
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	823b      	strh	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800485e:	2303      	movs	r3, #3
 8004860:	74bb      	strb	r3, [r7, #18]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 8004862:	2328      	movs	r3, #40	; 0x28
 8004864:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(GPIOx, &GPIO_InitStructure);
 8004866:	f107 0310 	add.w	r3, r7, #16
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f003 fb37 	bl	8007ee0 <GPIO_Init>
	/* Save button */
	Buttons.Buttons[Buttons.ButtonsCount++] = ButtonStruct;
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <TM_BUTTON_Init+0xb8>)
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	b291      	uxth	r1, r2
 800487a:	4a06      	ldr	r2, [pc, #24]	; (8004894 <TM_BUTTON_Init+0xb8>)
 800487c:	8511      	strh	r1, [r2, #40]	; 0x28
 800487e:	4619      	mov	r1, r3
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <TM_BUTTON_Init+0xb8>)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	
	/* Return button pointer */
	return ButtonStruct;
 8004888:	697b      	ldr	r3, [r7, #20]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200003b0 	.word	0x200003b0

08004898 <TM_BUTTON_SetPressTime>:

TM_BUTTON_t* TM_BUTTON_SetPressTime(TM_BUTTON_t* ButtonStruct, uint16_t Normal, uint16_t Long) {
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	807b      	strh	r3, [r7, #2]
 80048a4:	4613      	mov	r3, r2
 80048a6:	803b      	strh	r3, [r7, #0]
	/* Set values */
	ButtonStruct->PressNormalTime = Normal;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	829a      	strh	r2, [r3, #20]
	ButtonStruct->PressLongTime = Long;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	883a      	ldrh	r2, [r7, #0]
 80048b2:	82da      	strh	r2, [r3, #22]
	
	/* Return pointer */
	return ButtonStruct;
 80048b4:	687b      	ldr	r3, [r7, #4]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED == 1

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d16c      	bne.n	80049b0 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3301      	adds	r3, #1
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3302      	adds	r3, #2
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	8abb      	ldrh	r3, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80048f0:	8abb      	ldrh	r3, [r7, #20]
 80048f2:	3301      	adds	r3, #1
 80048f4:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3303      	adds	r3, #3
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	8a7b      	ldrh	r3, [r7, #18]
 800490c:	4313      	orrs	r3, r2
 800490e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8004910:	8a7b      	ldrh	r3, [r7, #18]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d049      	beq.n	80049aa <eMBFuncReadCoils+0xea>
 8004916:	8a7b      	ldrh	r3, [r7, #18]
 8004918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800491c:	d245      	bcs.n	80049aa <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2200      	movs	r2, #0
 8004926:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	60fa      	str	r2, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800493e:	8a7b      	ldrh	r3, [r7, #18]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004948:	8a7b      	ldrh	r3, [r7, #18]
 800494a:	08db      	lsrs	r3, r3, #3
 800494c:	b29b      	uxth	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
 8004954:	e003      	b.n	800495e <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004956:	8a7b      	ldrh	r3, [r7, #18]
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	b29b      	uxth	r3, r3
 800495c:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	60fa      	str	r2, [r7, #12]
 8004964:	7dfa      	ldrb	r2, [r7, #23]
 8004966:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8004974:	8a7a      	ldrh	r2, [r7, #18]
 8004976:	8ab9      	ldrh	r1, [r7, #20]
 8004978:	2300      	movs	r3, #0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7fd f96a 	bl	8001c54 <eMBRegCoilsCB>
 8004980:	4603      	mov	r3, r0
 8004982:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004984:	7afb      	ldrb	r3, [r7, #11]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800498a:	7afb      	ldrb	r3, [r7, #11]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb8b 	bl	80050a8 <prveMBError2Exception>
 8004992:	4603      	mov	r3, r0
 8004994:	75bb      	strb	r3, [r7, #22]
            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004996:	e00d      	b.n	80049b4 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	801a      	strh	r2, [r3, #0]
            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80049a8:	e004      	b.n	80049b4 <eMBFuncReadCoils+0xf4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80049aa:	2303      	movs	r3, #3
 80049ac:	75bb      	strb	r3, [r7, #22]
 80049ae:	e001      	b.n	80049b4 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80049b0:	2303      	movs	r3, #3
 80049b2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80049b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop

080049c0 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d140      	bne.n	8004a58 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3301      	adds	r3, #1
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3302      	adds	r3, #2
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	89bb      	ldrh	r3, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80049f0:	89bb      	ldrh	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d128      	bne.n	8004a52 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3303      	adds	r3, #3
 8004a04:	781b      	ldrb	r3, [r3, #0]
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004a06:	2bff      	cmp	r3, #255	; 0xff
 8004a08:	d004      	beq.n	8004a14 <eMBFuncWriteCoil+0x54>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11e      	bne.n	8004a52 <eMBFuncWriteCoil+0x92>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2bff      	cmp	r3, #255	; 0xff
 8004a20:	d102      	bne.n	8004a28 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	723b      	strb	r3, [r7, #8]
 8004a26:	e001      	b.n	8004a2c <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
 8004a2c:	89b9      	ldrh	r1, [r7, #12]
 8004a2e:	f107 0008 	add.w	r0, r7, #8
 8004a32:	2301      	movs	r3, #1
 8004a34:	2201      	movs	r2, #1
 8004a36:	f7fd f90d 	bl	8001c54 <eMBRegCoilsCB>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb2e 	bl	80050a8 <prveMBError2Exception>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004a50:	e004      	b.n	8004a5c <eMBFuncWriteCoil+0x9c>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	e001      	b.n	8004a5c <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop

08004a68 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d954      	bls.n	8004b28 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3301      	adds	r3, #1
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	89bb      	ldrh	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004a98:	89bb      	ldrh	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3303      	adds	r3, #3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	897b      	ldrh	r3, [r7, #10]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	795b      	ldrb	r3, [r3, #5]
 8004abc:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	08db      	lsrs	r3, r3, #3
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e003      	b.n	8004ade <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	08db      	lsrs	r3, r3, #3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01e      	beq.n	8004b22 <eMBFuncWriteMultipleCoils+0xba>
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004aea:	d81a      	bhi.n	8004b22 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	7a7b      	ldrb	r3, [r7, #9]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d116      	bne.n	8004b22 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1d98      	adds	r0, r3, #6

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8004af8:	897a      	ldrh	r2, [r7, #10]
 8004afa:	89b9      	ldrh	r1, [r7, #12]
 8004afc:	2301      	movs	r3, #1
 8004afe:	f7fd f8a9 	bl	8001c54 <eMBRegCoilsCB>
 8004b02:	4603      	mov	r3, r0
 8004b04:	723b      	strb	r3, [r7, #8]
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004b06:	7a3b      	ldrb	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004b0c:	7a3b      	ldrb	r3, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 faca 	bl	80050a8 <prveMBError2Exception>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73bb      	strb	r3, [r7, #14]
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004b18:	e008      	b.n	8004b2c <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2205      	movs	r2, #5
 8004b1e:	801a      	strh	r2, [r3, #0]
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004b20:	e004      	b.n	8004b2c <eMBFuncWriteMultipleCoils+0xc4>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73bb      	strb	r3, [r7, #14]
 8004b26:	e001      	b.n	8004b2c <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop

08004b38 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d16c      	bne.n	8004c28 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3301      	adds	r3, #1
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	8abb      	ldrh	r3, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004b68:	8abb      	ldrh	r3, [r7, #20]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3303      	adds	r3, #3
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	8a7b      	ldrh	r3, [r7, #18]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8004b88:	8a7b      	ldrh	r3, [r7, #18]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d049      	beq.n	8004c22 <eMBFuncReadDiscreteInputs+0xea>
 8004b8e:	8a7b      	ldrh	r3, [r7, #18]
 8004b90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b94:	d245      	bcs.n	8004c22 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	60fa      	str	r2, [r7, #12]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8004bb6:	8a7b      	ldrh	r3, [r7, #18]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8004bc0:	8a7b      	ldrh	r3, [r7, #18]
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
 8004bcc:	e003      	b.n	8004bd6 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8004bce:	8a7b      	ldrh	r3, [r7, #18]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	60fa      	str	r2, [r7, #12]
 8004bdc:	7dfa      	ldrb	r2, [r7, #23]
 8004bde:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8004bec:	8a7a      	ldrh	r2, [r7, #18]
 8004bee:	8abb      	ldrh	r3, [r7, #20]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7fd f842 	bl	8001c7c <eMBRegDiscreteCB>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	72fb      	strb	r3, [r7, #11]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004c02:	7afb      	ldrb	r3, [r7, #11]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa4f 	bl	80050a8 <prveMBError2Exception>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75bb      	strb	r3, [r7, #22]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004c0e:	e00d      	b.n	8004c2c <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004c20:	e004      	b.n	8004c2c <eMBFuncReadDiscreteInputs+0xf4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c22:	2303      	movs	r3, #3
 8004c24:	75bb      	strb	r3, [r7, #22]
 8004c26:	e001      	b.n	8004c2c <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8004c2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d122      	bne.n	8004c94 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3301      	adds	r3, #1
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	89bb      	ldrh	r3, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004c68:	89bb      	ldrh	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	1cd8      	adds	r0, r3, #3
 8004c72:	89b9      	ldrh	r1, [r7, #12]
 8004c74:	2301      	movs	r3, #1
 8004c76:	2201      	movs	r2, #1
 8004c78:	f7fc ff74 	bl	8001b64 <eMBRegHoldingCB>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8004c80:	7afb      	ldrb	r3, [r7, #11]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fa0d 	bl	80050a8 <prveMBError2Exception>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	e001      	b.n	8004c98 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004c94:	2303      	movs	r3, #3
 8004c96:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d946      	bls.n	8004d48 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	89bb      	ldrh	r3, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004cd4:	89bb      	ldrh	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	897b      	ldrh	r3, [r7, #10]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	795b      	ldrb	r3, [r3, #5]
 8004cf8:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8004d00:	897b      	ldrh	r3, [r7, #10]
 8004d02:	2b78      	cmp	r3, #120	; 0x78
 8004d04:	d81d      	bhi.n	8004d42 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8004d0e:	7a7a      	ldrb	r2, [r7, #9]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d116      	bne.n	8004d42 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1d98      	adds	r0, r3, #6
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8004d18:	897a      	ldrh	r2, [r7, #10]
 8004d1a:	89b9      	ldrh	r1, [r7, #12]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f7fc ff21 	bl	8001b64 <eMBRegHoldingCB>
 8004d22:	4603      	mov	r3, r0
 8004d24:	723b      	strb	r3, [r7, #8]
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004d26:	7a3b      	ldrb	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004d2c:	7a3b      	ldrb	r3, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f9ba 	bl	80050a8 <prveMBError2Exception>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004d38:	e008      	b.n	8004d4c <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2205      	movs	r2, #5
 8004d3e:	801a      	strh	r2, [r3, #0]
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004d40:	e004      	b.n	8004d4c <eMBFuncWriteMultipleHoldingRegister+0xa8>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d42:	2303      	movs	r3, #3
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e001      	b.n	8004d4c <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop

08004d58 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d15c      	bne.n	8004e28 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3301      	adds	r3, #1
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	8abb      	ldrh	r3, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004d88:	8abb      	ldrh	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3303      	adds	r3, #3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004da2:	8a7b      	ldrh	r3, [r7, #18]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03c      	beq.n	8004e22 <eMBFuncReadHoldingRegister+0xca>
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
 8004daa:	2b7d      	cmp	r3, #125	; 0x7d
 8004dac:	d839      	bhi.n	8004e22 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	60fa      	str	r2, [r7, #12]
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	60fa      	str	r2, [r7, #12]
 8004dd4:	8a7a      	ldrh	r2, [r7, #18]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	0052      	lsls	r2, r2, #1
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	3301      	adds	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8004dea:	8a7a      	ldrh	r2, [r7, #18]
 8004dec:	8ab9      	ldrh	r1, [r7, #20]
 8004dee:	2300      	movs	r3, #0
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7fc feb7 	bl	8001b64 <eMBRegHoldingCB>
 8004df6:	4603      	mov	r3, r0
 8004df8:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d006      	beq.n	8004e0e <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f950 	bl	80050a8 <prveMBError2Exception>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004e0c:	e00e      	b.n	8004e2c <eMBFuncReadHoldingRegister+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
            }
            else
            {
                *usLen += usRegCount * 2;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	8a7b      	ldrh	r3, [r7, #18]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	801a      	strh	r2, [r3, #0]
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004e20:	e004      	b.n	8004e2c <eMBFuncReadHoldingRegister+0xd4>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e22:	2303      	movs	r3, #3
 8004e24:	75fb      	strb	r3, [r7, #23]
 8004e26:	e001      	b.n	8004e2c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop

08004e38 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	f240 8099 	bls.w	8004f82 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3301      	adds	r3, #1
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	8abb      	ldrh	r3, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8004e6a:	8abb      	ldrh	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3303      	adds	r3, #3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	8a7b      	ldrh	r3, [r7, #18]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3305      	adds	r3, #5
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3306      	adds	r3, #6
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	8a3b      	ldrh	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8004ea4:	8a3b      	ldrh	r3, [r7, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3307      	adds	r3, #7
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7a5b      	ldrb	r3, [r3, #9]
 8004ec8:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004eca:	8a7b      	ldrh	r3, [r7, #18]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d056      	beq.n	8004f7e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8004ed0:	8a7b      	ldrh	r3, [r7, #18]
 8004ed2:	2b7d      	cmp	r3, #125	; 0x7d
 8004ed4:	d853      	bhi.n	8004f7e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8004ed6:	89fb      	ldrh	r3, [r7, #14]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d050      	beq.n	8004f7e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8004edc:	89fb      	ldrh	r3, [r7, #14]
 8004ede:	2b79      	cmp	r3, #121	; 0x79
 8004ee0:	d84d      	bhi.n	8004f7e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	005a      	lsls	r2, r3, #1
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d148      	bne.n	8004f7e <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 000a 	add.w	r0, r3, #10
 8004ef2:	89fa      	ldrh	r2, [r7, #14]
 8004ef4:	8a39      	ldrh	r1, [r7, #16]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f7fc fe34 	bl	8001b64 <eMBRegHoldingCB>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8004f00:	7dbb      	ldrb	r3, [r7, #22]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d131      	bne.n	8004f6a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	60ba      	str	r2, [r7, #8]
 8004f16:	2217      	movs	r2, #23
 8004f18:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	60ba      	str	r2, [r7, #8]
 8004f2c:	8a7a      	ldrh	r2, [r7, #18]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	0052      	lsls	r2, r2, #1
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
 8004f42:	8a7a      	ldrh	r2, [r7, #18]
 8004f44:	8ab9      	ldrh	r1, [r7, #20]
 8004f46:	2300      	movs	r3, #0
 8004f48:	68b8      	ldr	r0, [r7, #8]
 8004f4a:	f7fc fe0b 	bl	8001b64 <eMBRegHoldingCB>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75bb      	strb	r3, [r7, #22]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8004f52:	7dbb      	ldrb	r3, [r7, #22]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	8a7b      	ldrh	r3, [r7, #18]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8004f6a:	7dbb      	ldrb	r3, [r7, #22]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004f70:	7dbb      	ldrb	r3, [r7, #22]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f898 	bl	80050a8 <prveMBError2Exception>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]
                if( eRegStatus == MB_ENOERR )
                {
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
 8004f7c:	e001      	b.n	8004f82 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d15f      	bne.n	8005062 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	8abb      	ldrh	r3, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004fbc:	8abb      	ldrh	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3303      	adds	r3, #3
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	8a7b      	ldrh	r3, [r7, #18]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8004fdc:	8a7b      	ldrh	r3, [r7, #18]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004fe2:	8a7b      	ldrh	r3, [r7, #18]
 8004fe4:	2b7c      	cmp	r3, #124	; 0x7c
 8004fe6:	d839      	bhi.n	800505c <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	60fa      	str	r2, [r7, #12]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	60fa      	str	r2, [r7, #12]
 800500e:	8a7a      	ldrh	r2, [r7, #18]
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	0052      	lsls	r2, r2, #1
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8005024:	8a7a      	ldrh	r2, [r7, #18]
 8005026:	8abb      	ldrh	r3, [r7, #20]
 8005028:	4619      	mov	r1, r3
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7fc fd8c 	bl	8001b48 <eMBRegInputCB>
 8005030:	4603      	mov	r3, r0
 8005032:	72fb      	strb	r3, [r7, #11]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800503a:	7afb      	ldrb	r3, [r7, #11]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f833 	bl	80050a8 <prveMBError2Exception>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005046:	e00e      	b.n	8005066 <eMBFuncReadInputRegister+0xda>
            {
                eStatus = prveMBError2Exception( eRegStatus );
            }
            else
            {
                *usLen += usRegCount * 2;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	881a      	ldrh	r2, [r3, #0]
 800504c:	8a7b      	ldrh	r3, [r7, #18]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	4413      	add	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800505a:	e004      	b.n	8005066 <eMBFuncReadInputRegister+0xda>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800505c:	2303      	movs	r3, #3
 800505e:	75fb      	strb	r3, [r7, #23]
 8005060:	e001      	b.n	8005066 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005062:	2303      	movs	r3, #3
 8005064:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1c58      	adds	r0, r3, #1
 800507e:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <eMBFuncReportSlaveID+0x30>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <eMBFuncReportSlaveID+0x34>)
 8005086:	f004 fce9 	bl	8009a5c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <eMBFuncReportSlaveID+0x30>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	200003fc 	.word	0x200003fc
 80050a4:	200003dc 	.word	0x200003dc

080050a8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d006      	beq.n	80050c6 <prveMBError2Exception+0x1e>
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	d007      	beq.n	80050cc <prveMBError2Exception+0x24>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <prveMBError2Exception+0x2a>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
            break;
 80050c4:	e008      	b.n	80050d8 <prveMBError2Exception+0x30>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80050c6:	2302      	movs	r3, #2
 80050c8:	73fb      	strb	r3, [r7, #15]
            break;
 80050ca:	e005      	b.n	80050d8 <prveMBError2Exception+0x30>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80050cc:	2306      	movs	r3, #6
 80050ce:	73fb      	strb	r3, [r7, #15]
            break;
 80050d0:	e002      	b.n	80050d8 <prveMBError2Exception+0x30>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80050d2:	2304      	movs	r3, #4
 80050d4:	73fb      	strb	r3, [r7, #15]
            break;
 80050d6:	bf00      	nop
    }

    return eStatus;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4603      	mov	r3, r0
 80050ee:	71fb      	strb	r3, [r7, #7]
 80050f0:	460b      	mov	r3, r1
 80050f2:	71bb      	strb	r3, [r7, #6]
 80050f4:	4613      	mov	r3, r2
 80050f6:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80050fc:	79bb      	ldrb	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <eMBInit+0x2a>
 8005102:	79bb      	ldrb	r3, [r7, #6]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8005108:	79bb      	ldrb	r3, [r7, #6]
 800510a:	2bf7      	cmp	r3, #247	; 0xf7
 800510c:	d902      	bls.n	8005114 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 800510e:	2302      	movs	r3, #2
 8005110:	73fb      	strb	r3, [r7, #15]
 8005112:	e03a      	b.n	800518a <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <eMBInit+0xb0>)
 8005116:	79bb      	ldrb	r3, [r7, #6]
 8005118:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d121      	bne.n	8005164 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <eMBInit+0xb4>)
 8005122:	4a1e      	ldr	r2, [pc, #120]	; (800519c <eMBInit+0xb8>)
 8005124:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <eMBInit+0xbc>)
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <eMBInit+0xc0>)
 800512a:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <eMBInit+0xc4>)
 800512e:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <eMBInit+0xc8>)
 8005130:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8005132:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <eMBInit+0xcc>)
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <eMBInit+0xd0>)
 8005136:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <eMBInit+0xd4>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <eMBInit+0xd8>)
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <eMBInit+0xdc>)
 8005142:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <eMBInit+0xe0>)
 8005146:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <eMBInit+0xe4>)
 8005148:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <eMBInit+0xe8>)
 800514c:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <eMBInit+0xec>)
 800514e:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <eMBInit+0xb0>)
 8005152:	7818      	ldrb	r0, [r3, #0]
 8005154:	7e3b      	ldrb	r3, [r7, #24]
 8005156:	7979      	ldrb	r1, [r7, #5]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	f000 f941 	bl	80053e0 <eMBRTUInit>
 800515e:	4603      	mov	r3, r0
 8005160:	73fb      	strb	r3, [r7, #15]
            break;
 8005162:	e001      	b.n	8005168 <eMBInit+0x84>
            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8005164:	2302      	movs	r3, #2
 8005166:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800516e:	f000 faf1 	bl	8005754 <xMBPortEventInit>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8005178:	2303      	movs	r3, #3
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e005      	b.n	800518a <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800517e:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <eMBInit+0xf0>)
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <eMBInit+0xf4>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	200003fe 	.word	0x200003fe
 8005198:	20000404 	.word	0x20000404
 800519c:	08005455 	.word	0x08005455
 80051a0:	20000408 	.word	0x20000408
 80051a4:	08005479 	.word	0x08005479
 80051a8:	20000400 	.word	0x20000400
 80051ac:	080054fd 	.word	0x080054fd
 80051b0:	2000040c 	.word	0x2000040c
 80051b4:	08005491 	.word	0x08005491
 80051b8:	20000410 	.word	0x20000410
 80051bc:	200025ec 	.word	0x200025ec
 80051c0:	080055c1 	.word	0x080055c1
 80051c4:	200025e4 	.word	0x200025e4
 80051c8:	0800566d 	.word	0x0800566d
 80051cc:	200025e8 	.word	0x200025e8
 80051d0:	08005705 	.word	0x08005705
 80051d4:	200003ff 	.word	0x200003ff
 80051d8:	200000f8 	.word	0x200000f8

080051dc <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80051e2:	2300      	movs	r3, #0
 80051e4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <eMBEnable+0x30>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d106      	bne.n	80051fc <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <eMBEnable+0x34>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <eMBEnable+0x30>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e001      	b.n	8005200 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80051fc:	2306      	movs	r3, #6
 80051fe:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8005200:	79fb      	ldrb	r3, [r7, #7]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	200000f8 	.word	0x200000f8
 8005210:	20000404 	.word	0x20000404

08005214 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800521a:	2300      	movs	r3, #0
 800521c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800521e:	4b4b      	ldr	r3, [pc, #300]	; (800534c <eMBPoll+0x138>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8005226:	2306      	movs	r3, #6
 8005228:	e08c      	b.n	8005344 <eMBPoll+0x130>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800522a:	1cbb      	adds	r3, r7, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fab3 	bl	8005798 <xMBPortEventGet>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 8084 	bne.w	8005342 <eMBPoll+0x12e>
    {
        switch ( eEvent )
 800523a:	78bb      	ldrb	r3, [r7, #2]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d003      	beq.n	8005248 <eMBPoll+0x34>
 8005240:	2b03      	cmp	r3, #3
 8005242:	d07b      	beq.n	800533c <eMBPoll+0x128>
 8005244:	2b00      	cmp	r3, #0
        {
        case EV_READY:
            break;
 8005246:	e07c      	b.n	8005342 <eMBPoll+0x12e>

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8005248:	4b41      	ldr	r3, [pc, #260]	; (8005350 <eMBPoll+0x13c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a41      	ldr	r2, [pc, #260]	; (8005354 <eMBPoll+0x140>)
 800524e:	4942      	ldr	r1, [pc, #264]	; (8005358 <eMBPoll+0x144>)
 8005250:	4842      	ldr	r0, [pc, #264]	; (800535c <eMBPoll+0x148>)
 8005252:	4798      	blx	r3
 8005254:	4603      	mov	r3, r0
 8005256:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d170      	bne.n	8005340 <eMBPoll+0x12c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <eMBPoll+0x148>)
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	4b3f      	ldr	r3, [pc, #252]	; (8005360 <eMBPoll+0x14c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d003      	beq.n	8005272 <eMBPoll+0x5e>
 800526a:	4b3c      	ldr	r3, [pc, #240]	; (800535c <eMBPoll+0x148>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d166      	bne.n	8005340 <eMBPoll+0x12c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8005272:	2002      	movs	r0, #2
 8005274:	f000 fa7a 	bl	800576c <xMBPortEventPost>
                    ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8005278:	4b37      	ldr	r3, [pc, #220]	; (8005358 <eMBPoll+0x144>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	4b39      	ldr	r3, [pc, #228]	; (8005364 <eMBPoll+0x150>)
 8005280:	701a      	strb	r2, [r3, #0]
                      eException = MB_EX_ILLEGAL_FUNCTION;
 8005282:	4b39      	ldr	r3, [pc, #228]	; (8005368 <eMBPoll+0x154>)
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
                      for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8005288:	2300      	movs	r3, #0
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	e01f      	b.n	80052ce <eMBPoll+0xba>
                      {
                          /* No more function handlers registered. Abort. */
                          if( xFuncHandlers[i].ucFunctionCode == 0 )
 800528e:	4a37      	ldr	r2, [pc, #220]	; (800536c <eMBPoll+0x158>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01d      	beq.n	80052d6 <eMBPoll+0xc2>
                          {
                              break;
                          }
                          else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800529a:	4a34      	ldr	r2, [pc, #208]	; (800536c <eMBPoll+0x158>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <eMBPoll+0x150>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d10e      	bne.n	80052c8 <eMBPoll+0xb4>
                          {
                              eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80052aa:	4a30      	ldr	r2, [pc, #192]	; (800536c <eMBPoll+0x158>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a28      	ldr	r2, [pc, #160]	; (8005358 <eMBPoll+0x144>)
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	4926      	ldr	r1, [pc, #152]	; (8005354 <eMBPoll+0x140>)
 80052ba:	4610      	mov	r0, r2
 80052bc:	4798      	blx	r3
 80052be:	4603      	mov	r3, r0
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <eMBPoll+0x154>)
 80052c4:	701a      	strb	r2, [r3, #0]
                              break;
 80052c6:	e007      	b.n	80052d8 <eMBPoll+0xc4>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
                    ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
                      eException = MB_EX_ILLEGAL_FUNCTION;
                      for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	dddc      	ble.n	800528e <eMBPoll+0x7a>
 80052d4:	e000      	b.n	80052d8 <eMBPoll+0xc4>
                      {
                          /* No more function handlers registered. Abort. */
                          if( xFuncHandlers[i].ucFunctionCode == 0 )
                          {
                              break;
 80052d6:	bf00      	nop
                          }
                      }

                      /* If the request was not sent to the broadcast address we
                       * return a reply. */
                      if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80052d8:	4b20      	ldr	r3, [pc, #128]	; (800535c <eMBPoll+0x148>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02f      	beq.n	8005340 <eMBPoll+0x12c>
                      {
                          if( eException != MB_EX_NONE )
 80052e0:	4b21      	ldr	r3, [pc, #132]	; (8005368 <eMBPoll+0x154>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01d      	beq.n	8005324 <eMBPoll+0x110>
                          {
                              /* An exception occured. Build an error frame. */
                              usLength = 0;
 80052e8:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <eMBPoll+0x140>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	801a      	strh	r2, [r3, #0]
                              ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <eMBPoll+0x144>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <eMBPoll+0x140>)
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	b288      	uxth	r0, r1
 80052fa:	4916      	ldr	r1, [pc, #88]	; (8005354 <eMBPoll+0x140>)
 80052fc:	8008      	strh	r0, [r1, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <eMBPoll+0x150>)
 8005302:	7812      	ldrb	r2, [r2, #0]
 8005304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
                              ucMBFrame[usLength++] = eException;
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <eMBPoll+0x144>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b10      	ldr	r3, [pc, #64]	; (8005354 <eMBPoll+0x140>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	1c59      	adds	r1, r3, #1
 8005316:	b288      	uxth	r0, r1
 8005318:	490e      	ldr	r1, [pc, #56]	; (8005354 <eMBPoll+0x140>)
 800531a:	8008      	strh	r0, [r1, #0]
 800531c:	4413      	add	r3, r2
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <eMBPoll+0x154>)
 8005320:	7812      	ldrb	r2, [r2, #0]
 8005322:	701a      	strb	r2, [r3, #0]
                          }
                          if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                          {
                              vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                          }
                          eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <eMBPoll+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <eMBPoll+0x14c>)
 800532a:	7810      	ldrb	r0, [r2, #0]
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <eMBPoll+0x144>)
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <eMBPoll+0x140>)
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	4798      	blx	r3
 8005336:	4603      	mov	r3, r0
 8005338:	70fb      	strb	r3, [r7, #3]
                      }
                }
            }
            break;
 800533a:	e001      	b.n	8005340 <eMBPoll+0x12c>
//                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
//            }
//            break;

        case EV_FRAME_SENT:
            break;
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <eMBPoll+0x12e>
                          }
                          eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
                      }
                }
            }
            break;
 8005340:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	200000f8 	.word	0x200000f8
 8005350:	2000040c 	.word	0x2000040c
 8005354:	2000041c 	.word	0x2000041c
 8005358:	20000418 	.word	0x20000418
 800535c:	20000414 	.word	0x20000414
 8005360:	200003fe 	.word	0x200003fe
 8005364:	2000041e 	.word	0x2000041e
 8005368:	2000041f 	.word	0x2000041f
 800536c:	200000fc 	.word	0x200000fc
 8005370:	20000400 	.word	0x20000400

08005374 <usMBCRC16>:
    0x41, 0x81, 0x80,
    0x40
};

USHORT usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
    UCHAR ucCRCHi = 0xFF;
 8005380:	23ff      	movs	r3, #255	; 0xff
 8005382:	73fb      	strb	r3, [r7, #15]
    UCHAR ucCRCLo = 0xFF;
 8005384:	23ff      	movs	r3, #255	; 0xff
 8005386:	73bb      	strb	r3, [r7, #14]
    int iIndex;

    while ( usLen-- )
 8005388:	e013      	b.n	80053b2 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	4053      	eors	r3, r2
 8005396:	b2db      	uxtb	r3, r3
 8005398:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ucCRCHi ^ aucCRCHi[ iIndex ];
 800539a:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <usMBCRC16+0x64>)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4413      	add	r3, r2
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	4053      	eors	r3, r2
 80053a6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[ iIndex ];
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <usMBCRC16+0x68>)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	73fb      	strb	r3, [r7, #15]
{
    UCHAR ucCRCHi = 0xFF;
    UCHAR ucCRCLo = 0xFF;
    int iIndex;

    while ( usLen-- )
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	807a      	strh	r2, [r7, #2]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <usMBCRC16+0x16>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ aucCRCHi[ iIndex ];
        ucCRCHi = aucCRCLo[ iIndex ];
    }
    return ucCRCHi << 8 | ucCRCLo;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	b21a      	sxth	r2, r3
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b21b      	sxth	r3, r3
 80053ca:	b29b      	uxth	r3, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	0800a964 	.word	0x0800a964
 80053dc:	0800aa64 	.word	0x0800aa64

080053e0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	603a      	str	r2, [r7, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
 80053ee:	460b      	mov	r3, r1
 80053f0:	71bb      	strb	r3, [r7, #6]
 80053f2:	4613      	mov	r3, r2
 80053f4:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80053fa:	b672      	cpsid	i

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80053fc:	797b      	ldrb	r3, [r7, #5]
 80053fe:	79b8      	ldrb	r0, [r7, #6]
 8005400:	2208      	movs	r2, #8
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	f000 fa20 	bl	8005848 <xMBPortSerialInit>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d002      	beq.n	8005414 <eMBRTUInit+0x34>
    {
        eStatus = MB_EPORTERR;
 800540e:	2303      	movs	r3, #3
 8005410:	73fb      	strb	r3, [r7, #15]
 8005412:	e016      	b.n	8005442 <eMBRTUInit+0x62>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800541a:	d902      	bls.n	8005422 <eMBRTUInit+0x42>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800541c:	2323      	movs	r3, #35	; 0x23
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	e005      	b.n	800542e <eMBRTUInit+0x4e>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <eMBRTUInit+0x70>)
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	b29b      	uxth	r3, r3
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fadc 	bl	80059f0 <xMBPortTimersInit>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <eMBRTUInit+0x62>
        {
            eStatus = MB_EPORTERR;
 800543e:	2303      	movs	r3, #3
 8005440:	73fb      	strb	r3, [r7, #15]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8005442:	b662      	cpsie	i
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	00177fa0 	.word	0x00177fa0

08005454 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8005458:	b672      	cpsid	i
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <eMBRTUStart+0x20>)
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8005460:	2100      	movs	r1, #0
 8005462:	2001      	movs	r0, #1
 8005464:	f000 f9b6 	bl	80057d4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8005468:	f000 fb02 	bl	8005a70 <vMBPortTimersEnable>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800546c:	b662      	cpsie	i

    EXIT_CRITICAL_SECTION(  );
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000421 	.word	0x20000421

08005478 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800547c:	b672      	cpsid	i
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 800547e:	2100      	movs	r1, #0
 8005480:	2000      	movs	r0, #0
 8005482:	f000 f9a7 	bl	80057d4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8005486:	f000 fb01 	bl	8005a8c <vMBPortTimersDisable>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800548a:	b662      	cpsie	i
    EXIT_CRITICAL_SECTION(  );
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}

08005490 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
    //BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
 800549c:	2300      	movs	r3, #0
 800549e:	75fb      	strb	r3, [r7, #23]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80054a0:	b672      	cpsid	i
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <eMBRTUReceive+0x60>)
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d919      	bls.n	80054e0 <eMBRTUReceive+0x50>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <eMBRTUReceive+0x60>)
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	480f      	ldr	r0, [pc, #60]	; (80054f4 <eMBRTUReceive+0x64>)
 80054b6:	f7ff ff5d 	bl	8005374 <usMBCRC16>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <eMBRTUReceive+0x50>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <eMBRTUReceive+0x64>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <eMBRTUReceive+0x60>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b03      	subs	r3, #3
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <eMBRTUReceive+0x68>)
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e001      	b.n	80054e4 <eMBRTUReceive+0x54>
        //xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 80054e0:	2305      	movs	r3, #5
 80054e2:	75fb      	strb	r3, [r7, #23]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80054e4:	b662      	cpsie	i
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000042a 	.word	0x2000042a
 80054f4:	200025f8 	.word	0x200025f8
 80054f8:	200025f9 	.word	0x200025f9

080054fc <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	71fb      	strb	r3, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8005510:	b672      	cpsid	i

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <eMBRTUSend+0xb0>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d13f      	bne.n	800559c <eMBRTUSend+0xa0>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <eMBRTUSend+0xb4>)
 8005522:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <eMBRTUSend+0xb8>)
 8005526:	2201      	movs	r2, #1
 8005528:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <eMBRTUSend+0xb4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <eMBRTUSend+0xb8>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <eMBRTUSend+0xb8>)
 8005540:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <eMBRTUSend+0xb4>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <eMBRTUSend+0xb8>)
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7ff ff10 	bl	8005374 <usMBCRC16>
 8005554:	4603      	mov	r3, r0
 8005556:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8005558:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <eMBRTUSend+0xb8>)
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	b291      	uxth	r1, r2
 8005562:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <eMBRTUSend+0xb8>)
 8005564:	8011      	strh	r1, [r2, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	89bb      	ldrh	r3, [r7, #12]
 800556a:	b2d9      	uxtb	r1, r3
 800556c:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <eMBRTUSend+0xbc>)
 800556e:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <eMBRTUSend+0xb8>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	b291      	uxth	r1, r2
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <eMBRTUSend+0xb8>)
 800557c:	8011      	strh	r1, [r2, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	89bb      	ldrh	r3, [r7, #12]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	b29b      	uxth	r3, r3
 8005586:	b2d9      	uxtb	r1, r3
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <eMBRTUSend+0xbc>)
 800558a:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <eMBRTUSend+0xc0>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8005592:	2101      	movs	r1, #1
 8005594:	2000      	movs	r0, #0
 8005596:	f000 f91d 	bl	80057d4 <vMBPortSerialEnable>
 800559a:	e001      	b.n	80055a0 <eMBRTUSend+0xa4>
    }
    else
    {
        eStatus = MB_EIO;
 800559c:	2305      	movs	r3, #5
 800559e:	73fb      	strb	r3, [r7, #15]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80055a0:	b662      	cpsie	i
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000421 	.word	0x20000421
 80055b0:	20000424 	.word	0x20000424
 80055b4:	20000428 	.word	0x20000428
 80055b8:	200025f8 	.word	0x200025f8
 80055bc:	20000420 	.word	0x20000420

080055c0 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80055ca:	1dbb      	adds	r3, r7, #6
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f9d3 	bl	8005978 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80055d2:	4b23      	ldr	r3, [pc, #140]	; (8005660 <xMBRTUReceiveFSM+0xa0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d83c      	bhi.n	8005656 <xMBRTUReceiveFSM+0x96>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <xMBRTUReceiveFSM+0x24>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005601 	.word	0x08005601
 80055ec:	08005629 	.word	0x08005629
 80055f0:	080055fb 	.word	0x080055fb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80055f4:	f000 fa3c 	bl	8005a70 <vMBPortTimersEnable>
        break;
 80055f8:	e02d      	b.n	8005656 <xMBRTUReceiveFSM+0x96>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80055fa:	f000 fa39 	bl	8005a70 <vMBPortTimersEnable>
        break;
 80055fe:	e02a      	b.n	8005656 <xMBRTUReceiveFSM+0x96>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 8005602:	2200      	movs	r2, #0
 8005604:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	b291      	uxth	r1, r2
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 8005612:	8011      	strh	r1, [r2, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	79b9      	ldrb	r1, [r7, #6]
 8005618:	4b13      	ldr	r3, [pc, #76]	; (8005668 <xMBRTUReceiveFSM+0xa8>)
 800561a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xMBRTUReceiveFSM+0xa0>)
 800561e:	2202      	movs	r2, #2
 8005620:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8005622:	f000 fa25 	bl	8005a70 <vMBPortTimersEnable>
        break;
 8005626:	e016      	b.n	8005656 <xMBRTUReceiveFSM+0x96>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	2bff      	cmp	r3, #255	; 0xff
 8005630:	d80b      	bhi.n	800564a <xMBRTUReceiveFSM+0x8a>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	b291      	uxth	r1, r2
 800563c:	4a09      	ldr	r2, [pc, #36]	; (8005664 <xMBRTUReceiveFSM+0xa4>)
 800563e:	8011      	strh	r1, [r2, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	79b9      	ldrb	r1, [r7, #6]
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <xMBRTUReceiveFSM+0xa8>)
 8005646:	5499      	strb	r1, [r3, r2]
 8005648:	e002      	b.n	8005650 <xMBRTUReceiveFSM+0x90>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <xMBRTUReceiveFSM+0xa0>)
 800564c:	2203      	movs	r2, #3
 800564e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8005650:	f000 fa0e 	bl	8005a70 <vMBPortTimersEnable>
        break;
 8005654:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8005656:	79fb      	ldrb	r3, [r7, #7]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000421 	.word	0x20000421
 8005664:	2000042a 	.word	0x2000042a
 8005668:	200025f8 	.word	0x200025f8

0800566c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 8005676:	4b1f      	ldr	r3, [pc, #124]	; (80056f4 <xMBRTUTransmitFSM+0x88>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xMBRTUTransmitFSM+0x1a>
 8005680:	2b01      	cmp	r3, #1
 8005682:	d005      	beq.n	8005690 <xMBRTUTransmitFSM+0x24>
 8005684:	e031      	b.n	80056ea <xMBRTUTransmitFSM+0x7e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8005686:	2100      	movs	r1, #0
 8005688:	2001      	movs	r0, #1
 800568a:	f000 f8a3 	bl	80057d4 <vMBPortSerialEnable>
        break;
 800568e:	e02c      	b.n	80056ea <xMBRTUTransmitFSM+0x7e>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <xMBRTUTransmitFSM+0x8c>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <xMBRTUTransmitFSM+0x90>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f956 	bl	8005954 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <xMBRTUTransmitFSM+0x90>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <xMBRTUTransmitFSM+0x90>)
 80056b0:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80056b2:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <xMBRTUTransmitFSM+0x8c>)
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <xMBRTUTransmitFSM+0x8c>)
 80056be:	801a      	strh	r2, [r3, #0]
        		 * empty interrupt. */
        		vMBPortSerialEnable( TRUE, FALSE );
        		eSndState = STATE_TX_IDLE;
        	}
        }
        break;
 80056c0:	e012      	b.n	80056e8 <xMBRTUTransmitFSM+0x7c>
            usSndBufferCount--;
        }
        else
        {
        	//TODO: Added for testing waiting for transmit to finish
        	if(ADCT_BGS_RS485_USART_PORT->SR & USART_SR_TC)
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <xMBRTUTransmitFSM+0x94>)
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <xMBRTUTransmitFSM+0x7c>
        	{
        		xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80056d0:	2003      	movs	r0, #3
 80056d2:	f000 f84b 	bl	800576c <xMBPortEventPost>
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
        		/* Disable transmitter. This prevents another transmit buffer
        		 * empty interrupt. */
        		vMBPortSerialEnable( TRUE, FALSE );
 80056da:	2100      	movs	r1, #0
 80056dc:	2001      	movs	r0, #1
 80056de:	f000 f879 	bl	80057d4 <vMBPortSerialEnable>
        		eSndState = STATE_TX_IDLE;
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <xMBRTUTransmitFSM+0x88>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
        	}
        }
        break;
 80056e8:	bf00      	nop
    }

    return xNeedPoll;
 80056ea:	79fb      	ldrb	r3, [r7, #7]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000420 	.word	0x20000420
 80056f8:	20000428 	.word	0x20000428
 80056fc:	20000424 	.word	0x20000424
 8005700:	40004800 	.word	0x40004800

08005704 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <xMBRTUTimerT35Expired+0x4c>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d009      	beq.n	800572c <xMBRTUTimerT35Expired+0x28>
 8005718:	2b03      	cmp	r3, #3
 800571a:	d00d      	beq.n	8005738 <xMBRTUTimerT35Expired+0x34>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10c      	bne.n	800573a <xMBRTUTimerT35Expired+0x36>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8005720:	2000      	movs	r0, #0
 8005722:	f000 f823 	bl	800576c <xMBPortEventPost>
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
        break;
 800572a:	e006      	b.n	800573a <xMBRTUTimerT35Expired+0x36>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800572c:	2001      	movs	r0, #1
 800572e:	f000 f81d 	bl	800576c <xMBPortEventPost>
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
        break;
 8005736:	e000      	b.n	800573a <xMBRTUTimerT35Expired+0x36>

        /* An error occured while receiving the frame. */
    case STATE_RX_ERROR:
        break;
 8005738:	bf00      	nop
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800573a:	f000 f9a7 	bl	8005a8c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <xMBRTUTimerT35Expired+0x4c>)
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8005744:	79fb      	ldrb	r3, [r7, #7]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000421 	.word	0x20000421

08005754 <xMBPortEventInit>:
static eMBEventType eQueuedEvent;
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortEventInit( void )
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <xMBPortEventInit+0x14>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800575e:	2301      	movs	r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	2000042d 	.word	0x2000042d

0800576c <xMBPortEventPost>:

BOOL xMBPortEventPost( eMBEventType eEvent )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <xMBPortEventPost+0x24>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800577c:	4a05      	ldr	r2, [pc, #20]	; (8005794 <xMBPortEventPost+0x28>)
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8005782:	2301      	movs	r3, #1
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	2000042d 	.word	0x2000042d
 8005794:	2000042c 	.word	0x2000042c

08005798 <xMBPortEventGet>:

BOOL xMBPortEventGet( eMBEventType * eEvent )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    BOOL xEventHappened = FALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]

    if ( xEventInQueue )
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <xMBPortEventGet+0x34>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <xMBPortEventGet+0x38>)
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <xMBPortEventGet+0x34>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	2000042d 	.word	0x2000042d
 80057d0:	2000042c 	.word	0x2000042c

080057d4 <vMBPortSerialEnable>:
/* ----------------------- Modbus includes ----------------------------------*/
#include "mb.h"
#include "mbport.h"

void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	460a      	mov	r2, r1
 80057de:	71fb      	strb	r3, [r7, #7]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71bb      	strb	r3, [r7, #6]
	if( xRxEnable )
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <vMBPortSerialEnable+0x2e>
	{
		/* enable RX interrupt */
		/* switch 485 to receive mode */
		GPIO_ResetBits(ADCT_BGS_RS485_DE_RE_PORT, ADCT_BGS_RS485_DE_RE_PIN);
 80057ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057ee:	4814      	ldr	r0, [pc, #80]	; (8005840 <vMBPortSerialEnable+0x6c>)
 80057f0:	f002 fc74 	bl	80080dc <GPIO_ResetBits>
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_RXNE, ENABLE );
 80057f4:	2201      	movs	r2, #1
 80057f6:	f240 5125 	movw	r1, #1317	; 0x525
 80057fa:	4812      	ldr	r0, [pc, #72]	; (8005844 <vMBPortSerialEnable+0x70>)
 80057fc:	f003 fc84 	bl	8009108 <USART_ITConfig>
 8005800:	e005      	b.n	800580e <vMBPortSerialEnable+0x3a>
	}
	else
	{
		/* disable RX interrupt */
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_RXNE, DISABLE );
 8005802:	2200      	movs	r2, #0
 8005804:	f240 5125 	movw	r1, #1317	; 0x525
 8005808:	480e      	ldr	r0, [pc, #56]	; (8005844 <vMBPortSerialEnable+0x70>)
 800580a:	f003 fc7d 	bl	8009108 <USART_ITConfig>
	}

	if ( xTxEnable )
 800580e:	79bb      	ldrb	r3, [r7, #6]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <vMBPortSerialEnable+0x58>
	{
		/* switch 485 to transmit mode */
		GPIO_SetBits(ADCT_BGS_RS485_DE_RE_PORT, ADCT_BGS_RS485_DE_RE_PIN);
 8005814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005818:	4809      	ldr	r0, [pc, #36]	; (8005840 <vMBPortSerialEnable+0x6c>)
 800581a:	f002 fc51 	bl	80080c0 <GPIO_SetBits>
		/* enable RX interrupt */
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE, ENABLE );
 800581e:	2201      	movs	r2, #1
 8005820:	f240 7127 	movw	r1, #1831	; 0x727
 8005824:	4807      	ldr	r0, [pc, #28]	; (8005844 <vMBPortSerialEnable+0x70>)
 8005826:	f003 fc6f 	bl	8009108 <USART_ITConfig>
	else
	{
		/* disable TX interrupt */
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE, DISABLE );
	}
}
 800582a:	e005      	b.n	8005838 <vMBPortSerialEnable+0x64>
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE, ENABLE );
	}
	else
	{
		/* disable TX interrupt */
		USART_ITConfig( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE, DISABLE );
 800582c:	2200      	movs	r2, #0
 800582e:	f240 7127 	movw	r1, #1831	; 0x727
 8005832:	4804      	ldr	r0, [pc, #16]	; (8005844 <vMBPortSerialEnable+0x70>)
 8005834:	f003 fc68 	bl	8009108 <USART_ITConfig>
	}
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40010c00 	.word	0x40010c00
 8005844:	40004800 	.word	0x40004800

08005848 <xMBPortSerialInit>:

BOOL xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits,
		eMBParity eParity )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6039      	str	r1, [r7, #0]
 8005850:	4611      	mov	r1, r2
 8005852:	461a      	mov	r2, r3
 8005854:	4603      	mov	r3, r0
 8005856:	71fb      	strb	r3, [r7, #7]
 8005858:	460b      	mov	r3, r1
 800585a:	71bb      	strb	r3, [r7, #6]
 800585c:	4613      	mov	r3, r2
 800585e:	717b      	strb	r3, [r7, #5]
	USART_InitTypeDef       USART_InitStructure;

	/* prevent compiler warning. */
	(void) ucPORT;

	RCC_APB1PeriphClockCmd( ADCT_BGS_RS485_USART_CLK, ENABLE );
 8005860:	2101      	movs	r1, #1
 8005862:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005866:	f003 f8fd 	bl	8008a64 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd( ADCT_BGS_RS485_DE_RE_CLK|ADCT_BGS_RS485_CLK|RCC_APB2Periph_AFIO, ENABLE );
 800586a:	2101      	movs	r1, #1
 800586c:	2009      	movs	r0, #9
 800586e:	f003 f8db 	bl	8008a28 <RCC_APB2PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_RS485_TX_PIN;
 8005872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005876:	833b      	strh	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8005878:	2318      	movs	r3, #24
 800587a:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800587c:	2303      	movs	r3, #3
 800587e:	76bb      	strb	r3, [r7, #26]

	GPIO_Init( ADCT_BGS_RS485_PORT, &GPIO_InitStructure );
 8005880:	f107 0318 	add.w	r3, r7, #24
 8005884:	4619      	mov	r1, r3
 8005886:	4831      	ldr	r0, [pc, #196]	; (800594c <xMBPortSerialInit+0x104>)
 8005888:	f002 fb2a 	bl	8007ee0 <GPIO_Init>


	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_RS485_RX_PIN    ;
 800588c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005890:	833b      	strh	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8005892:	2304      	movs	r3, #4
 8005894:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005896:	2303      	movs	r3, #3
 8005898:	76bb      	strb	r3, [r7, #26]

	GPIO_Init( ADCT_BGS_RS485_PORT, &GPIO_InitStructure );
 800589a:	f107 0318 	add.w	r3, r7, #24
 800589e:	4619      	mov	r1, r3
 80058a0:	482a      	ldr	r0, [pc, #168]	; (800594c <xMBPortSerialInit+0x104>)
 80058a2:	f002 fb1d 	bl	8007ee0 <GPIO_Init>
	NVIC_InitStructure.NVIC_IRQChannel = ADCT_BGS_RS485_USART_IRQ;
 80058a6:	2327      	movs	r3, #39	; 0x27
 80058a8:	773b      	strb	r3, [r7, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	777b      	strb	r3, [r7, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	77bb      	strb	r3, [r7, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	77fb      	strb	r3, [r7, #31]
	NVIC_Init(&NVIC_InitStructure);
 80058b6:	f107 031c 	add.w	r3, r7, #28
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fe28 	bl	8007510 <NVIC_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_RS485_DE_RE_PIN;
 80058c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c4:	833b      	strh	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80058c6:	2310      	movs	r3, #16
 80058c8:	76fb      	strb	r3, [r7, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80058ca:	2303      	movs	r3, #3
 80058cc:	76bb      	strb	r3, [r7, #26]
	GPIO_Init( ADCT_BGS_RS485_DE_RE_PORT, &GPIO_InitStructure );
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4619      	mov	r1, r3
 80058d4:	481d      	ldr	r0, [pc, #116]	; (800594c <xMBPortSerialInit+0x104>)
 80058d6:	f002 fb03 	bl	8007ee0 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = (uint32_t)ulBaudRate;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	60bb      	str	r3, [r7, #8]

	if( ucDataBits == 9 )
 80058de:	79bb      	ldrb	r3, [r7, #6]
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	d103      	bne.n	80058ec <xMBPortSerialInit+0xa4>
		USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 80058e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e8:	81bb      	strh	r3, [r7, #12]
 80058ea:	e001      	b.n	80058f0 <xMBPortSerialInit+0xa8>
	else
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80058ec:	2300      	movs	r3, #0
 80058ee:	81bb      	strh	r3, [r7, #12]

	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80058f0:	2300      	movs	r3, #0
 80058f2:	81fb      	strh	r3, [r7, #14]

	switch( eParity )
 80058f4:	797b      	ldrb	r3, [r7, #5]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d006      	beq.n	8005908 <xMBPortSerialInit+0xc0>
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d008      	beq.n	8005910 <xMBPortSerialInit+0xc8>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <xMBPortSerialInit+0xd0>
	{
	case MB_PAR_NONE:
		USART_InitStructure.USART_Parity = USART_Parity_No;
 8005902:	2300      	movs	r3, #0
 8005904:	823b      	strh	r3, [r7, #16]
		break;
 8005906:	e00a      	b.n	800591e <xMBPortSerialInit+0xd6>
	case MB_PAR_ODD:
		USART_InitStructure.USART_Parity = USART_Parity_Odd;
 8005908:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800590c:	823b      	strh	r3, [r7, #16]
		break;
 800590e:	e006      	b.n	800591e <xMBPortSerialInit+0xd6>
	case MB_PAR_EVEN:
		USART_InitStructure.USART_Parity = USART_Parity_Even;
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005914:	823b      	strh	r3, [r7, #16]
		break;
 8005916:	e002      	b.n	800591e <xMBPortSerialInit+0xd6>
	default:
		USART_InitStructure.USART_Parity = USART_Parity_No;
 8005918:	2300      	movs	r3, #0
 800591a:	823b      	strh	r3, [r7, #16]
		break;
 800591c:	bf00      	nop
	};

	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800591e:	230c      	movs	r3, #12
 8005920:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005922:	2300      	movs	r3, #0
 8005924:	82bb      	strh	r3, [r7, #20]

	USART_Init( ADCT_BGS_RS485_USART_PORT, &USART_InitStructure );
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	4619      	mov	r1, r3
 800592c:	4808      	ldr	r0, [pc, #32]	; (8005950 <xMBPortSerialInit+0x108>)
 800592e:	f003 fb11 	bl	8008f54 <USART_Init>

	vMBPortSerialEnable( TRUE, TRUE );
 8005932:	2101      	movs	r1, #1
 8005934:	2001      	movs	r0, #1
 8005936:	f7ff ff4d 	bl	80057d4 <vMBPortSerialEnable>

	USART_Cmd( ADCT_BGS_RS485_USART_PORT, ENABLE );
 800593a:	2101      	movs	r1, #1
 800593c:	4804      	ldr	r0, [pc, #16]	; (8005950 <xMBPortSerialInit+0x108>)
 800593e:	f003 fbc3 	bl	80090c8 <USART_Cmd>

	return TRUE;
 8005942:	2301      	movs	r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40010c00 	.word	0x40010c00
 8005950:	40004800 	.word	0x40004800

08005954 <xMBPortSerialPutByte>:

BOOL xMBPortSerialPutByte( CHAR ucByte )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	71fb      	strb	r3, [r7, #7]
	USART_SendData( ADCT_BGS_RS485_USART_PORT, (uint16_t) ucByte );
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	b29b      	uxth	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	4803      	ldr	r0, [pc, #12]	; (8005974 <xMBPortSerialPutByte+0x20>)
 8005966:	f003 fc17 	bl	8009198 <USART_SendData>
	return TRUE;
 800596a:	2301      	movs	r3, #1
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40004800 	.word	0x40004800

08005978 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte( CHAR * pucByte )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	*pucByte = (CHAR) USART_ReceiveData( ADCT_BGS_RS485_USART_PORT );
 8005980:	4805      	ldr	r0, [pc, #20]	; (8005998 <xMBPortSerialGetByte+0x20>)
 8005982:	f003 fc1b 	bl	80091bc <USART_ReceiveData>
 8005986:	4603      	mov	r3, r0
 8005988:	b2da      	uxtb	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800598e:	2301      	movs	r3, #1
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40004800 	.word	0x40004800

0800599c <USART3_IRQHandler>:

void USART3_IRQHandler( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	if ( USART_GetITStatus( ADCT_BGS_RS485_USART_PORT, USART_IT_RXNE ) != RESET )
 80059a0:	f240 5125 	movw	r1, #1317	; 0x525
 80059a4:	480f      	ldr	r0, [pc, #60]	; (80059e4 <USART3_IRQHandler+0x48>)
 80059a6:	f003 fc19 	bl	80091dc <USART_GetITStatus>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <USART3_IRQHandler+0x24>
	{
		USART_ClearITPendingBit( ADCT_BGS_RS485_USART_PORT, USART_IT_RXNE );
 80059b0:	f240 5125 	movw	r1, #1317	; 0x525
 80059b4:	480b      	ldr	r0, [pc, #44]	; (80059e4 <USART3_IRQHandler+0x48>)
 80059b6:	f003 fc6b 	bl	8009290 <USART_ClearITPendingBit>
		pxMBFrameCBByteReceived();
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <USART3_IRQHandler+0x4c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4798      	blx	r3

	}
	if ( USART_GetITStatus( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE ) != RESET )
 80059c0:	f240 7127 	movw	r1, #1831	; 0x727
 80059c4:	4807      	ldr	r0, [pc, #28]	; (80059e4 <USART3_IRQHandler+0x48>)
 80059c6:	f003 fc09 	bl	80091dc <USART_GetITStatus>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <USART3_IRQHandler+0x44>
	{
		pxMBFrameCBTransmitterEmpty();
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <USART3_IRQHandler+0x50>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4798      	blx	r3
		//TODO: put this line after calling pxMBFrameCBTransmitterEmpty() fucntion
		USART_ClearITPendingBit( ADCT_BGS_RS485_USART_PORT, USART_IT_TXE );
 80059d6:	f240 7127 	movw	r1, #1831	; 0x727
 80059da:	4802      	ldr	r0, [pc, #8]	; (80059e4 <USART3_IRQHandler+0x48>)
 80059dc:	f003 fc58 	bl	8009290 <USART_ClearITPendingBit>
	}
}
 80059e0:	bf00      	nop
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40004800 	.word	0x40004800
 80059e8:	200025ec 	.word	0x200025ec
 80059ec:	200025e4 	.word	0x200025e4

080059f0 <xMBPortTimersInit>:
#include "mb.h"
#include "mbport.h"

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef base_timer;

    RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
 80059fa:	2101      	movs	r1, #1
 80059fc:	2004      	movs	r0, #4
 80059fe:	f003 f831 	bl	8008a64 <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseStructInit( &base_timer );
 8005a02:	f107 0308 	add.w	r3, r7, #8
 8005a06:	4618      	mov	r0, r3
 8005a08:	f003 f9fe 	bl	8008e08 <TIM_TimeBaseStructInit>

    base_timer.TIM_Prescaler = 1800 - 1;
 8005a0c:	f240 7307 	movw	r3, #1799	; 0x707
 8005a10:	813b      	strh	r3, [r7, #8]
    base_timer.TIM_Period = ( (uint32_t) usTim1Timerout50us ) - 1;
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	81bb      	strh	r3, [r7, #12]
    base_timer.TIM_ClockDivision = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	81fb      	strh	r3, [r7, #14]
    base_timer.TIM_CounterMode = TIM_CounterMode_Up;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	817b      	strh	r3, [r7, #10]
    TIM_TimeBaseInit( TIM4, &base_timer );
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	4619      	mov	r1, r3
 8005a28:	4810      	ldr	r0, [pc, #64]	; (8005a6c <xMBPortTimersInit+0x7c>)
 8005a2a:	f003 f971 	bl	8008d10 <TIM_TimeBaseInit>

    TIM_ClearITPendingBit( TIM4, TIM_IT_Update );
 8005a2e:	2101      	movs	r1, #1
 8005a30:	480e      	ldr	r0, [pc, #56]	; (8005a6c <xMBPortTimersInit+0x7c>)
 8005a32:	f003 fa7f 	bl	8008f34 <TIM_ClearITPendingBit>

    TIM_ITConfig( TIM4, TIM_IT_Update, ENABLE );
 8005a36:	2201      	movs	r2, #1
 8005a38:	2101      	movs	r1, #1
 8005a3a:	480c      	ldr	r0, [pc, #48]	; (8005a6c <xMBPortTimersInit+0x7c>)
 8005a3c:	f003 fa1e 	bl	8008e7c <TIM_ITConfig>

    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8005a40:	231e      	movs	r3, #30
 8005a42:	753b      	strb	r3, [r7, #20]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8005a44:	2301      	movs	r3, #1
 8005a46:	757b      	strb	r3, [r7, #21]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75bb      	strb	r3, [r7, #22]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
    NVIC_Init( &NVIC_InitStructure );
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 fd5b 	bl	8007510 <NVIC_Init>

    TIM_Cmd( TIM4, ENABLE );
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4803      	ldr	r0, [pc, #12]	; (8005a6c <xMBPortTimersInit+0x7c>)
 8005a5e:	f003 f9ed 	bl	8008e3c <TIM_Cmd>

    return TRUE;
 8005a62:	2301      	movs	r3, #1
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40000800 	.word	0x40000800

08005a70 <vMBPortTimersEnable>:


void vMBPortTimersEnable()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
    TIM_SetCounter( TIM4, 0 );
 8005a74:	2100      	movs	r1, #0
 8005a76:	4804      	ldr	r0, [pc, #16]	; (8005a88 <vMBPortTimersEnable+0x18>)
 8005a78:	f003 fa24 	bl	8008ec4 <TIM_SetCounter>
    TIM_Cmd( TIM4, ENABLE );
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4802      	ldr	r0, [pc, #8]	; (8005a88 <vMBPortTimersEnable+0x18>)
 8005a80:	f003 f9dc 	bl	8008e3c <TIM_Cmd>
}
 8005a84:	bf00      	nop
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40000800 	.word	0x40000800

08005a8c <vMBPortTimersDisable>:

void vMBPortTimersDisable()
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
    TIM_Cmd( TIM4, DISABLE );
 8005a90:	2100      	movs	r1, #0
 8005a92:	4802      	ldr	r0, [pc, #8]	; (8005a9c <vMBPortTimersDisable+0x10>)
 8005a94:	f003 f9d2 	bl	8008e3c <TIM_Cmd>
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40000800 	.word	0x40000800

08005aa0 <TIM4_IRQHandler>:

void TIM4_IRQHandler( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
    if ( TIM_GetITStatus( TIM4, TIM_IT_Update ) != RESET )
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4807      	ldr	r0, [pc, #28]	; (8005ac4 <TIM4_IRQHandler+0x24>)
 8005aa8:	f003 fa1a 	bl	8008ee0 <TIM_GetITStatus>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <TIM4_IRQHandler+0x20>
    {
        TIM_ClearITPendingBit( TIM4, TIM_IT_Update );
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4803      	ldr	r0, [pc, #12]	; (8005ac4 <TIM4_IRQHandler+0x24>)
 8005ab6:	f003 fa3d 	bl	8008f34 <TIM_ClearITPendingBit>

        (void) pxMBPortCBTimerExpired();
 8005aba:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <TIM4_IRQHandler+0x28>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4798      	blx	r3
    }
}
 8005ac0:	bf00      	nop
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	200025e8 	.word	0x200025e8

08005acc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <NVIC_EnableIRQ+0x2c>)
 8005ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	79fa      	ldrb	r2, [r7, #7]
 8005ae0:	f002 021f 	and.w	r2, r2, #31
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	e000e100 	.word	0xe000e100

08005afc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8005b06:	4909      	ldr	r1, [pc, #36]	; (8005b2c <NVIC_DisableIRQ+0x30>)
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	79fa      	ldrb	r2, [r7, #7]
 8005b10:	f002 021f 	and.w	r2, r2, #31
 8005b14:	2001      	movs	r0, #1
 8005b16:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1a:	3320      	adds	r3, #32
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	e000e100 	.word	0xe000e100

08005b30 <ADCT_PZEM004T_PutChar>:
static uint8_t (*txCallback)(uint8_t*);  ///< Callback function for transmitting data
uint8_t ADCT_PZEM004T_crc(uint8_t *data, uint8_t sz);
uint8_t ADCT_PZEM004T_receiveData(uint8_t resp, uint8_t *data);
void ADCT_PZEM0004T_sendData(const uint8_t *addr, uint8_t cmd, uint8_t data);
void ADCT_PZEM004T_PutChar(uint8_t  ch)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
	// disable IRQ so it doesn't screw up FIFO count - leads to errors in transmission
	ADCT_PZEM004T_IrqDisable;
 8005b3a:	2025      	movs	r0, #37	; 0x25
 8005b3c:	f7ff ffde 	bl	8005afc <NVIC_DisableIRQ>
	FIFO_Push(&txFifo,ch); // Put data in TX buffer
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	4619      	mov	r1, r3
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <ADCT_PZEM004T_PutChar+0x34>)
 8005b46:	f000 fc6b 	bl	8006420 <FIFO_Push>
	UART_PZEM004T_TransmitEnable();// Enable low level transmitter
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f240 7127 	movw	r1, #1831	; 0x727
 8005b50:	4805      	ldr	r0, [pc, #20]	; (8005b68 <ADCT_PZEM004T_PutChar+0x38>)
 8005b52:	f003 fad9 	bl	8009108 <USART_ITConfig>
	// enable IRQ again
	ADCT_PZEM004T_IrqEnable;
 8005b56:	2025      	movs	r0, #37	; 0x25
 8005b58:	f7ff ffb8 	bl	8005acc <NVIC_EnableIRQ>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	2000243c 	.word	0x2000243c
 8005b68:	40013800 	.word	0x40013800

08005b6c <ADCT_PZEM004T_getVoltage>:
		ADCT_PZEM004T_PutChar(buf[i]);
	}

}
float ADCT_PZEM004T_getVoltage(const uint8_t *addr)
{
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	uint8_t data[RESPONSE_DATA_SIZE];

	ADCT_PZEM0004T_sendData(addr, PZEM_VOLTAGE,0);
 8005b74:	2200      	movs	r2, #0
 8005b76:	21b0      	movs	r1, #176	; 0xb0
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f94f 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	if(!ADCT_PZEM004T_receiveData(RESP_VOLTAGE, data))
 8005b7e:	f107 0308 	add.w	r3, r7, #8
 8005b82:	4619      	mov	r1, r3
 8005b84:	20a0      	movs	r0, #160	; 0xa0
 8005b86:	f000 f8dd 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <ADCT_PZEM004T_getVoltage+0x28>
		return PZEM_ERROR_VALUE;
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <ADCT_PZEM004T_getVoltage+0x70>)
 8005b92:	e01e      	b.n	8005bd2 <ADCT_PZEM004T_getVoltage+0x66>

	return (data[0] << 8) + data[1] + (data[2] / 10.0);
 8005b94:	7a3b      	ldrb	r3, [r7, #8]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	7a7a      	ldrb	r2, [r7, #9]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fa fc29 	bl	80003f4 <__aeabi_i2d>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	7abb      	ldrb	r3, [r7, #10]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fa fc23 	bl	80003f4 <__aeabi_i2d>
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <ADCT_PZEM004T_getVoltage+0x74>)
 8005bb4:	f7fa fdae 	bl	8000714 <__aeabi_ddiv>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa facc 	bl	800015c <__adddf3>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	4621      	mov	r1, r4
 8005bcc:	f7fa feaa 	bl	8000924 <__aeabi_d2f>
 8005bd0:	4603      	mov	r3, r0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	bf800000 	.word	0xbf800000
 8005be0:	40240000 	.word	0x40240000

08005be4 <ADCT_PZEM004T_getCurrent>:

float ADCT_PZEM004T_getCurrent(const uint8_t *addr)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	uint8_t data[RESPONSE_DATA_SIZE];

	ADCT_PZEM0004T_sendData(addr, PZEM_CURRENT,0);
 8005bec:	2200      	movs	r2, #0
 8005bee:	21b1      	movs	r1, #177	; 0xb1
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f913 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	if(!ADCT_PZEM004T_receiveData(RESP_CURRENT, data))
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	20a1      	movs	r0, #161	; 0xa1
 8005bfe:	f000 f8a1 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <ADCT_PZEM004T_getCurrent+0x28>
		return PZEM_ERROR_VALUE;
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <ADCT_PZEM004T_getCurrent+0x70>)
 8005c0a:	e01e      	b.n	8005c4a <ADCT_PZEM004T_getCurrent+0x66>

	return (data[0] << 8) + data[1] + (data[2] / 100.0);
 8005c0c:	7a3b      	ldrb	r3, [r7, #8]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	7a7a      	ldrb	r2, [r7, #9]
 8005c12:	4413      	add	r3, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fbed 	bl	80003f4 <__aeabi_i2d>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	7abb      	ldrb	r3, [r7, #10]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fa fbe7 	bl	80003f4 <__aeabi_i2d>
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <ADCT_PZEM004T_getCurrent+0x74>)
 8005c2c:	f7fa fd72 	bl	8000714 <__aeabi_ddiv>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fa90 	bl	800015c <__adddf3>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	4618      	mov	r0, r3
 8005c42:	4621      	mov	r1, r4
 8005c44:	f7fa fe6e 	bl	8000924 <__aeabi_d2f>
 8005c48:	4603      	mov	r3, r0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bdb0      	pop	{r4, r5, r7, pc}
 8005c52:	bf00      	nop
 8005c54:	bf800000 	.word	0xbf800000
 8005c58:	40590000 	.word	0x40590000

08005c5c <ADCT_PZEM004T_getPower>:

float ADCT_PZEM004T_getPower(const uint8_t *addr)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	uint8_t data[RESPONSE_DATA_SIZE];

	ADCT_PZEM0004T_sendData(addr, PZEM_POWER,0);
 8005c64:	2200      	movs	r2, #0
 8005c66:	21b2      	movs	r1, #178	; 0xb2
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8d7 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	if(!ADCT_PZEM004T_receiveData(RESP_POWER, data))
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4619      	mov	r1, r3
 8005c74:	20a2      	movs	r0, #162	; 0xa2
 8005c76:	f000 f865 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <ADCT_PZEM004T_getPower+0x28>
		return PZEM_ERROR_VALUE;
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <ADCT_PZEM004T_getPower+0x40>)
 8005c82:	e007      	b.n	8005c94 <ADCT_PZEM004T_getPower+0x38>

	return (data[0] << 8) + data[1];
 8005c84:	7a3b      	ldrb	r3, [r7, #8]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	7a7a      	ldrb	r2, [r7, #9]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa ff53 	bl	8000b38 <__aeabi_i2f>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	bf800000 	.word	0xbf800000

08005ca0 <ADCT_PZEM004T_getEnergy>:

float ADCT_PZEM004T_getEnergy(const uint8_t *addr)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	uint8_t data[RESPONSE_DATA_SIZE];

	ADCT_PZEM0004T_sendData(addr, PZEM_ENERGY,0);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	21b3      	movs	r1, #179	; 0xb3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8b5 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	if(!ADCT_PZEM004T_receiveData(RESP_ENERGY, data))
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	20a3      	movs	r0, #163	; 0xa3
 8005cba:	f000 f843 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <ADCT_PZEM004T_getEnergy+0x28>
		return PZEM_ERROR_VALUE;
 8005cc4:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <ADCT_PZEM004T_getEnergy+0x48>)
 8005cc6:	e00a      	b.n	8005cde <ADCT_PZEM004T_getEnergy+0x3e>

	return ((uint32_t)data[0] << 16) + ((uint16_t)data[1] << 8) + data[2];
 8005cc8:	7a3b      	ldrb	r3, [r7, #8]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	7a7a      	ldrb	r2, [r7, #9]
 8005cce:	0212      	lsls	r2, r2, #8
 8005cd0:	4413      	add	r3, r2
 8005cd2:	7aba      	ldrb	r2, [r7, #10]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa ff2a 	bl	8000b30 <__aeabi_ui2f>
 8005cdc:	4603      	mov	r3, r0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	bf800000 	.word	0xbf800000

08005cec <ADCT_PZEM004T_setAddress>:

uint8_t ADCT_PZEM004T_setAddress(const uint8_t *addr)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	uint8_t data[RESPONSE_DATA_SIZE];
	ADCT_PZEM0004T_sendData(addr, PZEM_SET_ADDRESS,0);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	21b4      	movs	r1, #180	; 0xb4
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f88f 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	return  ADCT_PZEM004T_receiveData(RESP_SET_ADDRESS, data);
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4619      	mov	r1, r3
 8005d04:	20a4      	movs	r0, #164	; 0xa4
 8005d06:	f000 f81d 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <ADCT_PZEM004T_setPowerAlarm>:

uint8_t ADCT_PZEM004T_setPowerAlarm(const uint8_t *addr, uint8_t threshold)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[RESPONSE_DATA_SIZE];
	ADCT_PZEM0004T_sendData(addr, PZEM_POWER_ALARM, threshold);
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	461a      	mov	r2, r3
 8005d24:	21b5      	movs	r1, #181	; 0xb5
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f878 	bl	8005e1c <ADCT_PZEM0004T_sendData>
	return  ADCT_PZEM004T_receiveData(RESP_POWER_ALARM, data);
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4619      	mov	r1, r3
 8005d32:	20a5      	movs	r0, #165	; 0xa5
 8005d34:	f000 f806 	bl	8005d44 <ADCT_PZEM004T_receiveData>
 8005d38:	4603      	mov	r3, r0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop

08005d44 <ADCT_PZEM004T_receiveData>:
uint8_t ADCT_PZEM004T_receiveData(uint8_t resp, uint8_t *data)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[RESPONSE_SIZE];
	uint8_t c;
	uint32_t ui32startTime = TM_DELAY_Time();
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <ADCT_PZEM004T_receiveData+0xd0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	61bb      	str	r3, [r7, #24]
	uint8_t len = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	77fb      	strb	r3, [r7, #31]
	while ((len < RESPONSE_SIZE)&&((TM_DELAY_Time() - ui32startTime)<PZEM_DEFAULT_READ_TIMEOUT))
 8005d5a:	e01b      	b.n	8005d94 <ADCT_PZEM004T_receiveData+0x50>
	{
		if (!FIFO_IsEmpty(&rxFifo))
 8005d5c:	482e      	ldr	r0, [pc, #184]	; (8005e18 <ADCT_PZEM004T_receiveData+0xd4>)
 8005d5e:	f000 fbc1 	bl	80064e4 <FIFO_IsEmpty>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <ADCT_PZEM004T_receiveData+0x50>
		{
			FIFO_Pop(&rxFifo, &c);
 8005d68:	f107 030f 	add.w	r3, r7, #15
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	482a      	ldr	r0, [pc, #168]	; (8005e18 <ADCT_PZEM004T_receiveData+0xd4>)
 8005d70:	f000 fb8c 	bl	800648c <FIFO_Pop>
			if(!c && !len)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <ADCT_PZEM004T_receiveData+0x3e>
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d100      	bne.n	8005d82 <ADCT_PZEM004T_receiveData+0x3e>
				continue; // skip 0 at startup
 8005d80:	e008      	b.n	8005d94 <ADCT_PZEM004T_receiveData+0x50>
				buffer[len++] = c;
 8005d82:	7ffb      	ldrb	r3, [r7, #31]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	77fa      	strb	r2, [r7, #31]
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	f107 0120 	add.w	r1, r7, #32
 8005d8e:	440b      	add	r3, r1
 8005d90:	f803 2c10 	strb.w	r2, [r3, #-16]
{
	uint8_t buffer[RESPONSE_SIZE];
	uint8_t c;
	uint32_t ui32startTime = TM_DELAY_Time();
	uint8_t len = 0;
	while ((len < RESPONSE_SIZE)&&((TM_DELAY_Time() - ui32startTime)<PZEM_DEFAULT_READ_TIMEOUT))
 8005d94:	7ffb      	ldrb	r3, [r7, #31]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d806      	bhi.n	8005da8 <ADCT_PZEM004T_receiveData+0x64>
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <ADCT_PZEM004T_receiveData+0xd0>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da6:	d3d9      	bcc.n	8005d5c <ADCT_PZEM004T_receiveData+0x18>
			if(!c && !len)
				continue; // skip 0 at startup
				buffer[len++] = c;
		}
	}
	if(len != RESPONSE_SIZE)
 8005da8:	7ffb      	ldrb	r3, [r7, #31]
 8005daa:	2b07      	cmp	r3, #7
 8005dac:	d001      	beq.n	8005db2 <ADCT_PZEM004T_receiveData+0x6e>
		return 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e02c      	b.n	8005e0c <ADCT_PZEM004T_receiveData+0xc8>

	if(buffer[6] != ADCT_PZEM004T_crc(buffer, len - 1))
 8005db2:	7dbc      	ldrb	r4, [r7, #22]
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	f107 0310 	add.w	r3, r7, #16
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 f867 	bl	8005e94 <ADCT_PZEM004T_crc>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d001      	beq.n	8005dd0 <ADCT_PZEM004T_receiveData+0x8c>
		return 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e01d      	b.n	8005e0c <ADCT_PZEM004T_receiveData+0xc8>

	if(buffer[0] != resp)
 8005dd0:	7c3b      	ldrb	r3, [r7, #16]
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <ADCT_PZEM004T_receiveData+0x98>
		return 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e017      	b.n	8005e0c <ADCT_PZEM004T_receiveData+0xc8>

	if(data)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d013      	beq.n	8005e0a <ADCT_PZEM004T_receiveData+0xc6>
	{
		for(uint8_t i=0; i<RESPONSE_DATA_SIZE; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	77bb      	strb	r3, [r7, #30]
 8005de6:	e00d      	b.n	8005e04 <ADCT_PZEM004T_receiveData+0xc0>
			data[i] = buffer[1 + i];
 8005de8:	7fbb      	ldrb	r3, [r7, #30]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	7fba      	ldrb	r2, [r7, #30]
 8005df0:	3201      	adds	r2, #1
 8005df2:	f107 0120 	add.w	r1, r7, #32
 8005df6:	440a      	add	r2, r1
 8005df8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005dfc:	701a      	strb	r2, [r3, #0]
	if(buffer[0] != resp)
		return 0;

	if(data)
	{
		for(uint8_t i=0; i<RESPONSE_DATA_SIZE; i++)
 8005dfe:	7fbb      	ldrb	r3, [r7, #30]
 8005e00:	3301      	adds	r3, #1
 8005e02:	77bb      	strb	r3, [r7, #30]
 8005e04:	7fbb      	ldrb	r3, [r7, #30]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d9ee      	bls.n	8005de8 <ADCT_PZEM004T_receiveData+0xa4>
			data[i] = buffer[1 + i];
	}

	return 1;
 8005e0a:	2301      	movs	r3, #1

}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3724      	adds	r7, #36	; 0x24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	20002458 	.word	0x20002458
 8005e18:	20002430 	.word	0x20002430

08005e1c <ADCT_PZEM0004T_sendData>:
void ADCT_PZEM0004T_sendData(const uint8_t *addr, uint8_t cmd, uint8_t data)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	70bb      	strb	r3, [r7, #2]
	uint8_t ui8index;
	PZEMCommand pzem;
	pzem.command = cmd;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	723b      	strb	r3, [r7, #8]
	for(ui8index = 0;ui8index < sizeof (pzem.addr); ui8index++ )
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e00c      	b.n	8005e50 <ADCT_PZEM0004T_sendData+0x34>
	{
		pzem.addr[ui8index] = addr[ui8index];
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	7dfa      	ldrb	r2, [r7, #23]
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	f107 0118 	add.w	r1, r7, #24
 8005e44:	440b      	add	r3, r1
 8005e46:	f803 2c0f 	strb.w	r2, [r3, #-15]
void ADCT_PZEM0004T_sendData(const uint8_t *addr, uint8_t cmd, uint8_t data)
{
	uint8_t ui8index;
	PZEMCommand pzem;
	pzem.command = cmd;
	for(ui8index = 0;ui8index < sizeof (pzem.addr); ui8index++ )
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d9ef      	bls.n	8005e36 <ADCT_PZEM0004T_sendData+0x1a>
	{
		pzem.addr[ui8index] = addr[ui8index];
	}
	pzem.data = data;
 8005e56:	78bb      	ldrb	r3, [r7, #2]
 8005e58:	737b      	strb	r3, [r7, #13]
	uint8_t *bytes = (uint8_t *)&pzem;
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	613b      	str	r3, [r7, #16]
	pzem.crc = ADCT_PZEM004T_crc(bytes, sizeof(pzem) - 1);
 8005e60:	2106      	movs	r1, #6
 8005e62:	6938      	ldr	r0, [r7, #16]
 8005e64:	f000 f816 	bl	8005e94 <ADCT_PZEM004T_crc>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73bb      	strb	r3, [r7, #14]
	for(ui8index = 0; ui8index < sizeof(pzem) ; ui8index++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	e009      	b.n	8005e86 <ADCT_PZEM0004T_sendData+0x6a>
	{
		ADCT_PZEM004T_PutChar(bytes[ui8index]);
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fe58 	bl	8005b30 <ADCT_PZEM004T_PutChar>
		pzem.addr[ui8index] = addr[ui8index];
	}
	pzem.data = data;
	uint8_t *bytes = (uint8_t *)&pzem;
	pzem.crc = ADCT_PZEM004T_crc(bytes, sizeof(pzem) - 1);
	for(ui8index = 0; ui8index < sizeof(pzem) ; ui8index++)
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	3301      	adds	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b06      	cmp	r3, #6
 8005e8a:	d9f2      	bls.n	8005e72 <ADCT_PZEM0004T_sendData+0x56>
	{
		ADCT_PZEM004T_PutChar(bytes[ui8index]);
	}
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <ADCT_PZEM004T_crc>:
uint8_t ADCT_PZEM004T_crc(uint8_t *data, uint8_t sz)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<sz; i++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	737b      	strb	r3, [r7, #13]
 8005ea8:	e00a      	b.n	8005ec0 <ADCT_PZEM004T_crc+0x2c>
		crc += *data++;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	89fb      	ldrh	r3, [r7, #14]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	81fb      	strh	r3, [r7, #14]
	}
}
uint8_t ADCT_PZEM004T_crc(uint8_t *data, uint8_t sz)
{
	uint16_t crc = 0;
	for(uint8_t i=0; i<sz; i++)
 8005eba:	7b7b      	ldrb	r3, [r7, #13]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	737b      	strb	r3, [r7, #13]
 8005ec0:	7b7a      	ldrb	r2, [r7, #13]
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3f0      	bcc.n	8005eaa <ADCT_PZEM004T_crc+0x16>
		crc += *data++;
	return (uint8_t)(crc & 0xFF);
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop

08005ed8 <ADCT_PZEM004T_Init>:
void ADCT_PZEM004T_Init(uint32_t baud)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	// pass baud rate
	// callback for received data and callback for
	// transmitted data
	UART_PZEM004T_Init(baud, PZEM004T_RxCallback, PZEM004T_TxCallback );
 8005ee0:	4a0e      	ldr	r2, [pc, #56]	; (8005f1c <ADCT_PZEM004T_Init+0x44>)
 8005ee2:	490f      	ldr	r1, [pc, #60]	; (8005f20 <ADCT_PZEM004T_Init+0x48>)
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f825 	bl	8005f34 <UART_PZEM004T_Init>
	// Initialize RX FIFO
	rxFifo.buf = ADCT_PZEM004T_RXBUFFER;
 8005eea:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <ADCT_PZEM004T_Init+0x4c>)
 8005eec:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <ADCT_PZEM004T_Init+0x50>)
 8005eee:	605a      	str	r2, [r3, #4]
	rxFifo.len = ADCT_PZEM004T_BUF_LEN;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <ADCT_PZEM004T_Init+0x4c>)
 8005ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ef6:	811a      	strh	r2, [r3, #8]
	FIFO_Add(&rxFifo);
 8005ef8:	480a      	ldr	r0, [pc, #40]	; (8005f24 <ADCT_PZEM004T_Init+0x4c>)
 8005efa:	f000 fa71 	bl	80063e0 <FIFO_Add>

	// Initialize TX FIFO
	txFifo.buf = ADCT_PZEM004T_TXBUFFER;
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <ADCT_PZEM004T_Init+0x54>)
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <ADCT_PZEM004T_Init+0x58>)
 8005f02:	605a      	str	r2, [r3, #4]
	txFifo.len = ADCT_PZEM004T_BUF_LEN;
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <ADCT_PZEM004T_Init+0x54>)
 8005f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f0a:	811a      	strh	r2, [r3, #8]
	FIFO_Add(&txFifo);
 8005f0c:	4807      	ldr	r0, [pc, #28]	; (8005f2c <ADCT_PZEM004T_Init+0x54>)
 8005f0e:	f000 fa67 	bl	80063e0 <FIFO_Add>
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	0800602d 	.word	0x0800602d
 8005f20:	08006009 	.word	0x08006009
 8005f24:	20002430 	.word	0x20002430
 8005f28:	20000430 	.word	0x20000430
 8005f2c:	2000243c 	.word	0x2000243c
 8005f30:	20001430 	.word	0x20001430

08005f34 <UART_PZEM004T_Init>:

void UART_PZEM004T_Init(uint32_t baud, void(*rxCb)(uint8_t), uint8_t(*txCb)(uint8_t*) )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
	// assign the callbacks
	rxCallback = rxCb;
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <UART_PZEM004T_Init+0xc4>)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6013      	str	r3, [r2, #0]
	txCallback = txCb;
 8005f46:	4a2d      	ldr	r2, [pc, #180]	; (8005ffc <UART_PZEM004T_Init+0xc8>)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6013      	str	r3, [r2, #0]

	NVIC_InitTypeDef        NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	RCC_APB2PeriphClockCmd(ADCT_PZEM004T_TX_CLK |ADCT_PZEM004T_RX_CLK| RCC_APB2Periph_AFIO, ENABLE);
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	2005      	movs	r0, #5
 8005f50:	f002 fd6a 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	/* Enable UART clock, if using USART2 or USART3 ... we must use RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) */
	RCC_APB2PeriphClockCmd(ADCT_PZEM004T_USART_CLK, ENABLE);
 8005f54:	2101      	movs	r1, #1
 8005f56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005f5a:	f002 fd65 	bl	8008a28 <RCC_APB2PeriphClockCmd>

	/* Configure PA2 for USART Tx as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = ADCT_PZEM004T_TX_PIN;
 8005f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f62:	843b      	strh	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8005f64:	2318      	movs	r3, #24
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_Init(ADCT_PZEM004T_TX_PORT, &GPIO_InitStructure);
 8005f70:	f107 0320 	add.w	r3, r7, #32
 8005f74:	4619      	mov	r1, r3
 8005f76:	4822      	ldr	r0, [pc, #136]	; (8006000 <UART_PZEM004T_Init+0xcc>)
 8005f78:	f001 ffb2 	bl	8007ee0 <GPIO_Init>

	/* Configure PA3 for USART Rx as input floating */
	GPIO_InitStructure.GPIO_Pin = ADCT_PZEM004T_RX_PIN;
 8005f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f80:	843b      	strh	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8005f82:	2304      	movs	r3, #4
 8005f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GPIO_Init(ADCT_PZEM004T_RX_PORT, &GPIO_InitStructure);
 8005f88:	f107 0320 	add.w	r3, r7, #32
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	481c      	ldr	r0, [pc, #112]	; (8006000 <UART_PZEM004T_Init+0xcc>)
 8005f90:	f001 ffa6 	bl	8007ee0 <GPIO_Init>

	NVIC_InitStructure.NVIC_IRQChannel = ADCT_PZEM004T_USART_IRQ;
 8005f94:	2325      	movs	r3, #37	; 0x25
 8005f96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 6;
 8005f9a:	2306      	movs	r3, #6
 8005f9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);
 8005fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 faad 	bl	8007510 <NVIC_Init>
	        - One Stop Bit
	        - No parity
	        - Hardware flow control disabled (RTS and CTS signals)
	        - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = baud;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	613b      	str	r3, [r7, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	82fb      	strh	r3, [r7, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	83bb      	strh	r3, [r7, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005fca:	230c      	movs	r3, #12
 8005fcc:	837b      	strh	r3, [r7, #26]

	/* USART configuration */
	USART_Init(ADCT_PZEM004T_USART_PORT, &USART_InitStructure);
 8005fce:	f107 0310 	add.w	r3, r7, #16
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	480b      	ldr	r0, [pc, #44]	; (8006004 <UART_PZEM004T_Init+0xd0>)
 8005fd6:	f002 ffbd 	bl	8008f54 <USART_Init>

	USART_ITConfig( ADCT_PZEM004T_USART_PORT, USART_IT_RXNE, ENABLE );
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f240 5125 	movw	r1, #1317	; 0x525
 8005fe0:	4808      	ldr	r0, [pc, #32]	; (8006004 <UART_PZEM004T_Init+0xd0>)
 8005fe2:	f003 f891 	bl	8009108 <USART_ITConfig>
	//USART_ITConfig( ADCT_PZEM004T_USART_PORT, USART_IT_TXE, ENABLE );
	/* Enable USART */
	USART_Cmd(ADCT_PZEM004T_USART_PORT, ENABLE);
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4806      	ldr	r0, [pc, #24]	; (8006004 <UART_PZEM004T_Init+0xd0>)
 8005fea:	f003 f86d 	bl	80090c8 <USART_Cmd>
}
 8005fee:	bf00      	nop
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20002448 	.word	0x20002448
 8005ffc:	2000244c 	.word	0x2000244c
 8006000:	40010800 	.word	0x40010800
 8006004:	40013800 	.word	0x40013800

08006008 <PZEM004T_RxCallback>:
/**
 * @brief Callback for receiving data from PC.
 * @param c Data sent from lower layer software.
 */
static uint8_t idElement = 0 ,start_get = 0;
void PZEM004T_RxCallback(uint8_t c) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]

	uint8_t index ;

	FIFO_Push(&rxFifo, c); // Put data in RX buffer
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	4619      	mov	r1, r3
 8006016:	4804      	ldr	r0, [pc, #16]	; (8006028 <PZEM004T_RxCallback+0x20>)
 8006018:	f000 fa02 	bl	8006420 <FIFO_Push>
	uint8_t idFunc = 0 ;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
//				AC_DataReceive_Cfg[idFunc].gotframe = 1;
//				idElement = 0;
//				start_get = 0 ;
//			}
//	}
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20002430 	.word	0x20002430

0800602c <PZEM004T_TxCallback>:
 * @brief Callback for transmitting data to lower layer
 * @param c Transmitted data
 * @retval 0 There is no more data in buffer (stop transmitting)
 * @retval 1 Valid data in c
 */
uint8_t PZEM004T_TxCallback(uint8_t* c) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

	if (FIFO_Pop(&txFifo, c) == 0) { // If buffer not empty
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4806      	ldr	r0, [pc, #24]	; (8006050 <PZEM004T_TxCallback+0x24>)
 8006038:	f000 fa28 	bl	800648c <FIFO_Pop>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <PZEM004T_TxCallback+0x1a>
		return 1;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <PZEM004T_TxCallback+0x1c>
	} else {
		return 0;
 8006046:	2300      	movs	r3, #0
	}

}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	2000243c 	.word	0x2000243c

08006054 <USART1_IRQHandler>:

void USART1_IRQHandler( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
	// If transmit buffer empty interrupt
	if(USART_GetITStatus(ADCT_PZEM004T_USART_PORT, USART_IT_TXE) != RESET) {
 800605a:	f240 7127 	movw	r1, #1831	; 0x727
 800605e:	481f      	ldr	r0, [pc, #124]	; (80060dc <USART1_IRQHandler+0x88>)
 8006060:	f003 f8bc 	bl	80091dc <USART_GetITStatus>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <USART1_IRQHandler+0x48>

		uint8_t c;

		if (txCallback) { // if not NULL
 800606a:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <USART1_IRQHandler+0x8c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d014      	beq.n	800609c <USART1_IRQHandler+0x48>
			// get data from higher layer using callback
			if (txCallback(&c)) {
 8006072:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <USART1_IRQHandler+0x8c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	1dba      	adds	r2, r7, #6
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <USART1_IRQHandler+0x3c>
				USART_SendData(ADCT_PZEM004T_USART_PORT, c); // Send data
 8006082:	79bb      	ldrb	r3, [r7, #6]
 8006084:	b29b      	uxth	r3, r3
 8006086:	4619      	mov	r1, r3
 8006088:	4814      	ldr	r0, [pc, #80]	; (80060dc <USART1_IRQHandler+0x88>)
 800608a:	f003 f885 	bl	8009198 <USART_SendData>
 800608e:	e005      	b.n	800609c <USART1_IRQHandler+0x48>
			} else { // if no more data to send disable the transmitter
				USART_ITConfig(ADCT_PZEM004T_USART_PORT, USART_IT_TXE, DISABLE);
 8006090:	2200      	movs	r2, #0
 8006092:	f240 7127 	movw	r1, #1831	; 0x727
 8006096:	4811      	ldr	r0, [pc, #68]	; (80060dc <USART1_IRQHandler+0x88>)
 8006098:	f003 f836 	bl	8009108 <USART_ITConfig>
			}
		}
	}

	// If RX buffer not empty interrupt
	if(USART_GetITStatus(ADCT_PZEM004T_USART_PORT, USART_IT_RXNE) != RESET) {
 800609c:	f240 5125 	movw	r1, #1317	; 0x525
 80060a0:	480e      	ldr	r0, [pc, #56]	; (80060dc <USART1_IRQHandler+0x88>)
 80060a2:	f003 f89b 	bl	80091dc <USART_GetITStatus>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <USART1_IRQHandler+0x7e>

		uint8_t c = USART_ReceiveData(ADCT_PZEM004T_USART_PORT); // Get data from UART
 80060ac:	480b      	ldr	r0, [pc, #44]	; (80060dc <USART1_IRQHandler+0x88>)
 80060ae:	f003 f885 	bl	80091bc <USART_ReceiveData>
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]

		if (rxCallback) { // if not NULL
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <USART1_IRQHandler+0x90>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <USART1_IRQHandler+0x74>
			rxCallback(c); // send received data to higher layer
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <USART1_IRQHandler+0x90>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	79fa      	ldrb	r2, [r7, #7]
 80060c4:	4610      	mov	r0, r2
 80060c6:	4798      	blx	r3
		}
		USART_ClearITPendingBit( ADCT_PZEM004T_USART_PORT, USART_IT_RXNE );
 80060c8:	f240 5125 	movw	r1, #1317	; 0x525
 80060cc:	4803      	ldr	r0, [pc, #12]	; (80060dc <USART1_IRQHandler+0x88>)
 80060ce:	f003 f8df 	bl	8009290 <USART_ClearITPendingBit>
	}
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40013800 	.word	0x40013800
 80060e0:	2000244c 	.word	0x2000244c
 80060e4:	20002448 	.word	0x20002448

080060e8 <ADCT_AC_Init>:
void ADCT_AC_Init(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0

	ADCT_PZEM004T_Init(9600);
 80060ec:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80060f0:	f7ff fef2 	bl	8005ed8 <ADCT_PZEM004T_Init>
	ADCT_PZEM004T_setAddress(IP_addr);
 80060f4:	4804      	ldr	r0, [pc, #16]	; (8006108 <ADCT_AC_Init+0x20>)
 80060f6:	f7ff fdf9 	bl	8005cec <ADCT_PZEM004T_setAddress>
	ADCT_PZEM004T_setPowerAlarm(IP_addr, 21);
 80060fa:	2115      	movs	r1, #21
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <ADCT_AC_Init+0x20>)
 80060fe:	f7ff fe09 	bl	8005d14 <ADCT_PZEM004T_setPowerAlarm>
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000017c 	.word	0x2000017c

0800610c <ADCT_AC_GetData>:
static uint8_t ac_cnt = 0;
void ADCT_AC_GetData(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
	if(ac_cnt ==0)
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <ADCT_AC_GetData+0x1a>
	{
	GstSystemStatus.acData.voltage = ADCT_PZEM004T_getVoltage(IP_addr);
 8006118:	481a      	ldr	r0, [pc, #104]	; (8006184 <ADCT_AC_GetData+0x78>)
 800611a:	f7ff fd27 	bl	8005b6c <ADCT_PZEM004T_getVoltage>
 800611e:	4602      	mov	r2, r0
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <ADCT_AC_GetData+0x7c>)
 8006122:	635a      	str	r2, [r3, #52]	; 0x34
 8006124:	e01b      	b.n	800615e <ADCT_AC_GetData+0x52>
	}else if (ac_cnt == 1 )
 8006126:	4b16      	ldr	r3, [pc, #88]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d106      	bne.n	800613c <ADCT_AC_GetData+0x30>
	{
	GstSystemStatus.acData.current = ADCT_PZEM004T_getCurrent(IP_addr);
 800612e:	4815      	ldr	r0, [pc, #84]	; (8006184 <ADCT_AC_GetData+0x78>)
 8006130:	f7ff fd58 	bl	8005be4 <ADCT_PZEM004T_getCurrent>
 8006134:	4602      	mov	r2, r0
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <ADCT_AC_GetData+0x7c>)
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
 800613a:	e010      	b.n	800615e <ADCT_AC_GetData+0x52>
	}
	else if (ac_cnt ==2)
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <ADCT_AC_GetData+0x74>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d106      	bne.n	8006152 <ADCT_AC_GetData+0x46>
	{
	GstSystemStatus.acData.power = ADCT_PZEM004T_getPower(IP_addr);
 8006144:	480f      	ldr	r0, [pc, #60]	; (8006184 <ADCT_AC_GetData+0x78>)
 8006146:	f7ff fd89 	bl	8005c5c <ADCT_PZEM004T_getPower>
 800614a:	4602      	mov	r2, r0
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <ADCT_AC_GetData+0x7c>)
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
 8006150:	e005      	b.n	800615e <ADCT_AC_GetData+0x52>
	}else
	{

	GstSystemStatus.acData.energy = ADCT_PZEM004T_getEnergy(IP_addr);
 8006152:	480c      	ldr	r0, [pc, #48]	; (8006184 <ADCT_AC_GetData+0x78>)
 8006154:	f7ff fda4 	bl	8005ca0 <ADCT_PZEM004T_getEnergy>
 8006158:	4602      	mov	r2, r0
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <ADCT_AC_GetData+0x7c>)
 800615c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if(ac_cnt >3)
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d903      	bls.n	800616e <ADCT_AC_GetData+0x62>
	{
		ac_cnt =0;
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	ac_cnt ++;
	}
}
 800616c:	e005      	b.n	800617a <ADCT_AC_GetData+0x6e>
	{
		ac_cnt =0;
	}
	else
	{
	ac_cnt ++;
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	3301      	adds	r3, #1
 8006174:	b2da      	uxtb	r2, r3
 8006176:	4b02      	ldr	r3, [pc, #8]	; (8006180 <ADCT_AC_GetData+0x74>)
 8006178:	701a      	strb	r2, [r3, #0]
	}
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20002450 	.word	0x20002450
 8006184:	2000017c 	.word	0x2000017c
 8006188:	20002558 	.word	0x20002558

0800618c <ADCT_AC_ConvertCurrent>:
void ADCT_AC_ConvertCurrent(float data, uint32_t *Sig, uint8_t *exp)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	//Extract integer part
	int ipart = (int)data;
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7fa fe71 	bl	8000e80 <__aeabi_f2iz>
 800619e:	4603      	mov	r3, r0
 80061a0:	617b      	str	r3, [r7, #20]
	//extract float part
	float fpart = data -(float)ipart;
 80061a2:	6978      	ldr	r0, [r7, #20]
 80061a4:	f7fa fcc8 	bl	8000b38 <__aeabi_i2f>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7fa fc0d 	bl	80009cc <__aeabi_fsub>
 80061b2:	4603      	mov	r3, r0
 80061b4:	613b      	str	r3, [r7, #16]
	fpart = fpart *pow(10, 3);
 80061b6:	4917      	ldr	r1, [pc, #92]	; (8006214 <ADCT_AC_ConvertCurrent+0x88>)
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7fa fd11 	bl	8000be0 <__aeabi_fmul>
 80061be:	4603      	mov	r3, r0
 80061c0:	613b      	str	r3, [r7, #16]
	if(ipart == 0 )
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <ADCT_AC_ConvertCurrent+0x50>
	{
		*Sig = (uint32_t)(fpart);
 80061c8:	6938      	ldr	r0, [r7, #16]
 80061ca:	f7fa fe7f 	bl	8000ecc <__aeabi_f2uiz>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	601a      	str	r2, [r3, #0]
		*exp = 1;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
	{
		*Sig = (uint32_t) ((ipart *1000) + fpart);
		*exp = 2;
	}

}
 80061da:	e016      	b.n	800620a <ADCT_AC_ConvertCurrent+0x7e>
		*Sig = (uint32_t)(fpart);
		*exp = 1;
	}
	else
	{
		*Sig = (uint32_t) ((ipart *1000) + fpart);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa fca6 	bl	8000b38 <__aeabi_i2f>
 80061ec:	4603      	mov	r3, r0
 80061ee:	6939      	ldr	r1, [r7, #16]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa fbed 	bl	80009d0 <__addsf3>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa fe67 	bl	8000ecc <__aeabi_f2uiz>
 80061fe:	4602      	mov	r2, r0
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	601a      	str	r2, [r3, #0]
		*exp = 2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
	}

}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	447a0000 	.word	0x447a0000

08006218 <ADCT_AC_Convert_Power>:
void ADCT_AC_Convert_Power(float data, uint32_t *Sig, uint8_t * exp)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
	// Extract integer part

	int ipart = (int)data;
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7fa fe2b 	bl	8000e80 <__aeabi_f2iz>
 800622a:	4603      	mov	r3, r0
 800622c:	617b      	str	r3, [r7, #20]
	// Extract floating part
	float fpart = data - (float)ipart;
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7fa fc82 	bl	8000b38 <__aeabi_i2f>
 8006234:	4603      	mov	r3, r0
 8006236:	4619      	mov	r1, r3
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7fa fbc7 	bl	80009cc <__aeabi_fsub>
 800623e:	4603      	mov	r3, r0
 8006240:	613b      	str	r3, [r7, #16]
	fpart = fpart *pow(10,3);
 8006242:	4927      	ldr	r1, [pc, #156]	; (80062e0 <ADCT_AC_Convert_Power+0xc8>)
 8006244:	6938      	ldr	r0, [r7, #16]
 8006246:	f7fa fccb 	bl	8000be0 <__aeabi_fmul>
 800624a:	4603      	mov	r3, r0
 800624c:	613b      	str	r3, [r7, #16]

	if(ipart == 0)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <ADCT_AC_Convert_Power+0x50>
	{
		*Sig = (uint32_t)(fpart);
 8006254:	6938      	ldr	r0, [r7, #16]
 8006256:	f7fa fe39 	bl	8000ecc <__aeabi_f2uiz>
 800625a:	4602      	mov	r2, r0
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	601a      	str	r2, [r3, #0]
		*exp = 1;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
	else
	{
		*Sig = (uint32_t)((ipart *10)  + fpart /100);
		*exp = 3;
	}
}
 8006266:	e036      	b.n	80062d6 <ADCT_AC_Convert_Power+0xbe>

	if(ipart == 0)
	{
		*Sig = (uint32_t)(fpart);
		*exp = 1;
	}else if( ipart < 64)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b3f      	cmp	r3, #63	; 0x3f
 800626c:	dc17      	bgt.n	800629e <ADCT_AC_Convert_Power+0x86>
	{
		*Sig = (uint32_t)((ipart *1000) +fpart) ;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	4618      	mov	r0, r3
 800627a:	f7fa fc5d 	bl	8000b38 <__aeabi_i2f>
 800627e:	4603      	mov	r3, r0
 8006280:	6939      	ldr	r1, [r7, #16]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa fba4 	bl	80009d0 <__addsf3>
 8006288:	4603      	mov	r3, r0
 800628a:	4618      	mov	r0, r3
 800628c:	f7fa fe1e 	bl	8000ecc <__aeabi_f2uiz>
 8006290:	4602      	mov	r2, r0
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	601a      	str	r2, [r3, #0]
		*exp = 2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	701a      	strb	r2, [r3, #0]
	else
	{
		*Sig = (uint32_t)((ipart *10)  + fpart /100);
		*exp = 3;
	}
}
 800629c:	e01b      	b.n	80062d6 <ADCT_AC_Convert_Power+0xbe>
		*Sig = (uint32_t)((ipart *1000) +fpart) ;
		*exp = 2;
	}
	else
	{
		*Sig = (uint32_t)((ipart *10)  + fpart /100);
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa fc45 	bl	8000b38 <__aeabi_i2f>
 80062ae:	4604      	mov	r4, r0
 80062b0:	490c      	ldr	r1, [pc, #48]	; (80062e4 <ADCT_AC_Convert_Power+0xcc>)
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f7fa fd48 	bl	8000d48 <__aeabi_fdiv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4619      	mov	r1, r3
 80062bc:	4620      	mov	r0, r4
 80062be:	f7fa fb87 	bl	80009d0 <__addsf3>
 80062c2:	4603      	mov	r3, r0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fa fe01 	bl	8000ecc <__aeabi_f2uiz>
 80062ca:	4602      	mov	r2, r0
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	601a      	str	r2, [r3, #0]
		*exp = 3;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2203      	movs	r2, #3
 80062d4:	701a      	strb	r2, [r3, #0]
	}
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd90      	pop	{r4, r7, pc}
 80062de:	bf00      	nop
 80062e0:	447a0000 	.word	0x447a0000
 80062e4:	42c80000 	.word	0x42c80000

080062e8 <ADCT_AC_Convert_Energy>:

void ADCT_AC_Convert_Energy(float data, uint32_t *Sig, uint8_t * exp)
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
	// Extract integer part

	int ipart = (int)data;
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7fa fdc3 	bl	8000e80 <__aeabi_f2iz>
 80062fa:	4603      	mov	r3, r0
 80062fc:	617b      	str	r3, [r7, #20]
	// Extract floating part
	float fpart = data - (float)ipart;
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7fa fc1a 	bl	8000b38 <__aeabi_i2f>
 8006304:	4603      	mov	r3, r0
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fa fb5f 	bl	80009cc <__aeabi_fsub>
 800630e:	4603      	mov	r3, r0
 8006310:	613b      	str	r3, [r7, #16]
	fpart = fpart *pow(10,3);
 8006312:	4930      	ldr	r1, [pc, #192]	; (80063d4 <ADCT_AC_Convert_Energy+0xec>)
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7fa fc63 	bl	8000be0 <__aeabi_fmul>
 800631a:	4603      	mov	r3, r0
 800631c:	613b      	str	r3, [r7, #16]

	if(ipart == 0)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <ADCT_AC_Convert_Energy+0x50>
	{
		*Sig = (uint32_t)(fpart);
 8006324:	6938      	ldr	r0, [r7, #16]
 8006326:	f7fa fdd1 	bl	8000ecc <__aeabi_f2uiz>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	601a      	str	r2, [r3, #0]
		*exp = 1;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
	else
	{
		*Sig = (uint32_t)(ipart ) ;
		*exp = 4;
	}
}
 8006336:	e048      	b.n	80063ca <ADCT_AC_Convert_Energy+0xe2>

	if(ipart == 0)
	{
		*Sig = (uint32_t)(fpart);
		*exp = 1;
	}else if (ipart < 650)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f240 2289 	movw	r2, #649	; 0x289
 800633e:	4293      	cmp	r3, r2
 8006340:	dc1b      	bgt.n	800637a <ADCT_AC_Convert_Energy+0x92>
	{
		*Sig = (uint32_t)((ipart *100) + fpart/10) ;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2264      	movs	r2, #100	; 0x64
 8006346:	fb02 f303 	mul.w	r3, r2, r3
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa fbf4 	bl	8000b38 <__aeabi_i2f>
 8006350:	4604      	mov	r4, r0
 8006352:	4921      	ldr	r1, [pc, #132]	; (80063d8 <ADCT_AC_Convert_Energy+0xf0>)
 8006354:	6938      	ldr	r0, [r7, #16]
 8006356:	f7fa fcf7 	bl	8000d48 <__aeabi_fdiv>
 800635a:	4603      	mov	r3, r0
 800635c:	4619      	mov	r1, r3
 800635e:	4620      	mov	r0, r4
 8006360:	f7fa fb36 	bl	80009d0 <__addsf3>
 8006364:	4603      	mov	r3, r0
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa fdb0 	bl	8000ecc <__aeabi_f2uiz>
 800636c:	4602      	mov	r2, r0
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	601a      	str	r2, [r3, #0]
		*exp = 2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	701a      	strb	r2, [r3, #0]
	else
	{
		*Sig = (uint32_t)(ipart ) ;
		*exp = 4;
	}
}
 8006378:	e027      	b.n	80063ca <ADCT_AC_Convert_Energy+0xe2>
	}else if (ipart < 650)
	{
		*Sig = (uint32_t)((ipart *100) + fpart/10) ;
		*exp = 2;
	}
	else if( ipart <6552)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f641 1297 	movw	r2, #6551	; 0x1997
 8006380:	4293      	cmp	r3, r2
 8006382:	dc1c      	bgt.n	80063be <ADCT_AC_Convert_Energy+0xd6>
	{
		*Sig = (uint32_t)((ipart *10) + fpart/100) ;
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa fbd2 	bl	8000b38 <__aeabi_i2f>
 8006394:	4604      	mov	r4, r0
 8006396:	4911      	ldr	r1, [pc, #68]	; (80063dc <ADCT_AC_Convert_Energy+0xf4>)
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7fa fcd5 	bl	8000d48 <__aeabi_fdiv>
 800639e:	4603      	mov	r3, r0
 80063a0:	4619      	mov	r1, r3
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7fa fb14 	bl	80009d0 <__addsf3>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa fd8e 	bl	8000ecc <__aeabi_f2uiz>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	601a      	str	r2, [r3, #0]
		*exp = 3;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2203      	movs	r2, #3
 80063ba:	701a      	strb	r2, [r3, #0]
	else
	{
		*Sig = (uint32_t)(ipart ) ;
		*exp = 4;
	}
}
 80063bc:	e005      	b.n	80063ca <ADCT_AC_Convert_Energy+0xe2>
		*Sig = (uint32_t)((ipart *10) + fpart/100) ;
		*exp = 3;
	}
	else
	{
		*Sig = (uint32_t)(ipart ) ;
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	601a      	str	r2, [r3, #0]
		*exp = 4;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
	}
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd90      	pop	{r4, r7, pc}
 80063d2:	bf00      	nop
 80063d4:	447a0000 	.word	0x447a0000
 80063d8:	41200000 	.word	0x41200000
 80063dc:	42c80000 	.word	0x42c80000

080063e0 <FIFO_Add>:
 *
 * @param fifo Pointer to FIFO structure
 * @retval 0 FIFO added successfully
 * @retval 1 Error: FIFO length is 0
 */
uint8_t FIFO_Add(FIFO_TypeDef* fifo) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  if (fifo->len == 0 ) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	891b      	ldrh	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <FIFO_Add+0x1c>
    println("Zero FIFO length");
 80063f0:	4909      	ldr	r1, [pc, #36]	; (8006418 <FIFO_Add+0x38>)
 80063f2:	480a      	ldr	r0, [pc, #40]	; (800641c <FIFO_Add+0x3c>)
 80063f4:	f003 fbf0 	bl	8009bd8 <iprintf>
    return 1;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e009      	b.n	8006410 <FIFO_Add+0x30>
  }

  fifo->tail  = 0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	805a      	strh	r2, [r3, #2]
  fifo->head  = 0;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	801a      	strh	r2, [r3, #0]
  fifo->count = 0;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	815a      	strh	r2, [r3, #10]

  return 0;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	0800a92c 	.word	0x0800a92c
 800641c:	0800a930 	.word	0x0800a930

08006420 <FIFO_Push>:
 * @param fifo Pointer to FIFO structure
 * @param c Data byte
 * @retval 0 Data added
 * @retval 1 Error: FIFO is full
 */
uint8_t FIFO_Push(FIFO_TypeDef* fifo, uint8_t c) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]

  // Check for overflow
  if (fifo->count == fifo->len) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	895a      	ldrh	r2, [r3, #10]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	891b      	ldrh	r3, [r3, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d105      	bne.n	8006444 <FIFO_Push+0x24>
    println("FIFO overflow");
 8006438:	4912      	ldr	r1, [pc, #72]	; (8006484 <FIFO_Push+0x64>)
 800643a:	4813      	ldr	r0, [pc, #76]	; (8006488 <FIFO_Push+0x68>)
 800643c:	f003 fbcc 	bl	8009bd8 <iprintf>
    return 1;
 8006440:	2301      	movs	r3, #1
 8006442:	e01a      	b.n	800647a <FIFO_Push+0x5a>
  }

  fifo->buf[fifo->head++] = c; // Put char in buffer
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	b288      	uxth	r0, r1
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	8008      	strh	r0, [r1, #0]
 8006454:	4413      	add	r3, r2
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	701a      	strb	r2, [r3, #0]
  fifo->count++; // Increase counter
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	895b      	ldrh	r3, [r3, #10]
 800645e:	3301      	adds	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	815a      	strh	r2, [r3, #10]


  if (fifo->head == fifo->len) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	891b      	ldrh	r3, [r3, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d102      	bne.n	8006478 <FIFO_Push+0x58>
    fifo->head = 0; // start from beginning
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	801a      	strh	r2, [r3, #0]
  }

  return 0;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	0800a92c 	.word	0x0800a92c
 8006488:	0800a94c 	.word	0x0800a94c

0800648c <FIFO_Pop>:
 * @param fifo Pointer to FIFO structure
 * @param c data
 * @retval 0 Got valid data
 * @retval 1 Error: FIFO is empty
 */
uint8_t FIFO_Pop(FIFO_TypeDef* fifo, uint8_t* c) {
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]

  // If FIFO is empty
  if (fifo->count == 0) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	895b      	ldrh	r3, [r3, #10]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <FIFO_Pop+0x16>
//    println("FIFO is empty");
    return 1;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01b      	b.n	80064da <FIFO_Pop+0x4e>
  }
  *c = fifo->buf[fifo->tail++];
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	885b      	ldrh	r3, [r3, #2]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	b288      	uxth	r0, r1
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	8048      	strh	r0, [r1, #2]
 80064b2:	4413      	add	r3, r2
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	701a      	strb	r2, [r3, #0]
  fifo->count--;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	895b      	ldrh	r3, [r3, #10]
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	815a      	strh	r2, [r3, #10]

  if (fifo->tail == fifo->len) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	885a      	ldrh	r2, [r3, #2]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	891b      	ldrh	r3, [r3, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d102      	bne.n	80064d8 <FIFO_Pop+0x4c>
    fifo->tail = 0; // start from beginning
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	805a      	strh	r2, [r3, #2]
  }

  return 0;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <FIFO_IsEmpty>:
 * @brief Checks whether the FIFO is empty.
 * @param fifo Pointer to FIFO structure
 * @retval 1 FIFO is empty
 * @retval 0 FIFO is not empty
 */
uint8_t FIFO_IsEmpty(FIFO_TypeDef* fifo) {
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  if (fifo->count == 0) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	895b      	ldrh	r3, [r3, #10]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <FIFO_IsEmpty+0x14>
    return 1;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <FIFO_IsEmpty+0x16>
  }

  return 0;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <ADCT_PhSensorInit>:
volatile uint8_t idx_u8;
uint16_t SampleData_pu16[10];
uint8_t Data_avai = 0 ;
#define offset 0.8188
void ADCT_PhSensorInit(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	/* Configure PB.00 (ADC Channel8) as analog input -------------------------*/
	RCC_APB2PeriphClockCmd(ADCT_PH_GPIO_CLK, ENABLE);
 800650a:	2101      	movs	r1, #1
 800650c:	2008      	movs	r0, #8
 800650e:	f002 fa8b 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = ADCT_PH_PIN;
 8006512:	2301      	movs	r3, #1
 8006514:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	4821      	ldr	r0, [pc, #132]	; (80065a8 <ADCT_PhSensorInit+0xa4>)
 8006522:	f001 fcdd 	bl	8007ee0 <GPIO_Init>

	/* Configure clocks for ADC and GPIO PORT */
	RCC_APB2PeriphClockCmd(ADCT_PH_ADC_CLK, ENABLE);
 8006526:	2101      	movs	r1, #1
 8006528:	f44f 7000 	mov.w	r0, #512	; 0x200
 800652c:	f002 fa7c 	bl	8008a28 <RCC_APB2PeriphClockCmd>

	/* ADCx configuration ------------------------------------------------------*/
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8006530:	2300      	movs	r3, #0
 8006532:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8006534:	2300      	movs	r3, #0
 8006536:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8006538:	2301      	movs	r3, #1
 800653a:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800653c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8006540:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 8006546:	2301      	movs	r3, #1
 8006548:	743b      	strb	r3, [r7, #16]
	ADC_Init(ADC1, &ADC_InitStructure);
 800654a:	463b      	mov	r3, r7
 800654c:	4619      	mov	r1, r3
 800654e:	4817      	ldr	r0, [pc, #92]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 8006550:	f001 f840 	bl	80075d4 <ADC_Init>
	/* ADC1 Regular Channel 8 Configuration */
	ADC_RegularChannelConfig(ADCT_PH_ADC_HW, ADCT_PH_ADC_HW_Channel, 1, ADC_SampleTime_1Cycles5);
 8006554:	2300      	movs	r3, #0
 8006556:	2201      	movs	r2, #1
 8006558:	2108      	movs	r1, #8
 800655a:	4814      	ldr	r0, [pc, #80]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 800655c:	f001 f914 	bl	8007788 <ADC_RegularChannelConfig>
	/* Enable ADC1 */
	ADC_Cmd(ADCT_PH_ADC_HW, ENABLE);
 8006560:	2101      	movs	r1, #1
 8006562:	4812      	ldr	r0, [pc, #72]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 8006564:	f001 f888 	bl	8007678 <ADC_Cmd>

	/* Enable Vrefint channel enable temperature sensor for ADC module */
	ADC_TempSensorVrefintCmd(ENABLE);
 8006568:	2001      	movs	r0, #1
 800656a:	f001 f9e3 	bl	8007934 <ADC_TempSensorVrefintCmd>

	/* Enable ADC1 reset calibaration register */
	ADC_ResetCalibration(ADCT_PH_ADC_HW);
 800656e:	480f      	ldr	r0, [pc, #60]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 8006570:	f001 f89e 	bl	80076b0 <ADC_ResetCalibration>

	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADCT_PH_ADC_HW));
 8006574:	bf00      	nop
 8006576:	480d      	ldr	r0, [pc, #52]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 8006578:	f001 f8aa 	bl	80076d0 <ADC_GetResetCalibrationStatus>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f9      	bne.n	8006576 <ADCT_PhSensorInit+0x72>

	/* Start ADC1 calibaration */
	ADC_StartCalibration(ADCT_PH_ADC_HW);
 8006582:	480a      	ldr	r0, [pc, #40]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 8006584:	f001 f8bc 	bl	8007700 <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(ADCT_PH_ADC_HW));
 8006588:	bf00      	nop
 800658a:	4808      	ldr	r0, [pc, #32]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 800658c:	f001 f8c8 	bl	8007720 <ADC_GetCalibrationStatus>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f9      	bne.n	800658a <ADCT_PhSensorInit+0x86>
	/* Start ADC1 Software Conversion */
	ADC_SoftwareStartConvCmd(ADCT_PH_ADC_HW, ENABLE);
 8006596:	2101      	movs	r1, #1
 8006598:	4804      	ldr	r0, [pc, #16]	; (80065ac <ADCT_PhSensorInit+0xa8>)
 800659a:	f001 f8d9 	bl	8007750 <ADC_SoftwareStartConvCmd>
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40010800 	.word	0x40010800
 80065ac:	40012400 	.word	0x40012400

080065b0 <ADCT_Ph_getValue>:
unsigned long int avgValue;  //Store the average value of the sensor feedback
int temp;
double ADCT_Ph_getValue(void)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
	for(int i=0;i<9;i++)        //sort the analog from small to large
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e02c      	b.n	8006616 <ADCT_Ph_getValue+0x66>
	  {
	    for(int j=i+1;j<10;j++)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	e022      	b.n	800660a <ADCT_Ph_getValue+0x5a>
	    {
	      if(SampleData_pu16[i]>SampleData_pu16[j])
 80065c4:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80065cc:	493e      	ldr	r1, [pc, #248]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d915      	bls.n	8006604 <ADCT_Ph_getValue+0x54>
	      {
	        temp=SampleData_pu16[i];
 80065d8:	4a3b      	ldr	r2, [pc, #236]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b3a      	ldr	r3, [pc, #232]	; (80066cc <ADCT_Ph_getValue+0x11c>)
 80065e4:	601a      	str	r2, [r3, #0]
	        SampleData_pu16[i]=SampleData_pu16[j];
 80065e6:	4a38      	ldr	r2, [pc, #224]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80065ee:	4a36      	ldr	r2, [pc, #216]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	        SampleData_pu16[j]=temp;
 80065f6:	4b35      	ldr	r3, [pc, #212]	; (80066cc <ADCT_Ph_getValue+0x11c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	b299      	uxth	r1, r3
 80065fc:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
int temp;
double ADCT_Ph_getValue(void)
{
	for(int i=0;i<9;i++)        //sort the analog from small to large
	  {
	    for(int j=i+1;j<10;j++)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	3301      	adds	r3, #1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b09      	cmp	r3, #9
 800660e:	ddd9      	ble.n	80065c4 <ADCT_Ph_getValue+0x14>
}
unsigned long int avgValue;  //Store the average value of the sensor feedback
int temp;
double ADCT_Ph_getValue(void)
{
	for(int i=0;i<9;i++)        //sort the analog from small to large
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b08      	cmp	r3, #8
 800661a:	ddcf      	ble.n	80065bc <ADCT_Ph_getValue+0xc>
	        SampleData_pu16[i]=SampleData_pu16[j];
	        SampleData_pu16[j]=temp;
	      }
	    }
	  }
	avgValue=0;
 800661c:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <ADCT_Ph_getValue+0x120>)
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]
	  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
 8006622:	2302      	movs	r3, #2
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e00c      	b.n	8006642 <ADCT_Ph_getValue+0x92>
	    avgValue+=SampleData_pu16[i];
 8006628:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <ADCT_Ph_getValue+0x118>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006630:	461a      	mov	r2, r3
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <ADCT_Ph_getValue+0x120>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4413      	add	r3, r2
 8006638:	4a25      	ldr	r2, [pc, #148]	; (80066d0 <ADCT_Ph_getValue+0x120>)
 800663a:	6013      	str	r3, [r2, #0]
	        SampleData_pu16[j]=temp;
	      }
	    }
	  }
	avgValue=0;
	  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3301      	adds	r3, #1
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b07      	cmp	r3, #7
 8006646:	ddef      	ble.n	8006628 <ADCT_Ph_getValue+0x78>
	    avgValue+=SampleData_pu16[i];
	  float phValue=(float)avgValue*5/4096/6; //convert the analog into millivolt
 8006648:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <ADCT_Ph_getValue+0x120>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fa fa6f 	bl	8000b30 <__aeabi_ui2f>
 8006652:	4603      	mov	r3, r0
 8006654:	491f      	ldr	r1, [pc, #124]	; (80066d4 <ADCT_Ph_getValue+0x124>)
 8006656:	4618      	mov	r0, r3
 8006658:	f7fa fac2 	bl	8000be0 <__aeabi_fmul>
 800665c:	4603      	mov	r3, r0
 800665e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8006662:	4618      	mov	r0, r3
 8006664:	f7fa fb70 	bl	8000d48 <__aeabi_fdiv>
 8006668:	4603      	mov	r3, r0
 800666a:	491b      	ldr	r1, [pc, #108]	; (80066d8 <ADCT_Ph_getValue+0x128>)
 800666c:	4618      	mov	r0, r3
 800666e:	f7fa fb6b 	bl	8000d48 <__aeabi_fdiv>
 8006672:	4603      	mov	r3, r0
 8006674:	603b      	str	r3, [r7, #0]
	  phValue=3.5*phValue + offset;
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f7f9 fece 	bl	8000418 <__aeabi_f2d>
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	4b16      	ldr	r3, [pc, #88]	; (80066dc <ADCT_Ph_getValue+0x12c>)
 8006682:	f7f9 ff1d 	bl	80004c0 <__aeabi_dmul>
 8006686:	4603      	mov	r3, r0
 8006688:	460c      	mov	r4, r1
 800668a:	4618      	mov	r0, r3
 800668c:	4621      	mov	r1, r4
 800668e:	a30c      	add	r3, pc, #48	; (adr r3, 80066c0 <ADCT_Ph_getValue+0x110>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fd62 	bl	800015c <__adddf3>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	4618      	mov	r0, r3
 800669e:	4621      	mov	r1, r4
 80066a0:	f7fa f940 	bl	8000924 <__aeabi_d2f>
 80066a4:	4603      	mov	r3, r0
 80066a6:	603b      	str	r3, [r7, #0]
	  return phValue;//convert the millivolt into pH value
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7f9 feb5 	bl	8000418 <__aeabi_f2d>
 80066ae:	4603      	mov	r3, r0
 80066b0:	460c      	mov	r4, r1
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	4621      	mov	r1, r4
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd90      	pop	{r4, r7, pc}
 80066bc:	f3af 8000 	nop.w
 80066c0:	0ebedfa4 	.word	0x0ebedfa4
 80066c4:	3fea339c 	.word	0x3fea339c
 80066c8:	20002704 	.word	0x20002704
 80066cc:	200026fc 	.word	0x200026fc
 80066d0:	200026f8 	.word	0x200026f8
 80066d4:	40a00000 	.word	0x40a00000
 80066d8:	40c00000 	.word	0x40c00000
 80066dc:	400c0000 	.word	0x400c0000

080066e0 <ADCT_Ph_GetSample>:
  }//if
  return avg;
}

void ADCT_Ph_GetSample(uint8_t * available_ui8)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	if ( idx_u8 < 10 )
 80066e8:	4b12      	ldr	r3, [pc, #72]	; (8006734 <ADCT_Ph_GetSample+0x54>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b09      	cmp	r3, #9
 80066f0:	d816      	bhi.n	8006720 <ADCT_Ph_GetSample+0x40>
	{
		*available_ui8 = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
		SampleData_pu16[idx_u8] = ADC_GetConversionValue(ADCT_PH_ADC_HW);
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <ADCT_Ph_GetSample+0x54>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	461c      	mov	r4, r3
 8006700:	480d      	ldr	r0, [pc, #52]	; (8006738 <ADCT_Ph_GetSample+0x58>)
 8006702:	f001 f90b 	bl	800791c <ADC_GetConversionValue>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <ADCT_Ph_GetSample+0x5c>)
 800670c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		idx_u8 ++;
 8006710:	4b08      	ldr	r3, [pc, #32]	; (8006734 <ADCT_Ph_GetSample+0x54>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	3301      	adds	r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <ADCT_Ph_GetSample+0x54>)
 800671c:	701a      	strb	r2, [r3, #0]
	{

		*available_ui8 =1;
		idx_u8 = 0;
	}
}
 800671e:	e005      	b.n	800672c <ADCT_Ph_GetSample+0x4c>
		idx_u8 ++;
	}
	else
	{

		*available_ui8 =1;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
		idx_u8 = 0;
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <ADCT_Ph_GetSample+0x54>)
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
	}
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}
 8006734:	20002700 	.word	0x20002700
 8006738:	40012400 	.word	0x40012400
 800673c:	20002704 	.word	0x20002704

08006740 <ADCT_Ph_GetStatus>:

uint8_t  ADCT_Ph_GetStatus(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
	return Data_avai;
 8006744:	4b02      	ldr	r3, [pc, #8]	; (8006750 <ADCT_Ph_GetStatus+0x10>)
 8006746:	781b      	ldrb	r3, [r3, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	20002451 	.word	0x20002451

08006754 <ADCT_Relay_Init>:
 *  Created on: Dec 25, 2016
 *      Author: Administrator
 */
#include "ADCT_Relay.h"
void ADCT_Relay_Init(void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	/* GPIO Periph clock enable */
	RCC_APB2PeriphClockCmd(ADCT_BGS_CTRL_RELAY_S01_CLK|ADCT_BGS_CTRL_RELAY_S02_CLK|ADCT_BGS_CTRL_RELAY_S03_CLK|ADCT_BGS_CTRL_RELAY_S04_CLK|ADCT_BGS_CTRL_RELAY_S05_CLK|ADCT_BGS_CTRL_RELAY_S06_CLK|ADCT_BGS_CTRL_RELAY_S07_CLK|ADCT_BGS_CTRL_RELAY_S08_CLK|ADCT_BGS_CTRL_RELAY_B09_CLK|ADCT_BGS_CTRL_RELAY_B10_CLK, ENABLE);
 800675a:	2101      	movs	r1, #1
 800675c:	201c      	movs	r0, #28
 800675e:	f002 f963 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S01;
 8006762:	2301      	movs	r3, #1
 8006764:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006766:	2303      	movs	r3, #3
 8006768:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800676a:	2310      	movs	r3, #16
 800676c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S01_PORT, &GPIO_InitStructure);
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4836      	ldr	r0, [pc, #216]	; (800684c <ADCT_Relay_Init+0xf8>)
 8006774:	f001 fbb4 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S02;
 8006778:	2302      	movs	r3, #2
 800677a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800677c:	2303      	movs	r3, #3
 800677e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006780:	2310      	movs	r3, #16
 8006782:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S02_PORT, &GPIO_InitStructure);
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4830      	ldr	r0, [pc, #192]	; (800684c <ADCT_Relay_Init+0xf8>)
 800678a:	f001 fba9 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S03;
 800678e:	2304      	movs	r3, #4
 8006790:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006792:	2303      	movs	r3, #3
 8006794:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006796:	2310      	movs	r3, #16
 8006798:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S03_PORT, &GPIO_InitStructure);
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	4619      	mov	r1, r3
 800679e:	482b      	ldr	r0, [pc, #172]	; (800684c <ADCT_Relay_Init+0xf8>)
 80067a0:	f001 fb9e 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S04;
 80067a4:	2308      	movs	r3, #8
 80067a6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80067a8:	2303      	movs	r3, #3
 80067aa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80067ac:	2310      	movs	r3, #16
 80067ae:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S04_PORT, &GPIO_InitStructure);
 80067b0:	1d3b      	adds	r3, r7, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4825      	ldr	r0, [pc, #148]	; (800684c <ADCT_Relay_Init+0xf8>)
 80067b6:	f001 fb93 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S05;
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80067be:	2303      	movs	r3, #3
 80067c0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80067c2:	2310      	movs	r3, #16
 80067c4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S05_PORT, &GPIO_InitStructure);
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4821      	ldr	r0, [pc, #132]	; (8006850 <ADCT_Relay_Init+0xfc>)
 80067cc:	f001 fb88 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S06;
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80067d4:	2303      	movs	r3, #3
 80067d6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80067d8:	2310      	movs	r3, #16
 80067da:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S06_PORT, &GPIO_InitStructure);
 80067dc:	1d3b      	adds	r3, r7, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	481b      	ldr	r0, [pc, #108]	; (8006850 <ADCT_Relay_Init+0xfc>)
 80067e2:	f001 fb7d 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S07;
 80067e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ea:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80067ec:	2303      	movs	r3, #3
 80067ee:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80067f0:	2310      	movs	r3, #16
 80067f2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S07_PORT, &GPIO_InitStructure);
 80067f4:	1d3b      	adds	r3, r7, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4815      	ldr	r0, [pc, #84]	; (8006850 <ADCT_Relay_Init+0xfc>)
 80067fa:	f001 fb71 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_S08;
 80067fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006802:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006804:	2303      	movs	r3, #3
 8006806:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006808:	2310      	movs	r3, #16
 800680a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_S08_PORT, &GPIO_InitStructure);
 800680c:	1d3b      	adds	r3, r7, #4
 800680e:	4619      	mov	r1, r3
 8006810:	480f      	ldr	r0, [pc, #60]	; (8006850 <ADCT_Relay_Init+0xfc>)
 8006812:	f001 fb65 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_B09;
 8006816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800681a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800681c:	2303      	movs	r3, #3
 800681e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006820:	2310      	movs	r3, #16
 8006822:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_B09_PORT, &GPIO_InitStructure);
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4809      	ldr	r0, [pc, #36]	; (8006850 <ADCT_Relay_Init+0xfc>)
 800682a:	f001 fb59 	bl	8007ee0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_CTRL_RELAY_B10;
 800682e:	2320      	movs	r3, #32
 8006830:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006832:	2303      	movs	r3, #3
 8006834:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006836:	2310      	movs	r3, #16
 8006838:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_CTRL_RELAY_B10_PORT, &GPIO_InitStructure);
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4805      	ldr	r0, [pc, #20]	; (8006854 <ADCT_Relay_Init+0x100>)
 8006840:	f001 fb4e 	bl	8007ee0 <GPIO_Init>
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40010800 	.word	0x40010800
 8006850:	40011000 	.word	0x40011000
 8006854:	40010c00 	.word	0x40010c00

08006858 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8006862:	4909      	ldr	r1, [pc, #36]	; (8006888 <NVIC_ClearPendingIRQ+0x30>)
 8006864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	79fa      	ldrb	r2, [r7, #7]
 800686c:	f002 021f 	and.w	r2, r2, #31
 8006870:	2001      	movs	r0, #1
 8006872:	fa00 f202 	lsl.w	r2, r0, r2
 8006876:	3360      	adds	r3, #96	; 0x60
 8006878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	e000e100 	.word	0xe000e100

0800688c <RTC_Configuration>:
 *   RTC clock
 * @param  None
 * @retval : None
 */
void RTC_Configuration()
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
	uint16_t WaitForOscSource;

	/*Allow access to Backup Registers*/
	PWR_BackupAccessCmd(ENABLE);
 8006892:	2001      	movs	r0, #1
 8006894:	f001 fea8 	bl	80085e8 <PWR_BackupAccessCmd>

	//if(BKP_ReadBackupRegister(BKP_DR1)==CONFIGURATION_DONE)
	bkupdata = BKP_ReadBackupRegister(BKP_DR1);
 8006898:	2004      	movs	r0, #4
 800689a:	f001 f8a9 	bl	80079f0 <BKP_ReadBackupRegister>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b5a      	ldr	r3, [pc, #360]	; (8006a0c <RTC_Configuration+0x180>)
 80068a4:	601a      	str	r2, [r3, #0]
	if(bkupdata==CONFIGURATION_RESET)
 80068a6:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <RTC_Configuration+0x180>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d16c      	bne.n	8006988 <RTC_Configuration+0xfc>
	{
		/*Enables the clock to Backup and power interface peripherals    */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_BKP | RCC_APB1Periph_PWR,ENABLE);
 80068ae:	2101      	movs	r1, #1
 80068b0:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 80068b4:	f002 f8d6 	bl	8008a64 <RCC_APB1PeriphClockCmd>
		/* Backup Domain Reset */
		BKP_DeInit();
 80068b8:	f001 f858 	bl	800796c <BKP_DeInit>

		s_DateStructVar.Month=DEFAULT_MONTH ;
 80068bc:	4b54      	ldr	r3, [pc, #336]	; (8006a10 <RTC_Configuration+0x184>)
 80068be:	2207      	movs	r2, #7
 80068c0:	701a      	strb	r2, [r3, #0]
		s_DateStructVar.Day=DEFAULT_DAY;
 80068c2:	4b53      	ldr	r3, [pc, #332]	; (8006a10 <RTC_Configuration+0x184>)
 80068c4:	2209      	movs	r2, #9
 80068c6:	705a      	strb	r2, [r3, #1]
		s_DateStructVar.Year=DEFAULT_YEAR;
 80068c8:	4b51      	ldr	r3, [pc, #324]	; (8006a10 <RTC_Configuration+0x184>)
 80068ca:	f240 72e1 	movw	r2, #2017	; 0x7e1
 80068ce:	805a      	strh	r2, [r3, #2]
		SummerTimeCorrect = OCTOBER_FLAG_SET;
 80068d0:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <RTC_Configuration+0x188>)
 80068d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068d6:	801a      	strh	r2, [r3, #0]
		BKP_WriteBackupRegister(BKP_DR7,SummerTimeCorrect);
 80068d8:	4b4e      	ldr	r3, [pc, #312]	; (8006a14 <RTC_Configuration+0x188>)
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	4619      	mov	r1, r3
 80068de:	201c      	movs	r0, #28
 80068e0:	f001 f86a 	bl	80079b8 <BKP_WriteBackupRegister>
		BKP_WriteBackupRegister(BKP_DR2,s_DateStructVar.Month);
 80068e4:	4b4a      	ldr	r3, [pc, #296]	; (8006a10 <RTC_Configuration+0x184>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4619      	mov	r1, r3
 80068ec:	2008      	movs	r0, #8
 80068ee:	f001 f863 	bl	80079b8 <BKP_WriteBackupRegister>
		BKP_WriteBackupRegister(BKP_DR3,s_DateStructVar.Day);
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <RTC_Configuration+0x184>)
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	200c      	movs	r0, #12
 80068fc:	f001 f85c 	bl	80079b8 <BKP_WriteBackupRegister>
		BKP_WriteBackupRegister(BKP_DR4,s_DateStructVar.Year);
 8006900:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <RTC_Configuration+0x184>)
 8006902:	885b      	ldrh	r3, [r3, #2]
 8006904:	4619      	mov	r1, r3
 8006906:	2010      	movs	r0, #16
 8006908:	f001 f856 	bl	80079b8 <BKP_WriteBackupRegister>
		BKP_WriteBackupRegister(BKP_DR1, CONFIGURATION_DONE);
 800690c:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8006910:	2004      	movs	r0, #4
 8006912:	f001 f851 	bl	80079b8 <BKP_WriteBackupRegister>
		/*Enable 32.768 kHz external oscillator */
		RCC_LSEConfig(RCC_LSE_ON);
 8006916:	2001      	movs	r0, #1
 8006918:	f001 ff76 	bl	8008808 <RCC_LSEConfig>

		for(WaitForOscSource=0;WaitForOscSource<5000;WaitForOscSource++)
 800691c:	2300      	movs	r3, #0
 800691e:	80fb      	strh	r3, [r7, #6]
 8006920:	e002      	b.n	8006928 <RTC_Configuration+0x9c>
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	3301      	adds	r3, #1
 8006926:	80fb      	strh	r3, [r7, #6]
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	f241 3287 	movw	r2, #4999	; 0x1387
 800692e:	4293      	cmp	r3, r2
 8006930:	d9f7      	bls.n	8006922 <RTC_Configuration+0x96>
		{
		}
		while ((RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET))
 8006932:	bf00      	nop
 8006934:	2041      	movs	r0, #65	; 0x41
 8006936:	f002 f8c3 	bl	8008ac0 <RCC_GetFlagStatus>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f9      	beq.n	8006934 <RTC_Configuration+0xa8>
		        // Wait till LSE is ready
		       ;
		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8006940:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006944:	f001 ff80 	bl	8008848 <RCC_RTCCLKConfig>
		/* RTC Enabled */
		RCC_RTCCLKCmd(ENABLE);
 8006948:	2001      	movs	r0, #1
 800694a:	f001 ff8f 	bl	800886c <RCC_RTCCLKCmd>
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 800694e:	f002 f991 	bl	8008c74 <RTC_WaitForLastTask>
		/* Setting RTC Interrupts-Seconds interrupt enabled */
		/* Enable the RTC Second */
		RTC_ITConfig(RTC_IT_SEC , ENABLE);
 8006952:	2101      	movs	r1, #1
 8006954:	2001      	movs	r0, #1
 8006956:	f002 f8ed 	bl	8008b34 <RTC_ITConfig>
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 800695a:	f002 f98b 	bl	8008c74 <RTC_WaitForLastTask>

		BKP_WriteBackupRegister(BKP_DR6, 1);
 800695e:	2101      	movs	r1, #1
 8006960:	2018      	movs	r0, #24
 8006962:	f001 f829 	bl	80079b8 <BKP_WriteBackupRegister>

		/* Set RTC prescaler: set RTC period to 1 sec */
		RTC_SetPrescaler(32765); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 8006966:	f647 70fd 	movw	r0, #32765	; 0x7ffd
 800696a:	f002 f969 	bl	8008c40 <RTC_SetPrescaler>
		/* Prescaler is set to 32766 instead of 32768 to compensate for
        lower as well as higher frequencies*/
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 800696e:	f002 f981 	bl	8008c74 <RTC_WaitForLastTask>

		/* Set default system time to 09 : 24 : 00 */
		SetTime(DEFAULT_HOURS,DEFAULT_MINUTES,DEFAULT_SECONDS);
 8006972:	2200      	movs	r2, #0
 8006974:	2125      	movs	r1, #37	; 0x25
 8006976:	200a      	movs	r0, #10
 8006978:	f000 f8a6 	bl	8006ac8 <SetTime>
		BKP_WriteBackupRegister(BKP_DR1, CONFIGURATION_DONE);
 800697c:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8006980:	2004      	movs	r0, #4
 8006982:	f001 f819 	bl	80079b8 <BKP_WriteBackupRegister>
 8006986:	e017      	b.n	80069b8 <RTC_Configuration+0x12c>
	}
	else
	{
		/* PWR and BKP clocks selection */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8006988:	2101      	movs	r1, #1
 800698a:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 800698e:	f002 f869 	bl	8008a64 <RCC_APB1PeriphClockCmd>
		for(WaitForOscSource=0;WaitForOscSource<5000;WaitForOscSource++);
 8006992:	2300      	movs	r3, #0
 8006994:	80fb      	strh	r3, [r7, #6]
 8006996:	e002      	b.n	800699e <RTC_Configuration+0x112>
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	3301      	adds	r3, #1
 800699c:	80fb      	strh	r3, [r7, #6]
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d9f7      	bls.n	8006998 <RTC_Configuration+0x10c>
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 80069a8:	f002 f964 	bl	8008c74 <RTC_WaitForLastTask>
		/* Enable the RTC Second */
		RTC_ITConfig(RTC_IT_SEC, ENABLE);
 80069ac:	2101      	movs	r1, #1
 80069ae:	2001      	movs	r0, #1
 80069b0:	f002 f8c0 	bl	8008b34 <RTC_ITConfig>
		RTC_WaitForLastTask();
 80069b4:	f002 f95e 	bl	8008c74 <RTC_WaitForLastTask>
	}

	/* Check if how many days are elapsed in power down/Low Power Mode-
   Updates Date that many Times*/
	CheckForDaysElapsed();
 80069b8:	f000 fad8 	bl	8006f6c <CheckForDaysElapsed>
	ClockSource = BKP_ReadBackupRegister(BKP_DR6);
 80069bc:	2018      	movs	r0, #24
 80069be:	f001 f817 	bl	80079f0 <BKP_ReadBackupRegister>
 80069c2:	4603      	mov	r3, r0
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <RTC_Configuration+0x18c>)
 80069c8:	701a      	strb	r2, [r3, #0]
	s_DateStructVar.Month = BKP_ReadBackupRegister(BKP_DR2);
 80069ca:	2008      	movs	r0, #8
 80069cc:	f001 f810 	bl	80079f0 <BKP_ReadBackupRegister>
 80069d0:	4603      	mov	r3, r0
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <RTC_Configuration+0x184>)
 80069d6:	701a      	strb	r2, [r3, #0]
	s_DateStructVar.Day = BKP_ReadBackupRegister(BKP_DR3);
 80069d8:	200c      	movs	r0, #12
 80069da:	f001 f809 	bl	80079f0 <BKP_ReadBackupRegister>
 80069de:	4603      	mov	r3, r0
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <RTC_Configuration+0x184>)
 80069e4:	705a      	strb	r2, [r3, #1]
	s_DateStructVar.Year = BKP_ReadBackupRegister(BKP_DR4);
 80069e6:	2010      	movs	r0, #16
 80069e8:	f001 f802 	bl	80079f0 <BKP_ReadBackupRegister>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <RTC_Configuration+0x184>)
 80069f2:	805a      	strh	r2, [r3, #2]
	SummerTimeCorrect = BKP_ReadBackupRegister(BKP_DR7);
 80069f4:	201c      	movs	r0, #28
 80069f6:	f000 fffb 	bl	80079f0 <BKP_ReadBackupRegister>
 80069fa:	4603      	mov	r3, r0
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <RTC_Configuration+0x188>)
 8006a00:	801a      	strh	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000180 	.word	0x20000180
 8006a10:	20002718 	.word	0x20002718
 8006a14:	20002722 	.word	0x20002722
 8006a18:	20002724 	.word	0x20002724

08006a1c <RTC_RCC_Configuration>:
		}
	}
}

void RTC_RCC_Configuration(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0

	/* Enable HSE */
	//RCC_HSEConfig(RCC_HSE_ON);

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8006a22:	f001 fe1d 	bl	8008660 <RCC_WaitForHSEStartUp>
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]

	if(HSEStartUpStatus == SUCCESS)
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d128      	bne.n	8006a82 <RTC_RCC_Configuration+0x66>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8006a30:	2010      	movs	r0, #16
 8006a32:	f001 fa2b 	bl	8007e8c <FLASH_PrefetchBufferCmd>

		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 8006a36:	2002      	movs	r0, #2
 8006a38:	f001 fa0c 	bl	8007e54 <FLASH_SetLatency>

		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f001 fe8f 	bl	8008760 <RCC_HCLKConfig>

		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8006a42:	2000      	movs	r0, #0
 8006a44:	f001 fec4 	bl	80087d0 <RCC_PCLK2Config>

		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8006a48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006a4c:	f001 fea4 	bl	8008798 <RCC_PCLK1Config>
		//RCC_PCLK1Config(RCC_HCLK_Div1);
		/* PLLCLK = 8MHz * 9 = 72 MHz */
		/* PLLCLK = 12MHz * 6 = 72 MHz */
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8006a50:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8006a54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006a58:	f001 fe2a 	bl	80086b0 <RCC_PLLConfig>
		//RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f001 fe45 	bl	80086ec <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8006a62:	bf00      	nop
 8006a64:	2039      	movs	r0, #57	; 0x39
 8006a66:	f002 f82b 	bl	8008ac0 <RCC_GetFlagStatus>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f9      	beq.n	8006a64 <RTC_RCC_Configuration+0x48>
		{
		}

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8006a70:	2002      	movs	r0, #2
 8006a72:	f001 fe4b 	bl	800870c <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while(RCC_GetSYSCLKSource() != 0x08)
 8006a76:	bf00      	nop
 8006a78:	f001 fe64 	bl	8008744 <RCC_GetSYSCLKSource>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d1fa      	bne.n	8006a78 <RTC_RCC_Configuration+0x5c>
		{
		}
	}

}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <ADCT_BGS_RTC_Init>:
 * @brief  RTC Initialisation Routine
 * @param  None
 * @retval : None
 */
void ADCT_BGS_RTC_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
	RTC_RCC_Configuration();
 8006a90:	f7ff ffc4 	bl	8006a1c <RTC_RCC_Configuration>
	/*Enables the clock to Backup and power interface peripherals    */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_BKP | RCC_APB1Periph_PWR,ENABLE);// Enable PWR/BKP
 8006a94:	2101      	movs	r1, #1
 8006a96:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8006a9a:	f001 ffe3 	bl	8008a64 <RCC_APB1PeriphClockCmd>
	/* Unlock the Flash Program Erase controller */
	FLASH_Unlock();
 8006a9e:	f001 fa0d 	bl	8007ebc <FLASH_Unlock>
	RTC_NVIC_Configuration();
 8006aa2:	f000 fa9d 	bl	8006fe0 <RTC_NVIC_Configuration>
	/* RTC Configuration*/
	RTC_Configuration();
 8006aa6:	f7ff fef1 	bl	800688c <RTC_Configuration>
	/*RTC_NVIC Configuration */

	BKP_RTCOutputConfig(BKP_RTCOutputSource_None);
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f000 ff68 	bl	8007980 <BKP_RTCOutputConfig>
	/* Configure PVD Supervisor to disable the Tamper Interrupt when voltage drops
  below 2.5 volts*/
	PWR_PVDCmd(ENABLE);
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	f001 fda9 	bl	8008608 <PWR_PVDCmd>
	PWR_PVDLevelConfig(PWR_PVDLevel_2V5);
 8006ab6:	2060      	movs	r0, #96	; 0x60
 8006ab8:	f001 fdb6 	bl	8008628 <PWR_PVDLevelConfig>
	PWR_BackupAccessCmd(ENABLE);
 8006abc:	2001      	movs	r0, #1
 8006abe:	f001 fd93 	bl	80085e8 <PWR_BackupAccessCmd>

}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <SetTime>:
 * @brief  Sets the RTC Current Counter Value
 * @param Hour, Minute and Seconds data
 * @retval : None
 */
void SetTime(uint8_t Hour,uint8_t Minute,uint8_t Seconds)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	71bb      	strb	r3, [r7, #6]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	717b      	strb	r3, [r7, #5]
	uint32_t CounterValue;

	CounterValue=((Hour * 3600)+ (Minute * 60)+Seconds);
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006ae0:	fb02 f103 	mul.w	r1, r2, r3
 8006ae4:	79ba      	ldrb	r2, [r7, #6]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	18ca      	adds	r2, r1, r3
 8006af0:	797b      	ldrb	r3, [r7, #5]
 8006af2:	4413      	add	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

	RTC_WaitForLastTask();
 8006af6:	f002 f8bd 	bl	8008c74 <RTC_WaitForLastTask>
	RTC_SetCounter(CounterValue);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f002 f888 	bl	8008c10 <RTC_SetCounter>
	RTC_WaitForLastTask();
 8006b00:	f002 f8b8 	bl	8008c74 <RTC_WaitForLastTask>
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SetDate>:
 * @brief  Sets the RTC Date(DD/MM/YYYY)
 * @param DD,MM,YYYY
 * @retval : None
 */
void SetDate(uint8_t Day, uint8_t Month, uint16_t Year)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
 8006b16:	460b      	mov	r3, r1
 8006b18:	71bb      	strb	r3, [r7, #6]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80bb      	strh	r3, [r7, #4]
	uint32_t DateTimer;

	/*Check if the date entered by the user is correct or not, Displays an error
    message if date is incorrect  */
	if((( Month==4 || Month==6 || Month==9 || Month==11) && Day ==31) \
 8006b1e:	79bb      	ldrb	r3, [r7, #6]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d008      	beq.n	8006b36 <SetDate+0x2a>
 8006b24:	79bb      	ldrb	r3, [r7, #6]
 8006b26:	2b06      	cmp	r3, #6
 8006b28:	d005      	beq.n	8006b36 <SetDate+0x2a>
 8006b2a:	79bb      	ldrb	r3, [r7, #6]
 8006b2c:	2b09      	cmp	r3, #9
 8006b2e:	d002      	beq.n	8006b36 <SetDate+0x2a>
 8006b30:	79bb      	ldrb	r3, [r7, #6]
 8006b32:	2b0b      	cmp	r3, #11
 8006b34:	d102      	bne.n	8006b3c <SetDate+0x30>
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	2b1f      	cmp	r3, #31
 8006b3a:	d018      	beq.n	8006b6e <SetDate+0x62>
			|| (Month==2 && Day==31)|| (Month==2 && Day==30)|| \
 8006b3c:	79bb      	ldrb	r3, [r7, #6]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d102      	bne.n	8006b48 <SetDate+0x3c>
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b1f      	cmp	r3, #31
 8006b46:	d012      	beq.n	8006b6e <SetDate+0x62>
 8006b48:	79bb      	ldrb	r3, [r7, #6]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d102      	bne.n	8006b54 <SetDate+0x48>
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b1e      	cmp	r3, #30
 8006b52:	d00c      	beq.n	8006b6e <SetDate+0x62>
 8006b54:	79bb      	ldrb	r3, [r7, #6]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d115      	bne.n	8006b86 <SetDate+0x7a>
			(Month==2 && Day==29 && (CheckLeap(Year)==0)))
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b1d      	cmp	r3, #29
 8006b5e:	d112      	bne.n	8006b86 <SetDate+0x7a>
 8006b60:	88bb      	ldrh	r3, [r7, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f970 	bl	8006e48 <CheckLeap>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <SetDate+0x7a>
	{
		DateTimer=RTC_GetCounter();
 8006b6e:	f002 f827 	bl	8008bc0 <RTC_GetCounter>
 8006b72:	60f8      	str	r0, [r7, #12]

		while((RTC_GetCounter()-DateTimer)<2)
 8006b74:	bf00      	nop
 8006b76:	f002 f823 	bl	8008bc0 <RTC_GetCounter>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d9f8      	bls.n	8006b76 <SetDate+0x6a>
{
	uint32_t DateTimer;

	/*Check if the date entered by the user is correct or not, Displays an error
    message if date is incorrect  */
	if((( Month==4 || Month==6 || Month==9 || Month==11) && Day ==31) \
 8006b84:	e010      	b.n	8006ba8 <SetDate+0x9c>
		}
	}
	/* if date entered is correct then set the date*/
	else
	{
			BKP_WriteBackupRegister(BKP_DR2,Month);
 8006b86:	79bb      	ldrb	r3, [r7, #6]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	2008      	movs	r0, #8
 8006b8e:	f000 ff13 	bl	80079b8 <BKP_WriteBackupRegister>
			BKP_WriteBackupRegister(BKP_DR3,Day);
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	200c      	movs	r0, #12
 8006b9a:	f000 ff0d 	bl	80079b8 <BKP_WriteBackupRegister>
			BKP_WriteBackupRegister(BKP_DR4,Year);
 8006b9e:	88bb      	ldrh	r3, [r7, #4]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	2010      	movs	r0, #16
 8006ba4:	f000 ff08 	bl	80079b8 <BKP_WriteBackupRegister>
	}
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <ADCT_BGS_Setting_Date_Time>:

void ADCT_BGS_Setting_Date_Time(ADCT_BGS_RTC_Types  *ptr)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	SetTime(ptr->RTC_Hour, ptr->RTC_Min, ptr->RTC_Sec);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7898      	ldrb	r0, [r3, #2]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7859      	ldrb	r1, [r3, #1]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f7ff ff7f 	bl	8006ac8 <SetTime>
	SetDate(ptr->RTC_Mday, ptr->RTC_Mon, ptr->RTC_Year);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	78d8      	ldrb	r0, [r3, #3]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7919      	ldrb	r1, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	88db      	ldrh	r3, [r3, #6]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7ff ff98 	bl	8006b0c <SetDate>
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <ADCT_BGS_Run_RTC>:
void ADCT_BGS_Run_RTC(ADCT_BGS_RTC_Types  *ptr)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	uint32_t TimeVar;
	TimeVar=RTC_GetCounter();
 8006bec:	f001 ffe8 	bl	8008bc0 <RTC_GetCounter>
 8006bf0:	60f8      	str	r0, [r7, #12]
	TimeVar=TimeVar % 86400;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <ADCT_BGS_Run_RTC+0xb4>)
 8006bf6:	fba2 1203 	umull	r1, r2, r2, r3
 8006bfa:	0c12      	lsrs	r2, r2, #16
 8006bfc:	4927      	ldr	r1, [pc, #156]	; (8006c9c <ADCT_BGS_Run_RTC+0xb8>)
 8006bfe:	fb01 f202 	mul.w	r2, r1, r2
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
	ptr->RTC_Sec = (uint8_t)((TimeVar %3600)%60);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <ADCT_BGS_Run_RTC+0xbc>)
 8006c0a:	fba2 1203 	umull	r1, r2, r2, r3
 8006c0e:	0ad2      	lsrs	r2, r2, #11
 8006c10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006c14:	fb01 f202 	mul.w	r2, r1, r2
 8006c18:	1a9a      	subs	r2, r3, r2
 8006c1a:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <ADCT_BGS_Run_RTC+0xc0>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	0959      	lsrs	r1, r3, #5
 8006c22:	460b      	mov	r3, r1
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	1a5b      	subs	r3, r3, r1
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	1ad1      	subs	r1, r2, r3
 8006c2c:	b2ca      	uxtb	r2, r1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	701a      	strb	r2, [r3, #0]
	ptr->RTC_Min = (uint8_t)((TimeVar%3600)/60);
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <ADCT_BGS_Run_RTC+0xbc>)
 8006c36:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3a:	0adb      	lsrs	r3, r3, #11
 8006c3c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <ADCT_BGS_Run_RTC+0xc0>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	705a      	strb	r2, [r3, #1]
	ptr->RTC_Hour = (uint8_t)(TimeVar/3600);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <ADCT_BGS_Run_RTC+0xbc>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	0adb      	lsrs	r3, r3, #11
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	709a      	strb	r2, [r3, #2]
	ptr->RTC_Year =(BKP_ReadBackupRegister(BKP_DR4));
 8006c64:	2010      	movs	r0, #16
 8006c66:	f000 fec3 	bl	80079f0 <BKP_ReadBackupRegister>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	80da      	strh	r2, [r3, #6]
	ptr->RTC_Mon = (BKP_ReadBackupRegister(BKP_DR2));
 8006c72:	2008      	movs	r0, #8
 8006c74:	f000 febc 	bl	80079f0 <BKP_ReadBackupRegister>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	711a      	strb	r2, [r3, #4]
	ptr->RTC_Mday = (BKP_ReadBackupRegister(BKP_DR3));
 8006c80:	200c      	movs	r0, #12
 8006c82:	f000 feb5 	bl	80079f0 <BKP_ReadBackupRegister>
 8006c86:	4603      	mov	r3, r0
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	70da      	strb	r2, [r3, #3]
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	c22e4507 	.word	0xc22e4507
 8006c9c:	00015180 	.word	0x00015180
 8006ca0:	91a2b3c5 	.word	0x91a2b3c5
 8006ca4:	88888889 	.word	0x88888889

08006ca8 <DateUpdate>:
 * @brief Updates the Date (This function is called when 1 Day has elapsed
 * @param None
 * @retval :None
 */
void DateUpdate(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
	s_DateStructVar.Month=BKP_ReadBackupRegister(BKP_DR2);
 8006cac:	2008      	movs	r0, #8
 8006cae:	f000 fe9f 	bl	80079f0 <BKP_ReadBackupRegister>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	4b63      	ldr	r3, [pc, #396]	; (8006e44 <DateUpdate+0x19c>)
 8006cb8:	701a      	strb	r2, [r3, #0]
	s_DateStructVar.Year=BKP_ReadBackupRegister(BKP_DR4);
 8006cba:	2010      	movs	r0, #16
 8006cbc:	f000 fe98 	bl	80079f0 <BKP_ReadBackupRegister>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4b5f      	ldr	r3, [pc, #380]	; (8006e44 <DateUpdate+0x19c>)
 8006cc6:	805a      	strh	r2, [r3, #2]
	s_DateStructVar.Day=BKP_ReadBackupRegister(BKP_DR3);
 8006cc8:	200c      	movs	r0, #12
 8006cca:	f000 fe91 	bl	80079f0 <BKP_ReadBackupRegister>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	4b5c      	ldr	r3, [pc, #368]	; (8006e44 <DateUpdate+0x19c>)
 8006cd4:	705a      	strb	r2, [r3, #1]

	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
 8006cd6:	4b5b      	ldr	r3, [pc, #364]	; (8006e44 <DateUpdate+0x19c>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d017      	beq.n	8006d0e <DateUpdate+0x66>
 8006cde:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <DateUpdate+0x19c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d013      	beq.n	8006d0e <DateUpdate+0x66>
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
 8006ce6:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <DateUpdate+0x19c>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
{
	s_DateStructVar.Month=BKP_ReadBackupRegister(BKP_DR2);
	s_DateStructVar.Year=BKP_ReadBackupRegister(BKP_DR4);
	s_DateStructVar.Day=BKP_ReadBackupRegister(BKP_DR3);

	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d00f      	beq.n	8006d0e <DateUpdate+0x66>
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
 8006cee:	4b55      	ldr	r3, [pc, #340]	; (8006e44 <DateUpdate+0x19c>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b07      	cmp	r3, #7
 8006cf4:	d00b      	beq.n	8006d0e <DateUpdate+0x66>
			s_DateStructVar.Month == 8 || s_DateStructVar.Month == 10 \
 8006cf6:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <DateUpdate+0x19c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
	s_DateStructVar.Month=BKP_ReadBackupRegister(BKP_DR2);
	s_DateStructVar.Year=BKP_ReadBackupRegister(BKP_DR4);
	s_DateStructVar.Day=BKP_ReadBackupRegister(BKP_DR3);

	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d007      	beq.n	8006d0e <DateUpdate+0x66>
			s_DateStructVar.Month == 8 || s_DateStructVar.Month == 10 \
 8006cfe:	4b51      	ldr	r3, [pc, #324]	; (8006e44 <DateUpdate+0x19c>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b0a      	cmp	r3, #10
 8006d04:	d003      	beq.n	8006d0e <DateUpdate+0x66>
			|| s_DateStructVar.Month == 12)
 8006d06:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <DateUpdate+0x19c>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b0c      	cmp	r3, #12
 8006d0c:	d125      	bne.n	8006d5a <DateUpdate+0xb2>
	{
		if(s_DateStructVar.Day < 31)
 8006d0e:	4b4d      	ldr	r3, [pc, #308]	; (8006e44 <DateUpdate+0x19c>)
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b1e      	cmp	r3, #30
 8006d14:	d806      	bhi.n	8006d24 <DateUpdate+0x7c>
		{
			s_DateStructVar.Day++;
 8006d16:	4b4b      	ldr	r3, [pc, #300]	; (8006e44 <DateUpdate+0x19c>)
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b49      	ldr	r3, [pc, #292]	; (8006e44 <DateUpdate+0x19c>)
 8006d20:	705a      	strb	r2, [r3, #1]
	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
			s_DateStructVar.Month == 8 || s_DateStructVar.Month == 10 \
			|| s_DateStructVar.Month == 12)
	{
		if(s_DateStructVar.Day < 31)
 8006d22:	e078      	b.n	8006e16 <DateUpdate+0x16e>
			s_DateStructVar.Day++;
		}
		/* Date structure member: s_DateStructVar.Day = 31 */
		else
		{
			if(s_DateStructVar.Month != 12)
 8006d24:	4b47      	ldr	r3, [pc, #284]	; (8006e44 <DateUpdate+0x19c>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d009      	beq.n	8006d40 <DateUpdate+0x98>
			{
				s_DateStructVar.Month++;
 8006d2c:	4b45      	ldr	r3, [pc, #276]	; (8006e44 <DateUpdate+0x19c>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	3301      	adds	r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <DateUpdate+0x19c>)
 8006d36:	701a      	strb	r2, [r3, #0]
				s_DateStructVar.Day = 1;
 8006d38:	4b42      	ldr	r3, [pc, #264]	; (8006e44 <DateUpdate+0x19c>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	705a      	strb	r2, [r3, #1]
	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
			s_DateStructVar.Month == 8 || s_DateStructVar.Month == 10 \
			|| s_DateStructVar.Month == 12)
	{
		if(s_DateStructVar.Day < 31)
 8006d3e:	e06a      	b.n	8006e16 <DateUpdate+0x16e>
				s_DateStructVar.Day = 1;
			}
			/* Date structure member: s_DateStructVar.Day = 31 & s_DateStructVar.Month =12 */
			else
			{
				s_DateStructVar.Month = 1;
 8006d40:	4b40      	ldr	r3, [pc, #256]	; (8006e44 <DateUpdate+0x19c>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
				s_DateStructVar.Day = 1;
 8006d46:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <DateUpdate+0x19c>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	705a      	strb	r2, [r3, #1]
				s_DateStructVar.Year++;
 8006d4c:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <DateUpdate+0x19c>)
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	3301      	adds	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <DateUpdate+0x19c>)
 8006d56:	805a      	strh	r2, [r3, #2]
	if(s_DateStructVar.Month == 1 || s_DateStructVar.Month == 3 || \
			s_DateStructVar.Month == 5 || s_DateStructVar.Month == 7 ||\
			s_DateStructVar.Month == 8 || s_DateStructVar.Month == 10 \
			|| s_DateStructVar.Month == 12)
	{
		if(s_DateStructVar.Day < 31)
 8006d58:	e05d      	b.n	8006e16 <DateUpdate+0x16e>
				s_DateStructVar.Day = 1;
				s_DateStructVar.Year++;
			}
		}
	}
	else if(s_DateStructVar.Month == 4 || s_DateStructVar.Month == 6 \
 8006d5a:	4b3a      	ldr	r3, [pc, #232]	; (8006e44 <DateUpdate+0x19c>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00b      	beq.n	8006d7a <DateUpdate+0xd2>
 8006d62:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <DateUpdate+0x19c>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d007      	beq.n	8006d7a <DateUpdate+0xd2>
			|| s_DateStructVar.Month == 9 ||s_DateStructVar.Month == 11)
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <DateUpdate+0x19c>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d003      	beq.n	8006d7a <DateUpdate+0xd2>
 8006d72:	4b34      	ldr	r3, [pc, #208]	; (8006e44 <DateUpdate+0x19c>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b0b      	cmp	r3, #11
 8006d78:	d114      	bne.n	8006da4 <DateUpdate+0xfc>
	{
		if(s_DateStructVar.Day < 30)
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <DateUpdate+0x19c>)
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b1d      	cmp	r3, #29
 8006d80:	d806      	bhi.n	8006d90 <DateUpdate+0xe8>
		{
			s_DateStructVar.Day++;
 8006d82:	4b30      	ldr	r3, [pc, #192]	; (8006e44 <DateUpdate+0x19c>)
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <DateUpdate+0x19c>)
 8006d8c:	705a      	strb	r2, [r3, #1]
		}
	}
	else if(s_DateStructVar.Month == 4 || s_DateStructVar.Month == 6 \
			|| s_DateStructVar.Month == 9 ||s_DateStructVar.Month == 11)
	{
		if(s_DateStructVar.Day < 30)
 8006d8e:	e042      	b.n	8006e16 <DateUpdate+0x16e>
			s_DateStructVar.Day++;
		}
		/* Date structure member: s_DateStructVar.Day = 30 */
		else
		{
			s_DateStructVar.Month++;
 8006d90:	4b2c      	ldr	r3, [pc, #176]	; (8006e44 <DateUpdate+0x19c>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	4b2a      	ldr	r3, [pc, #168]	; (8006e44 <DateUpdate+0x19c>)
 8006d9a:	701a      	strb	r2, [r3, #0]
			s_DateStructVar.Day = 1;
 8006d9c:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <DateUpdate+0x19c>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	705a      	strb	r2, [r3, #1]
		}
	}
	else if(s_DateStructVar.Month == 4 || s_DateStructVar.Month == 6 \
			|| s_DateStructVar.Month == 9 ||s_DateStructVar.Month == 11)
	{
		if(s_DateStructVar.Day < 30)
 8006da2:	e038      	b.n	8006e16 <DateUpdate+0x16e>
		{
			s_DateStructVar.Month++;
			s_DateStructVar.Day = 1;
		}
	}
	else if(s_DateStructVar.Month == 2)
 8006da4:	4b27      	ldr	r3, [pc, #156]	; (8006e44 <DateUpdate+0x19c>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d134      	bne.n	8006e16 <DateUpdate+0x16e>
	{
		if(s_DateStructVar.Day < 28)
 8006dac:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <DateUpdate+0x19c>)
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b1b      	cmp	r3, #27
 8006db2:	d806      	bhi.n	8006dc2 <DateUpdate+0x11a>
		{
			s_DateStructVar.Day++;
 8006db4:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <DateUpdate+0x19c>)
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	3301      	adds	r3, #1
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <DateUpdate+0x19c>)
 8006dbe:	705a      	strb	r2, [r3, #1]
 8006dc0:	e029      	b.n	8006e16 <DateUpdate+0x16e>
		}
		else if(s_DateStructVar.Day == 28)
 8006dc2:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <DateUpdate+0x19c>)
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b1c      	cmp	r3, #28
 8006dc8:	d118      	bne.n	8006dfc <DateUpdate+0x154>
		{
			/* Leap Year Correction */
			if(CheckLeap(s_DateStructVar.Year))
 8006dca:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <DateUpdate+0x19c>)
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f83a 	bl	8006e48 <CheckLeap>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <DateUpdate+0x140>
			{
				s_DateStructVar.Day++;
 8006dda:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <DateUpdate+0x19c>)
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b18      	ldr	r3, [pc, #96]	; (8006e44 <DateUpdate+0x19c>)
 8006de4:	705a      	strb	r2, [r3, #1]
 8006de6:	e016      	b.n	8006e16 <DateUpdate+0x16e>
			}
			else
			{
				s_DateStructVar.Month++;
 8006de8:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <DateUpdate+0x19c>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <DateUpdate+0x19c>)
 8006df2:	701a      	strb	r2, [r3, #0]
				s_DateStructVar.Day = 1;
 8006df4:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <DateUpdate+0x19c>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	705a      	strb	r2, [r3, #1]
 8006dfa:	e00c      	b.n	8006e16 <DateUpdate+0x16e>
			}
		}
		else if(s_DateStructVar.Day == 29)
 8006dfc:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <DateUpdate+0x19c>)
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b1d      	cmp	r3, #29
 8006e02:	d108      	bne.n	8006e16 <DateUpdate+0x16e>
		{
			s_DateStructVar.Month++;
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <DateUpdate+0x19c>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <DateUpdate+0x19c>)
 8006e0e:	701a      	strb	r2, [r3, #0]
			s_DateStructVar.Day = 1;
 8006e10:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <DateUpdate+0x19c>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	705a      	strb	r2, [r3, #1]
		}
	}

	BKP_WriteBackupRegister(BKP_DR2,s_DateStructVar.Month);
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <DateUpdate+0x19c>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	2008      	movs	r0, #8
 8006e20:	f000 fdca 	bl	80079b8 <BKP_WriteBackupRegister>
	BKP_WriteBackupRegister(BKP_DR3,s_DateStructVar.Day);
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <DateUpdate+0x19c>)
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	200c      	movs	r0, #12
 8006e2e:	f000 fdc3 	bl	80079b8 <BKP_WriteBackupRegister>
	BKP_WriteBackupRegister(BKP_DR4,s_DateStructVar.Year);
 8006e32:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <DateUpdate+0x19c>)
 8006e34:	885b      	ldrh	r3, [r3, #2]
 8006e36:	4619      	mov	r1, r3
 8006e38:	2010      	movs	r0, #16
 8006e3a:	f000 fdbd 	bl	80079b8 <BKP_WriteBackupRegister>
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20002718 	.word	0x20002718

08006e48 <CheckLeap>:
 * @param  None
 * @retval : 1: leap year
 *   0: not leap year
 */
uint8_t CheckLeap(uint16_t Year)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
	if((Year%400)==0)
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <CheckLeap+0x60>)
 8006e56:	fba2 1203 	umull	r1, r2, r2, r3
 8006e5a:	09d2      	lsrs	r2, r2, #7
 8006e5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e60:	fb01 f202 	mul.w	r2, r1, r2
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <CheckLeap+0x28>
	{
		return LEAP;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e016      	b.n	8006e9e <CheckLeap+0x56>
	}
	else if((Year%100)==0)
 8006e70:	88fb      	ldrh	r3, [r7, #6]
 8006e72:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <CheckLeap+0x60>)
 8006e74:	fba2 1203 	umull	r1, r2, r2, r3
 8006e78:	0952      	lsrs	r2, r2, #5
 8006e7a:	2164      	movs	r1, #100	; 0x64
 8006e7c:	fb01 f202 	mul.w	r2, r1, r2
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <CheckLeap+0x44>
	{
		return NOT_LEAP;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e008      	b.n	8006e9e <CheckLeap+0x56>
	}
	else if((Year%4)==0)
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <CheckLeap+0x54>
	{
		return LEAP;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <CheckLeap+0x56>
	}
	else
	{
		return NOT_LEAP;
 8006e9c:	2300      	movs	r3, #0
	}
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	51eb851f 	.word	0x51eb851f

08006eac <WeekDay>:
 * @brief Determines the weekday
 * @param Year,Month and Day
 * @retval :Returns the CurrentWeekDay Number 0- Sunday 6- Saturday
 */
uint16_t WeekDay(uint16_t CurrentYear,uint8_t CurrentMonth,uint8_t CurrentDay)
{
 8006eac:	b490      	push	{r4, r7}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	80fb      	strh	r3, [r7, #6]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	717b      	strb	r3, [r7, #5]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	713b      	strb	r3, [r7, #4]
	uint16_t Temp1,Temp2,Temp3,Temp4,CurrentWeekDay;

	if(CurrentMonth < 3)
 8006ebe:	797b      	ldrb	r3, [r7, #5]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d805      	bhi.n	8006ed0 <WeekDay+0x24>
	{
		CurrentMonth=CurrentMonth + 12;
 8006ec4:	797b      	ldrb	r3, [r7, #5]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	717b      	strb	r3, [r7, #5]
		CurrentYear=CurrentYear-1;
 8006eca:	88fb      	ldrh	r3, [r7, #6]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	80fb      	strh	r3, [r7, #6]
	}

	Temp1=(6*(CurrentMonth + 1))/10;
 8006ed0:	797b      	ldrb	r3, [r7, #5]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	4a20      	ldr	r2, [pc, #128]	; (8006f60 <WeekDay+0xb4>)
 8006ede:	fb82 1203 	smull	r1, r2, r2, r3
 8006ee2:	1092      	asrs	r2, r2, #2
 8006ee4:	17db      	asrs	r3, r3, #31
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	82fb      	strh	r3, [r7, #22]
	Temp2=CurrentYear/4;
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	82bb      	strh	r3, [r7, #20]
	Temp3=CurrentYear/100;
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <WeekDay+0xb8>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	827b      	strh	r3, [r7, #18]
	Temp4=CurrentYear/400;
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <WeekDay+0xb8>)
 8006f00:	fba2 2303 	umull	r2, r3, r2, r3
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	823b      	strh	r3, [r7, #16]
	CurrentWeekDay=CurrentDay + (2 * CurrentMonth) + Temp1 \
 8006f08:	793b      	ldrb	r3, [r7, #4]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	797b      	ldrb	r3, [r7, #5]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4413      	add	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	8afb      	ldrh	r3, [r7, #22]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	4413      	add	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	8abb      	ldrh	r3, [r7, #20]
 8006f26:	4413      	add	r3, r2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	8a7b      	ldrh	r3, [r7, #18]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	8a3b      	ldrh	r3, [r7, #16]
 8006f32:	4413      	add	r3, r2
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3301      	adds	r3, #1
 8006f38:	81fb      	strh	r3, [r7, #14]
			+ CurrentYear + Temp2 - Temp3 + Temp4 +1;
	CurrentWeekDay = CurrentWeekDay % 7;
 8006f3a:	89fa      	ldrh	r2, [r7, #14]
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <WeekDay+0xbc>)
 8006f3e:	fba2 3403 	umull	r3, r4, r2, r3
 8006f42:	1b11      	subs	r1, r2, r4
 8006f44:	0849      	lsrs	r1, r1, #1
 8006f46:	190b      	adds	r3, r1, r4
 8006f48:	0899      	lsrs	r1, r3, #2
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	1a5b      	subs	r3, r3, r1
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	81fb      	strh	r3, [r7, #14]

	return(CurrentWeekDay);
 8006f54:	89fb      	ldrh	r3, [r7, #14]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc90      	pop	{r4, r7}
 8006f5e:	4770      	bx	lr
 8006f60:	66666667 	.word	0x66666667
 8006f64:	51eb851f 	.word	0x51eb851f
 8006f68:	24924925 	.word	0x24924925

08006f6c <CheckForDaysElapsed>:
 *   elapsed and updates date that many times
 * @param None
 * @retval :None
 */
void CheckForDaysElapsed(void)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
	uint8_t DaysElapsed;

	if((RTC_GetCounter() / SECONDS_IN_DAY) != 0)
 8006f72:	f001 fe25 	bl	8008bc0 <RTC_GetCounter>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <CheckForDaysElapsed+0x68>)
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d925      	bls.n	8006fca <CheckForDaysElapsed+0x5e>
	{
		for(DaysElapsed = 0; DaysElapsed < (RTC_GetCounter() / SECONDS_IN_DAY) ;DaysElapsed++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	e004      	b.n	8006f8e <CheckForDaysElapsed+0x22>
		{
			DateUpdate();
 8006f84:	f7ff fe90 	bl	8006ca8 <DateUpdate>
{
	uint8_t DaysElapsed;

	if((RTC_GetCounter() / SECONDS_IN_DAY) != 0)
	{
		for(DaysElapsed = 0; DaysElapsed < (RTC_GetCounter() / SECONDS_IN_DAY) ;DaysElapsed++)
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	71fb      	strb	r3, [r7, #7]
 8006f8e:	79fc      	ldrb	r4, [r7, #7]
 8006f90:	f001 fe16 	bl	8008bc0 <RTC_GetCounter>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <CheckForDaysElapsed+0x6c>)
 8006f98:	fba3 1302 	umull	r1, r3, r3, r2
 8006f9c:	1ad2      	subs	r2, r2, r3
 8006f9e:	0852      	lsrs	r2, r2, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	d3ed      	bcc.n	8006f84 <CheckForDaysElapsed+0x18>
		{
			DateUpdate();
		}

		RTC_SetCounter(RTC_GetCounter() % SECONDS_IN_DAY);
 8006fa8:	f001 fe0a 	bl	8008bc0 <RTC_GetCounter>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <CheckForDaysElapsed+0x6c>)
 8006fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb4:	1ad1      	subs	r1, r2, r3
 8006fb6:	0849      	lsrs	r1, r1, #1
 8006fb8:	440b      	add	r3, r1
 8006fba:	0c1b      	lsrs	r3, r3, #16
 8006fbc:	4907      	ldr	r1, [pc, #28]	; (8006fdc <CheckForDaysElapsed+0x70>)
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fe23 	bl	8008c10 <RTC_SetCounter>
	}
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0001517e 	.word	0x0001517e
 8006fd8:	845db0a3 	.word	0x845db0a3
 8006fdc:	0001517f 	.word	0x0001517f

08006fe0 <RTC_NVIC_Configuration>:
 * @brief  Configures RTC Interrupts
 * @param  None
 * @retval : None
 */
void RTC_NVIC_Configuration(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	/* Configure one bit for preemption priority */
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	/* Enable the RTC Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
 8006fea:	2304      	movs	r3, #4
 8006fec:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
 8006fee:	2304      	movs	r3, #4
 8006ff0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fa89 	bl	8007510 <NVIC_Init>
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop

08007008 <RTC_IRQHandler>:
 * @brief  This function handles RTC_IRQHandler .
 * @param  None
 * @retval : None
 */
void RTC_IRQHandler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
	uint8_t Month,Day;
	uint16_t Year;

	Month = BKP_ReadBackupRegister(BKP_DR2);
 800700e:	2008      	movs	r0, #8
 8007010:	f000 fcee 	bl	80079f0 <BKP_ReadBackupRegister>
 8007014:	4603      	mov	r3, r0
 8007016:	71fb      	strb	r3, [r7, #7]
	Day = BKP_ReadBackupRegister(BKP_DR3);
 8007018:	200c      	movs	r0, #12
 800701a:	f000 fce9 	bl	80079f0 <BKP_ReadBackupRegister>
 800701e:	4603      	mov	r3, r0
 8007020:	71bb      	strb	r3, [r7, #6]
	Year = BKP_ReadBackupRegister(BKP_DR4);
 8007022:	2010      	movs	r0, #16
 8007024:	f000 fce4 	bl	80079f0 <BKP_ReadBackupRegister>
 8007028:	4603      	mov	r3, r0
 800702a:	80bb      	strh	r3, [r7, #4]
	if(RTC_GetITStatus(RTC_IT_SEC) !=RESET )
 800702c:	2001      	movs	r0, #1
 800702e:	f001 fe31 	bl	8008c94 <RTC_GetITStatus>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <RTC_IRQHandler+0x3c>
	{
		NVIC_ClearPendingIRQ(RTC_IRQn);
 8007038:	2003      	movs	r0, #3
 800703a:	f7ff fc0d 	bl	8006858 <NVIC_ClearPendingIRQ>
		RTC_ClearITPendingBit(RTC_IT_SEC);
 800703e:	2001      	movs	r0, #1
 8007040:	f001 fe50 	bl	8008ce4 <RTC_ClearITPendingBit>
	}

	/* If counter is equal to 86399: one day was elapsed */
	/* This takes care of date change and resetting of counter in case of
  power on - Run mode/ Main supply switched on condition*/
	if(RTC_GetCounter() == 86399)
 8007044:	f001 fdbc 	bl	8008bc0 <RTC_GetCounter>
 8007048:	4602      	mov	r2, r0
 800704a:	4b59      	ldr	r3, [pc, #356]	; (80071b0 <RTC_IRQHandler+0x1a8>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d108      	bne.n	8007062 <RTC_IRQHandler+0x5a>
	{
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 8007050:	f001 fe10 	bl	8008c74 <RTC_WaitForLastTask>
		/* Reset counter value */
		RTC_SetCounter(0x0);
 8007054:	2000      	movs	r0, #0
 8007056:	f001 fddb 	bl	8008c10 <RTC_SetCounter>
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 800705a:	f001 fe0b 	bl	8008c74 <RTC_WaitForLastTask>

		/* Increment the date */
		DateUpdate();
 800705e:	f7ff fe23 	bl	8006ca8 <DateUpdate>
	}

	if((RTC_GetCounter()/3600 == 1)&&(((RTC_GetCounter()%3600)/60) == 59)&&
 8007062:	f001 fdad 	bl	8008bc0 <RTC_GetCounter>
 8007066:	4603      	mov	r3, r0
 8007068:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800706c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007070:	f080 8099 	bcs.w	80071a6 <RTC_IRQHandler+0x19e>
 8007074:	f001 fda4 	bl	8008bc0 <RTC_GetCounter>
 8007078:	4602      	mov	r2, r0
 800707a:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <RTC_IRQHandler+0x1ac>)
 800707c:	fba3 1302 	umull	r1, r3, r3, r2
 8007080:	0adb      	lsrs	r3, r3, #11
 8007082:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f6a3 53d4 	subw	r3, r3, #3540	; 0xdd4
 8007090:	2b3b      	cmp	r3, #59	; 0x3b
 8007092:	f200 8088 	bhi.w	80071a6 <RTC_IRQHandler+0x19e>
			(((RTC_GetCounter()%3600)%60) == 59))
 8007096:	f001 fd93 	bl	8008bc0 <RTC_GetCounter>
 800709a:	4603      	mov	r3, r0
 800709c:	4a45      	ldr	r2, [pc, #276]	; (80071b4 <RTC_IRQHandler+0x1ac>)
 800709e:	fba2 1203 	umull	r1, r2, r2, r3
 80070a2:	0ad2      	lsrs	r2, r2, #11
 80070a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80070a8:	fb01 f202 	mul.w	r2, r1, r2
 80070ac:	1a9a      	subs	r2, r3, r2
 80070ae:	4b42      	ldr	r3, [pc, #264]	; (80071b8 <RTC_IRQHandler+0x1b0>)
 80070b0:	fba3 1302 	umull	r1, r3, r3, r2
 80070b4:	0959      	lsrs	r1, r3, #5
 80070b6:	460b      	mov	r3, r1
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	1a5b      	subs	r3, r3, r1
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	1ad1      	subs	r1, r2, r3

		/* Increment the date */
		DateUpdate();
	}

	if((RTC_GetCounter()/3600 == 1)&&(((RTC_GetCounter()%3600)/60) == 59)&&
 80070c0:	293b      	cmp	r1, #59	; 0x3b
 80070c2:	d170      	bne.n	80071a6 <RTC_IRQHandler+0x19e>
			(((RTC_GetCounter()%3600)%60) == 59))
	{
		/* March Correction */
		if((Month == 3) && (Day >24))
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d133      	bne.n	8007132 <RTC_IRQHandler+0x12a>
 80070ca:	79bb      	ldrb	r3, [r7, #6]
 80070cc:	2b18      	cmp	r3, #24
 80070ce:	d930      	bls.n	8007132 <RTC_IRQHandler+0x12a>
		{
			if(WeekDay(Year,Month,Day)==0)
 80070d0:	79ba      	ldrb	r2, [r7, #6]
 80070d2:	79f9      	ldrb	r1, [r7, #7]
 80070d4:	88bb      	ldrh	r3, [r7, #4]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fee8 	bl	8006eac <WeekDay>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d127      	bne.n	8007132 <RTC_IRQHandler+0x12a>
			{
				if((SummerTimeCorrect & 0x8000) == 0x8000)
 80070e2:	4b36      	ldr	r3, [pc, #216]	; (80071bc <RTC_IRQHandler+0x1b4>)
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b21b      	sxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	da22      	bge.n	8007132 <RTC_IRQHandler+0x12a>
				{
					RTC_SetCounter(RTC_GetCounter() + 3601);
 80070ec:	f001 fd68 	bl	8008bc0 <RTC_GetCounter>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f603 6311 	addw	r3, r3, #3601	; 0xe11
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fd8a 	bl	8008c10 <RTC_SetCounter>

					/* Reset March correction flag */
					SummerTimeCorrect &= 0x7FFF;
 80070fc:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <RTC_IRQHandler+0x1b4>)
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007104:	b29a      	uxth	r2, r3
 8007106:	4b2d      	ldr	r3, [pc, #180]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007108:	801a      	strh	r2, [r3, #0]

					/* Set October correction flag  */
					SummerTimeCorrect |= 0x4000;
 800710a:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007112:	b29a      	uxth	r2, r3
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007116:	801a      	strh	r2, [r3, #0]
					SummerTimeCorrect |= Year;
 8007118:	4b28      	ldr	r3, [pc, #160]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800711a:	881a      	ldrh	r2, [r3, #0]
 800711c:	88bb      	ldrh	r3, [r7, #4]
 800711e:	4313      	orrs	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007124:	801a      	strh	r2, [r3, #0]
					BKP_WriteBackupRegister(BKP_DR7,SummerTimeCorrect);
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	201c      	movs	r0, #28
 800712e:	f000 fc43 	bl	80079b8 <BKP_WriteBackupRegister>
				}
			}
		}
		/* October Correction */
		if((Month == 10) && (Day >24))
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	2b0a      	cmp	r3, #10
 8007136:	d136      	bne.n	80071a6 <RTC_IRQHandler+0x19e>
 8007138:	79bb      	ldrb	r3, [r7, #6]
 800713a:	2b18      	cmp	r3, #24
 800713c:	d933      	bls.n	80071a6 <RTC_IRQHandler+0x19e>
		{
			if(WeekDay(Year,Month,Day)==0)
 800713e:	79ba      	ldrb	r2, [r7, #6]
 8007140:	79f9      	ldrb	r1, [r7, #7]
 8007142:	88bb      	ldrh	r3, [r7, #4]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff feb1 	bl	8006eac <WeekDay>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d12a      	bne.n	80071a6 <RTC_IRQHandler+0x19e>
			{
				if((SummerTimeCorrect & 0x4000) == 0x4000)
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d024      	beq.n	80071a6 <RTC_IRQHandler+0x19e>
				{
					RTC_SetCounter(RTC_GetCounter() - 3599);
 800715c:	f001 fd30 	bl	8008bc0 <RTC_GetCounter>
 8007160:	4603      	mov	r3, r0
 8007162:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fd52 	bl	8008c10 <RTC_SetCounter>

					/* Reset October correction flag */
					SummerTimeCorrect &= 0xBFFF;
 800716c:	4b13      	ldr	r3, [pc, #76]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007174:	b29a      	uxth	r2, r3
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007178:	801a      	strh	r2, [r3, #0]

					/* Set March correction flag  */
					SummerTimeCorrect |= 0x8000;
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800718a:	801a      	strh	r2, [r3, #0]
					SummerTimeCorrect |= Year;
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	88bb      	ldrh	r3, [r7, #4]
 8007192:	4313      	orrs	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <RTC_IRQHandler+0x1b4>)
 8007198:	801a      	strh	r2, [r3, #0]
					BKP_WriteBackupRegister(BKP_DR7,SummerTimeCorrect);
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <RTC_IRQHandler+0x1b4>)
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	201c      	movs	r0, #28
 80071a2:	f000 fc09 	bl	80079b8 <BKP_WriteBackupRegister>
				}
			}
		}
	}
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	0001517f 	.word	0x0001517f
 80071b4:	91a2b3c5 	.word	0x91a2b3c5
 80071b8:	88888889 	.word	0x88888889
 80071bc:	20002722 	.word	0x20002722

080071c0 <ADCT_BGS_Sensor_Input_Init>:
 *      Author: Administrator
 */
#include "ADCT_Sensor.h"

void ADCT_BGS_Sensor_Input_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	/* GPIO Periph clock enable */
	RCC_APB2PeriphClockCmd(ADCT_BGS_INPUT_CLK|ADCT_BGS_AC_GEN_INPUT_CLK, ENABLE);
 80071c6:	2101      	movs	r1, #1
 80071c8:	2018      	movs	r0, #24
 80071ca:	f001 fc2d 	bl	8008a28 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_INT_SMOKE|ADCT_BGS_INT_DOOR|ADCT_BGS_INT_BURGLAR|ADCT_BGS_INT_FIRE|ADCT_BGS_INT_WATER;
 80071ce:	231f      	movs	r3, #31
 80071d0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80071d2:	2303      	movs	r3, #3
 80071d4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80071d6:	2348      	movs	r3, #72	; 0x48
 80071d8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_INPUT_PORT, &GPIO_InitStructure);
 80071da:	1d3b      	adds	r3, r7, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4809      	ldr	r0, [pc, #36]	; (8007204 <ADCT_BGS_Sensor_Input_Init+0x44>)
 80071e0:	f000 fe7e 	bl	8007ee0 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = ADCT_BGS_INPUT_AC|ADCT_BGS_INPUT_GEN;
 80071e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80071e8:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80071ea:	2303      	movs	r3, #3
 80071ec:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80071ee:	2348      	movs	r3, #72	; 0x48
 80071f0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADCT_BGS_AC_GEN_INPUT_PORT, &GPIO_InitStructure);
 80071f2:	1d3b      	adds	r3, r7, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4804      	ldr	r0, [pc, #16]	; (8007208 <ADCT_BGS_Sensor_Input_Init+0x48>)
 80071f8:	f000 fe72 	bl	8007ee0 <GPIO_Init>
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40011000 	.word	0x40011000
 8007208:	40010c00 	.word	0x40010c00

0800720c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8007218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da0b      	bge.n	8007238 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007220:	490d      	ldr	r1, [pc, #52]	; (8007258 <NVIC_SetPriority+0x4c>)
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	3b04      	subs	r3, #4
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	0112      	lsls	r2, r2, #4
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	440b      	add	r3, r1
 8007234:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8007236:	e009      	b.n	800724c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007238:	4908      	ldr	r1, [pc, #32]	; (800725c <NVIC_SetPriority+0x50>)
 800723a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	0112      	lsls	r2, r2, #4
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	440b      	add	r3, r1
 8007248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	e000ed00 	.word	0xe000ed00
 800725c:	e000e100 	.word	0xe000e100

08007260 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800726e:	d301      	bcc.n	8007274 <SysTick_Config+0x14>
 8007270:	2301      	movs	r3, #1
 8007272:	e011      	b.n	8007298 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8007274:	4a0a      	ldr	r2, [pc, #40]	; (80072a0 <SysTick_Config+0x40>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800727c:	3b01      	subs	r3, #1
 800727e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8007280:	210f      	movs	r1, #15
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	f7ff ffc1 	bl	800720c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <SysTick_Config+0x40>)
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007290:	4b03      	ldr	r3, [pc, #12]	; (80072a0 <SysTick_Config+0x40>)
 8007292:	2207      	movs	r2, #7
 8007294:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	e000e010 	.word	0xe000e010

080072a4 <ADCT_BGS_Systick_Init>:
/* Functions for delay */
__IO uint32_t TM_Time2 = 0;
__IO uint32_t TM_Time = 0;
/* initialization system tick 1ms */
void ADCT_BGS_Systick_Init(void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / 1000))
 80072a8:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <ADCT_BGS_Systick_Init+0x24>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a07      	ldr	r2, [pc, #28]	; (80072cc <ADCT_BGS_Systick_Init+0x28>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	099b      	lsrs	r3, r3, #6
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ffd3 	bl	8007260 <SysTick_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d000      	beq.n	80072c2 <ADCT_BGS_Systick_Init+0x1e>
	{
		/* Capture error */
		while (1)
		{
		}
 80072c0:	e7fe      	b.n	80072c0 <ADCT_BGS_Systick_Init+0x1c>
	}
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000198 	.word	0x20000198
 80072cc:	10624dd3 	.word	0x10624dd3

080072d0 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;

    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 80072d6:	4a14      	ldr	r2, [pc, #80]	; (8007328 <TM_DELAY_Init+0x58>)
 80072d8:	4b13      	ldr	r3, [pc, #76]	; (8007328 <TM_DELAY_Init+0x58>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e0:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 80072e2:	4a11      	ldr	r2, [pc, #68]	; (8007328 <TM_DELAY_Init+0x58>)
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <TM_DELAY_Init+0x58>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ec:	60d3      	str	r3, [r2, #12]

    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 80072ee:	4a0f      	ldr	r2, [pc, #60]	; (800732c <TM_DELAY_Init+0x5c>)
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <TM_DELAY_Init+0x5c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 80072fa:	4a0c      	ldr	r2, [pc, #48]	; (800732c <TM_DELAY_Init+0x5c>)
 80072fc:	4b0b      	ldr	r3, [pc, #44]	; (800732c <TM_DELAY_Init+0x5c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	6013      	str	r3, [r2, #0]

    /* Reset counter */
    DWT->CYCCNT = 0;
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <TM_DELAY_Init+0x5c>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]

	/* Check if DWT has started */
	c = DWT->CYCCNT;
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <TM_DELAY_Init+0x5c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	607b      	str	r3, [r7, #4]

	/* 2 dummys */
	__ASM volatile ("NOP");
 8007312:	bf00      	nop
	__ASM volatile ("NOP");
 8007314:	bf00      	nop

	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <TM_DELAY_Init+0x5c>)
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	e000edf0 	.word	0xe000edf0
 800732c:	e0001000 	.word	0xe0001000

08007330 <TM_DELAY_TimerCreate>:

TM_DELAY_Timer_t* TM_DELAY_TimerCreate(uint32_t ReloadValue, uint8_t AutoReloadCmd, uint8_t StartTimer, void (*TM_DELAY_CustomTimerCallback)(struct _TM_DELAY_Timer_t*, void *), void* UserParameters) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	72fb      	strb	r3, [r7, #11]
 800733e:	4613      	mov	r3, r2
 8007340:	72bb      	strb	r3, [r7, #10]
	TM_DELAY_Timer_t* tmp;

	/* Check if available */
	if (CustomTimers.Count >= DELAY_MAX_CUSTOM_TIMERS) {
 8007342:	4b1f      	ldr	r3, [pc, #124]	; (80073c0 <TM_DELAY_TimerCreate+0x90>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b04      	cmp	r3, #4
 8007348:	d901      	bls.n	800734e <TM_DELAY_TimerCreate+0x1e>
		return NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	e034      	b.n	80073b8 <TM_DELAY_TimerCreate+0x88>
	}

	/* Try to allocate memory for timer structure */
	tmp = (TM_DELAY_Timer_t *) LIB_ALLOC_FUNC(sizeof(TM_DELAY_Timer_t));
 800734e:	2014      	movs	r0, #20
 8007350:	f002 fb7c 	bl	8009a4c <malloc>
 8007354:	4603      	mov	r3, r0
 8007356:	617b      	str	r3, [r7, #20]

	/* Check if allocated */
	if (tmp == NULL) {
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <TM_DELAY_TimerCreate+0x32>
		return NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	e02a      	b.n	80073b8 <TM_DELAY_TimerCreate+0x88>
	}

	/* Fill settings */
	tmp->ARR = ReloadValue;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	605a      	str	r2, [r3, #4]
	tmp->CNT = tmp->ARR;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	609a      	str	r2, [r3, #8]
	tmp->Flags.F.AREN = AutoReloadCmd;
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	b2d9      	uxtb	r1, r3
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	7813      	ldrb	r3, [r2, #0]
 800737c:	f361 0300 	bfi	r3, r1, #0, #1
 8007380:	7013      	strb	r3, [r2, #0]
	tmp->Flags.F.CNTEN = StartTimer;
 8007382:	7abb      	ldrb	r3, [r7, #10]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	7813      	ldrb	r3, [r2, #0]
 800738e:	f361 0341 	bfi	r3, r1, #1, #1
 8007392:	7013      	strb	r3, [r2, #0]
	tmp->Callback = TM_DELAY_CustomTimerCallback;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
	tmp->UserParameters = UserParameters;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a3a      	ldr	r2, [r7, #32]
 800739e:	611a      	str	r2, [r3, #16]

	/* Increase number of timers in memory */
	CustomTimers.Timers[CustomTimers.Count++] = tmp;
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <TM_DELAY_TimerCreate+0x90>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	b2d1      	uxtb	r1, r2
 80073a8:	4a05      	ldr	r2, [pc, #20]	; (80073c0 <TM_DELAY_TimerCreate+0x90>)
 80073aa:	7011      	strb	r1, [r2, #0]
 80073ac:	4a04      	ldr	r2, [pc, #16]	; (80073c0 <TM_DELAY_TimerCreate+0x90>)
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	605a      	str	r2, [r3, #4]

	/* Return pointer to user */
	return tmp;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2000245c 	.word	0x2000245c

080073c4 <TimerGetUS>:
//	/* NOTE: This function Should not be modified, when the callback is needed,
//           the TM_DELAY_1msHandler could be implemented in the user file
//	*/
//}
uint32_t TimerGetUS(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
	return ( DWT->CYCCNT/72);
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <TimerGetUS+0x18>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <TimerGetUS+0x1c>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	091b      	lsrs	r3, r3, #4
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr
 80073dc:	e0001000 	.word	0xe0001000
 80073e0:	38e38e39 	.word	0x38e38e39

080073e4 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Increase system time */
	TM_Time++;
 80073ea:	4b3d      	ldr	r3, [pc, #244]	; (80074e0 <HAL_IncTick+0xfc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	4a3b      	ldr	r2, [pc, #236]	; (80074e0 <HAL_IncTick+0xfc>)
 80073f2:	6013      	str	r3, [r2, #0]

	/* Decrease other system time */
	if (TM_Time2) {
 80073f4:	4b3b      	ldr	r3, [pc, #236]	; (80074e4 <HAL_IncTick+0x100>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <HAL_IncTick+0x22>
		TM_Time2--;
 80073fc:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <HAL_IncTick+0x100>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3b01      	subs	r3, #1
 8007402:	4a38      	ldr	r2, [pc, #224]	; (80074e4 <HAL_IncTick+0x100>)
 8007404:	6013      	str	r3, [r2, #0]
	}

	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8007406:	2300      	movs	r3, #0
 8007408:	71fb      	strb	r3, [r7, #7]
 800740a:	e05f      	b.n	80074cc <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	4a36      	ldr	r2, [pc, #216]	; (80074e8 <HAL_IncTick+0x104>)
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	685b      	ldr	r3, [r3, #4]

	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8007416:	2b00      	cmp	r3, #0
 8007418:	d055      	beq.n	80074c6 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4a32      	ldr	r2, [pc, #200]	; (80074e8 <HAL_IncTick+0x104>)
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	685b      	ldr	r3, [r3, #4]
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d04a      	beq.n	80074c6 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <HAL_IncTick+0x104>)
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <HAL_IncTick+0x104>)
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	3a01      	subs	r2, #1
 800744e:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	4a25      	ldr	r2, [pc, #148]	; (80074e8 <HAL_IncTick+0x104>)
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d132      	bne.n	80074c6 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	4a21      	ldr	r2, [pc, #132]	; (80074e8 <HAL_IncTick+0x104>)
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	491e      	ldr	r1, [pc, #120]	; (80074e8 <HAL_IncTick+0x104>)
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	6858      	ldr	r0, [r3, #4]
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	491b      	ldr	r1, [pc, #108]	; (80074e8 <HAL_IncTick+0x104>)
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	4619      	mov	r1, r3
 8007484:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <HAL_IncTick+0x104>)
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	4915      	ldr	r1, [pc, #84]	; (80074e8 <HAL_IncTick+0x104>)
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	6093      	str	r3, [r2, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <HAL_IncTick+0x104>)
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	4a0c      	ldr	r2, [pc, #48]	; (80074e8 <HAL_IncTick+0x104>)
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	7813      	ldrb	r3, [r2, #0]
 80074c0:	f36f 0341 	bfc	r3, #1, #1
 80074c4:	7013      	strb	r3, [r2, #0]
		TM_Time2--;
	}

	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	3301      	adds	r3, #1
 80074ca:	71fb      	strb	r3, [r7, #7]
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_IncTick+0x104>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	79fa      	ldrb	r2, [r7, #7]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d39a      	bcc.n	800740c <HAL_IncTick+0x28>
		}
	}

	/* Call 1ms interrupt handler function */
	//TM_DELAY_1msHandler();
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20002458 	.word	0x20002458
 80074e4:	20002454 	.word	0x20002454
 80074e8:	2000245c 	.word	0x2000245c

080074ec <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80074f4:	4a05      	ldr	r2, [pc, #20]	; (800750c <NVIC_PriorityGroupConfig+0x20>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007500:	60d3      	str	r3, [r2, #12]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	230f      	movs	r3, #15
 8007522:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78db      	ldrb	r3, [r3, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03a      	beq.n	80075a2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <NVIC_Init+0xbc>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	43db      	mvns	r3, r3
 8007532:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007536:	0a1b      	lsrs	r3, r3, #8
 8007538:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f1c3 0304 	rsb	r3, r3, #4
 8007540:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	fa22 f303 	lsr.w	r3, r2, r3
 800754a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	461a      	mov	r2, r3
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	461a      	mov	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4013      	ands	r3, r2
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8007570:	4a17      	ldr	r2, [pc, #92]	; (80075d0 <NVIC_Init+0xc0>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	b2c9      	uxtb	r1, r1
 800757a:	4413      	add	r3, r2
 800757c:	460a      	mov	r2, r1
 800757e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007582:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <NVIC_Init+0xc0>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	b2db      	uxtb	r3, r3
 800758c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2101      	movs	r1, #1
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800759c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80075a0:	e00f      	b.n	80075c2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80075a2:	490b      	ldr	r1, [pc, #44]	; (80075d0 <NVIC_Init+0xc0>)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2201      	movs	r2, #1
 80075b8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80075ba:	f100 0320 	add.w	r3, r0, #32
 80075be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	e000ed00 	.word	0xe000ed00
 80075d0:	e000e100 	.word	0xe000e100

080075d4 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80075f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	791b      	ldrb	r3, [r3, #4]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	4313      	orrs	r3, r2
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4b16      	ldr	r3, [pc, #88]	; (8007674 <ADC_Init+0xa0>)
 800761a:	4013      	ands	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	795b      	ldrb	r3, [r3, #5]
 800762c:	005b      	lsls	r3, r3, #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800762e:	4313      	orrs	r3, r2
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007648:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	7c1b      	ldrb	r3, [r3, #16]
 800764e:	3b01      	subs	r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	4313      	orrs	r3, r2
 8007656:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	051b      	lsls	r3, r3, #20
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	fff1f7fd 	.word	0xfff1f7fd

08007678 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d006      	beq.n	8007698 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f043 0201 	orr.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8007696:	e005      	b.n	80076a4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= CR2_ADON_Set;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f023 0201 	bic.w	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	609a      	str	r2, [r3, #8]
  }
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop

080076b0 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f043 0208 	orr.w	r2, r3, #8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e001      	b.n	80076f2 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop

08007700 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f043 0204 	orr.w	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	609a      	str	r2, [r3, #8]
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop

08007720 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	e001      	b.n	8007742 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 800776e:	e005      	b.n	800777c <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	609a      	str	r2, [r3, #8]
  }
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	4608      	mov	r0, r1
 8007792:	4611      	mov	r1, r2
 8007794:	461a      	mov	r2, r3
 8007796:	4603      	mov	r3, r0
 8007798:	70fb      	strb	r3, [r7, #3]
 800779a:	460b      	mov	r3, r1
 800779c:	70bb      	strb	r3, [r7, #2]
 800779e:	4613      	mov	r3, r2
 80077a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d923      	bls.n	80077f8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	f1a3 020a 	sub.w	r2, r3, #10
 80077bc:	4613      	mov	r3, r2
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	4413      	add	r3, r2
 80077c2:	2207      	movs	r2, #7
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	43db      	mvns	r3, r3
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80077d4:	7879      	ldrb	r1, [r7, #1]
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	f1a3 020a 	sub.w	r2, r3, #10
 80077dc:	4613      	mov	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4413      	add	r3, r2
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e01e      	b.n	8007836 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	4613      	mov	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	2207      	movs	r2, #7
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	43db      	mvns	r3, r3
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4013      	ands	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8007818:	7879      	ldrb	r1, [r7, #1]
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	4613      	mov	r3, r2
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	4413      	add	r3, r2
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8007836:	78bb      	ldrb	r3, [r7, #2]
 8007838:	2b06      	cmp	r3, #6
 800783a:	d821      	bhi.n	8007880 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8007842:	78bb      	ldrb	r3, [r7, #2]
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	221f      	movs	r2, #31
 800784e:	fa02 f303 	lsl.w	r3, r2, r3
 8007852:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	43db      	mvns	r3, r3
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4013      	ands	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800785e:	78f9      	ldrb	r1, [r7, #3]
 8007860:	78bb      	ldrb	r3, [r7, #2]
 8007862:	1e5a      	subs	r2, r3, #1
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	fa01 f303 	lsl.w	r3, r1, r3
 800786e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800787e:	e047      	b.n	8007910 <ADC_RegularChannelConfig+0x188>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8007880:	78bb      	ldrb	r3, [r7, #2]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d821      	bhi.n	80078ca <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800788c:	78bb      	ldrb	r3, [r7, #2]
 800788e:	1fda      	subs	r2, r3, #7
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	221f      	movs	r2, #31
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80078a8:	78f9      	ldrb	r1, [r7, #3]
 80078aa:	78bb      	ldrb	r3, [r7, #2]
 80078ac:	1fda      	subs	r2, r3, #7
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80078c8:	e022      	b.n	8007910 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80078d0:	78bb      	ldrb	r3, [r7, #2]
 80078d2:	f1a3 020d 	sub.w	r2, r3, #13
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	221f      	movs	r2, #31
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4013      	ands	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80078ee:	78f9      	ldrb	r1, [r7, #3]
 80078f0:	78bb      	ldrb	r3, [r7, #2]
 80078f2:	f1a3 020d 	sub.w	r2, r3, #13
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop

0800791c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	b29b      	uxth	r3, r3
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8007944:	4a08      	ldr	r2, [pc, #32]	; (8007968 <ADC_TempSensorVrefintCmd+0x34>)
 8007946:	4b08      	ldr	r3, [pc, #32]	; (8007968 <ADC_TempSensorVrefintCmd+0x34>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800794e:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
 8007950:	e005      	b.n	800795e <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 |= CR2_TSVREFE_Set;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8007952:	4a05      	ldr	r2, [pc, #20]	; (8007968 <ADC_TempSensorVrefintCmd+0x34>)
 8007954:	4b04      	ldr	r3, [pc, #16]	; (8007968 <ADC_TempSensorVrefintCmd+0x34>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800795c:	6093      	str	r3, [r2, #8]
  }
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	40012400 	.word	0x40012400

0800796c <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  RCC_BackupResetCmd(ENABLE);
 8007970:	2001      	movs	r0, #1
 8007972:	f001 f895 	bl	8008aa0 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
 8007976:	2000      	movs	r0, #0
 8007978:	f001 f892 	bl	8008aa0 <RCC_BackupResetCmd>
}
 800797c:	bf00      	nop
 800797e:	bd80      	pop	{r7, pc}

08007980 <BKP_RTCOutputConfig>:
  *     @arg BKP_RTCOutputSource_Second: output the RTC Second pulse signal on
  *                                      the Tamper pin.  
  * @retval None
  */
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpreg = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
  tmpreg = BKP->RTCCR;
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <BKP_RTCOutputConfig+0x34>)
 8007990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007992:	81fb      	strh	r3, [r7, #14]
  /* Clear CCO, ASOE and ASOS bits */
  tmpreg &= RTCCR_MASK;
 8007994:	89fb      	ldrh	r3, [r7, #14]
 8007996:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800799a:	81fb      	strh	r3, [r7, #14]
  
  /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
  tmpreg |= BKP_RTCOutputSource;
 800799c:	89fa      	ldrh	r2, [r7, #14]
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	81fb      	strh	r3, [r7, #14]
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 80079a4:	4a03      	ldr	r2, [pc, #12]	; (80079b4 <BKP_RTCOutputConfig+0x34>)
 80079a6:	89fb      	ldrh	r3, [r7, #14]
 80079a8:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	40006c00 	.word	0x40006c00

080079b8 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	460a      	mov	r2, r1
 80079c2:	80fb      	strh	r3, [r7, #6]
 80079c4:	4613      	mov	r3, r2
 80079c6:	80bb      	strh	r3, [r7, #4]
  __IO uint32_t tmp = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <BKP_WriteBackupRegister+0x34>)
 80079ce:	60fb      	str	r3, [r7, #12]
  tmp += BKP_DR;
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]

  *(__IO uint32_t *) tmp = Data;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	461a      	mov	r2, r3
 80079dc:	88bb      	ldrh	r3, [r7, #4]
 80079de:	6013      	str	r3, [r2, #0]
}
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40006c00 	.word	0x40006c00

080079f0 <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmp = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80079fe:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <BKP_ReadBackupRegister+0x2c>)
 8007a00:	60fb      	str	r3, [r7, #12]
  tmp += BKP_DR;
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint16_t *) tmp);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40006c00 	.word	0x40006c00

08007a20 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a43      	ldr	r2, [pc, #268]	; (8007b60 <DMA_DeInit+0x140>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d106      	bne.n	8007a64 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8007a56:	4a43      	ldr	r2, [pc, #268]	; (8007b64 <DMA_DeInit+0x144>)
 8007a58:	4b42      	ldr	r3, [pc, #264]	; (8007b64 <DMA_DeInit+0x144>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f043 030f 	orr.w	r3, r3, #15
 8007a60:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007a62:	e077      	b.n	8007b54 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a40      	ldr	r2, [pc, #256]	; (8007b68 <DMA_DeInit+0x148>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d106      	bne.n	8007a7a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8007a6c:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <DMA_DeInit+0x144>)
 8007a6e:	4b3d      	ldr	r3, [pc, #244]	; (8007b64 <DMA_DeInit+0x144>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8007a76:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007a78:	e06c      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a3b      	ldr	r2, [pc, #236]	; (8007b6c <DMA_DeInit+0x14c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d106      	bne.n	8007a90 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8007a82:	4a38      	ldr	r2, [pc, #224]	; (8007b64 <DMA_DeInit+0x144>)
 8007a84:	4b37      	ldr	r3, [pc, #220]	; (8007b64 <DMA_DeInit+0x144>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8007a8c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007a8e:	e061      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <DMA_DeInit+0x150>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d106      	bne.n	8007aa6 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8007a98:	4a32      	ldr	r2, [pc, #200]	; (8007b64 <DMA_DeInit+0x144>)
 8007a9a:	4b32      	ldr	r3, [pc, #200]	; (8007b64 <DMA_DeInit+0x144>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8007aa2:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007aa4:	e056      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a32      	ldr	r2, [pc, #200]	; (8007b74 <DMA_DeInit+0x154>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d106      	bne.n	8007abc <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8007aae:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <DMA_DeInit+0x144>)
 8007ab0:	4b2c      	ldr	r3, [pc, #176]	; (8007b64 <DMA_DeInit+0x144>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8007ab8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007aba:	e04b      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a2e      	ldr	r2, [pc, #184]	; (8007b78 <DMA_DeInit+0x158>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d106      	bne.n	8007ad2 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8007ac4:	4a27      	ldr	r2, [pc, #156]	; (8007b64 <DMA_DeInit+0x144>)
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <DMA_DeInit+0x144>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ace:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007ad0:	e040      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <DMA_DeInit+0x15c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d106      	bne.n	8007ae8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8007ada:	4a22      	ldr	r2, [pc, #136]	; (8007b64 <DMA_DeInit+0x144>)
 8007adc:	4b21      	ldr	r3, [pc, #132]	; (8007b64 <DMA_DeInit+0x144>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8007ae4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007ae6:	e035      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <DMA_DeInit+0x160>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d106      	bne.n	8007afe <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8007af0:	4a24      	ldr	r2, [pc, #144]	; (8007b84 <DMA_DeInit+0x164>)
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <DMA_DeInit+0x164>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f043 030f 	orr.w	r3, r3, #15
 8007afa:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007afc:	e02a      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a21      	ldr	r2, [pc, #132]	; (8007b88 <DMA_DeInit+0x168>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d106      	bne.n	8007b14 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8007b06:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <DMA_DeInit+0x164>)
 8007b08:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <DMA_DeInit+0x164>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8007b10:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007b12:	e01f      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <DMA_DeInit+0x16c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d106      	bne.n	8007b2a <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <DMA_DeInit+0x164>)
 8007b1e:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <DMA_DeInit+0x164>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8007b26:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007b28:	e014      	b.n	8007b54 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <DMA_DeInit+0x170>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d106      	bne.n	8007b40 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8007b32:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <DMA_DeInit+0x164>)
 8007b34:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <DMA_DeInit+0x164>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8007b3c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8007b3e:	e009      	b.n	8007b54 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a14      	ldr	r2, [pc, #80]	; (8007b94 <DMA_DeInit+0x174>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d105      	bne.n	8007b54 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8007b48:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <DMA_DeInit+0x164>)
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <DMA_DeInit+0x164>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8007b52:	6053      	str	r3, [r2, #4]
    }
  }
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40020008 	.word	0x40020008
 8007b64:	40020000 	.word	0x40020000
 8007b68:	4002001c 	.word	0x4002001c
 8007b6c:	40020030 	.word	0x40020030
 8007b70:	40020044 	.word	0x40020044
 8007b74:	40020058 	.word	0x40020058
 8007b78:	4002006c 	.word	0x4002006c
 8007b7c:	40020080 	.word	0x40020080
 8007b80:	40020408 	.word	0x40020408
 8007b84:	40020400 	.word	0x40020400
 8007b88:	4002041c 	.word	0x4002041c
 8007b8c:	40020430 	.word	0x40020430
 8007b90:	40020444 	.word	0x40020444
 8007b94:	40020458 	.word	0x40020458

08007b98 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007bc6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007bd2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007bde:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr

08007c14 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d006      	beq.n	8007c34 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f043 0201 	orr.w	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8007c32:	e006      	b.n	8007c42 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6013      	str	r3, [r2, #0]
  }
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d006      	beq.n	8007c6e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8007c6c:	e006      	b.n	8007c7c <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	43db      	mvns	r3, r3
 8007c76:	401a      	ands	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	601a      	str	r2, [r3, #0]
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop

08007c88 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <DMA_GetFlagStatus+0x48>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	e002      	b.n	8007cb0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <DMA_GetFlagStatus+0x4c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	e001      	b.n	8007cc4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr
 8007cd0:	40020400 	.word	0x40020400
 8007cd4:	40020000 	.word	0x40020000

08007cd8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8007cea:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <DMA_ClearFlag+0x2c>)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8007cf0:	e002      	b.n	8007cf8 <DMA_ClearFlag+0x20>
    DMA2->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8007cf2:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <DMA_ClearFlag+0x30>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6053      	str	r3, [r2, #4]
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40020400 	.word	0x40020400
 8007d08:	40020000 	.word	0x40020000

08007d0c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8007d18:	4b34      	ldr	r3, [pc, #208]	; (8007dec <EXTI_Init+0xe0>)
 8007d1a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	799b      	ldrb	r3, [r3, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d04f      	beq.n	8007dc4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8007d24:	4931      	ldr	r1, [pc, #196]	; (8007dec <EXTI_Init+0xe0>)
 8007d26:	4b31      	ldr	r3, [pc, #196]	; (8007dec <EXTI_Init+0xe0>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	4013      	ands	r3, r2
 8007d32:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8007d34:	492d      	ldr	r1, [pc, #180]	; (8007dec <EXTI_Init+0xe0>)
 8007d36:	4b2d      	ldr	r3, [pc, #180]	; (8007dec <EXTI_Init+0xe0>)
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	4013      	ands	r3, r2
 8007d42:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	791b      	ldrb	r3, [r3, #4]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007d5e:	4923      	ldr	r1, [pc, #140]	; (8007dec <EXTI_Init+0xe0>)
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <EXTI_Init+0xe0>)
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007d6e:	491f      	ldr	r1, [pc, #124]	; (8007dec <EXTI_Init+0xe0>)
 8007d70:	4b1e      	ldr	r3, [pc, #120]	; (8007dec <EXTI_Init+0xe0>)
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	795b      	ldrb	r3, [r3, #5]
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	d10e      	bne.n	8007da4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8007d86:	4919      	ldr	r1, [pc, #100]	; (8007dec <EXTI_Init+0xe0>)
 8007d88:	4b18      	ldr	r3, [pc, #96]	; (8007dec <EXTI_Init+0xe0>)
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8007d94:	4915      	ldr	r1, [pc, #84]	; (8007dec <EXTI_Init+0xe0>)
 8007d96:	4b15      	ldr	r3, [pc, #84]	; (8007dec <EXTI_Init+0xe0>)
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8007da2:	e01d      	b.n	8007de0 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <EXTI_Init+0xe0>)
 8007da6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	795b      	ldrb	r3, [r3, #5]
 8007dac:	461a      	mov	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	6811      	ldr	r1, [r2, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8007dc2:	e00d      	b.n	8007de0 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	43d2      	mvns	r2, r2
 8007ddc:	400a      	ands	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]
  }
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010400 	.word	0x40010400

08007df0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <EXTI_GetITStatus+0x44>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4013      	ands	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <EXTI_GetITStatus+0x44>)
 8007e0c:	695a      	ldr	r2, [r3, #20]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <EXTI_GetITStatus+0x32>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e001      	b.n	8007e26 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010400 	.word	0x40010400

08007e38 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007e40:	4a03      	ldr	r2, [pc, #12]	; (8007e50 <EXTI_ClearITPendingBit+0x18>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6153      	str	r3, [r2, #20]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr
 8007e50:	40010400 	.word	0x40010400

08007e54 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <FLASH_SetLatency+0x34>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e6c:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8007e76:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <FLASH_SetLatency+0x34>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6013      	str	r3, [r2, #0]
}
 8007e7c:	bf00      	nop
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40022000 	.word	0x40022000

08007e8c <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8007e94:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <FLASH_PrefetchBufferCmd+0x2c>)
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <FLASH_PrefetchBufferCmd+0x2c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f023 0310 	bic.w	r3, r3, #16
 8007e9e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8007ea0:	4905      	ldr	r1, [pc, #20]	; (8007eb8 <FLASH_PrefetchBufferCmd+0x2c>)
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <FLASH_PrefetchBufferCmd+0x2c>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40022000 	.word	0x40022000

08007ebc <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <FLASH_Unlock+0x18>)
 8007ec2:	4a05      	ldr	r2, [pc, #20]	; (8007ed8 <FLASH_Unlock+0x1c>)
 8007ec4:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <FLASH_Unlock+0x18>)
 8007ec8:	4a04      	ldr	r2, [pc, #16]	; (8007edc <FLASH_Unlock+0x20>)
 8007eca:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8007ecc:	bf00      	nop
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	40022000 	.word	0x40022000
 8007ed8:	45670123 	.word	0x45670123
 8007edc:	cdef89ab 	.word	0xcdef89ab

08007ee0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b089      	sub	sp, #36	; 0x24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	78db      	ldrb	r3, [r3, #3]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	78db      	ldrb	r3, [r3, #3]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	789b      	ldrb	r3, [r3, #2]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d044      	beq.n	8007fb8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	e038      	b.n	8007fac <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f42:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d126      	bne.n	8007fa6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8007f5e:	220f      	movs	r2, #15
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b28      	cmp	r3, #40	; 0x28
 8007f86:	d105      	bne.n	8007f94 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8007f88:	2201      	movs	r2, #1
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	615a      	str	r2, [r3, #20]
 8007f92:	e008      	b.n	8007fa6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	2b48      	cmp	r3, #72	; 0x48
 8007f9a:	d104      	bne.n	8007fa6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b07      	cmp	r3, #7
 8007fb0:	d9c3      	bls.n	8007f3a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	2bff      	cmp	r3, #255	; 0xff
 8007fbe:	d946      	bls.n	800804e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e03a      	b.n	8008042 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d127      	bne.n	800803c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	43db      	mvns	r3, r3
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4013      	ands	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	78db      	ldrb	r3, [r3, #3]
 8008018:	2b28      	cmp	r3, #40	; 0x28
 800801a:	d105      	bne.n	8008028 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	3308      	adds	r3, #8
 8008020:	2201      	movs	r2, #1
 8008022:	409a      	lsls	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	78db      	ldrb	r3, [r3, #3]
 800802c:	2b48      	cmp	r3, #72	; 0x48
 800802e:	d105      	bne.n	800803c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	3308      	adds	r3, #8
 8008034:	2201      	movs	r2, #1
 8008036:	409a      	lsls	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	3301      	adds	r3, #1
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b07      	cmp	r3, #7
 8008046:	d9c1      	bls.n	8007fcc <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	605a      	str	r2, [r3, #4]
  }
}
 800804e:	bf00      	nop
 8008050:	3724      	adds	r7, #36	; 0x24
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	887b      	ldrh	r3, [r7, #2]
 800806e:	4013      	ands	r3, r2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e001      	b.n	800807e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop

0800808c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	887b      	ldrh	r3, [r7, #2]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
 80080ac:	e001      	b.n	80080b2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	611a      	str	r2, [r3, #16]
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80080e8:	887a      	ldrh	r2, [r7, #2]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	615a      	str	r2, [r3, #20]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80080f8:	b490      	push	{r4, r7}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	460a      	mov	r2, r1
 8008102:	71fb      	strb	r3, [r7, #7]
 8008104:	4613      	mov	r3, r2
 8008106:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800810c:	79bb      	ldrb	r3, [r7, #6]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	220f      	movs	r2, #15
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800811c:	4916      	ldr	r1, [pc, #88]	; (8008178 <GPIO_EXTILineConfig+0x80>)
 800811e:	79bb      	ldrb	r3, [r7, #6]
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	b2db      	uxtb	r3, r3
 8008124:	4618      	mov	r0, r3
 8008126:	4a14      	ldr	r2, [pc, #80]	; (8008178 <GPIO_EXTILineConfig+0x80>)
 8008128:	79bb      	ldrb	r3, [r7, #6]
 800812a:	089b      	lsrs	r3, r3, #2
 800812c:	b2db      	uxtb	r3, r3
 800812e:	3302      	adds	r3, #2
 8008130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	43db      	mvns	r3, r3
 8008138:	401a      	ands	r2, r3
 800813a:	1c83      	adds	r3, r0, #2
 800813c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8008140:	480d      	ldr	r0, [pc, #52]	; (8008178 <GPIO_EXTILineConfig+0x80>)
 8008142:	79bb      	ldrb	r3, [r7, #6]
 8008144:	089b      	lsrs	r3, r3, #2
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461c      	mov	r4, r3
 800814a:	4a0b      	ldr	r2, [pc, #44]	; (8008178 <GPIO_EXTILineConfig+0x80>)
 800814c:	79bb      	ldrb	r3, [r7, #6]
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	b2db      	uxtb	r3, r3
 8008152:	3302      	adds	r3, #2
 8008154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008158:	79f9      	ldrb	r1, [r7, #7]
 800815a:	79bb      	ldrb	r3, [r7, #6]
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	fa01 f303 	lsl.w	r3, r1, r3
 8008166:	431a      	orrs	r2, r3
 8008168:	1ca3      	adds	r3, r4, #2
 800816a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bc90      	pop	{r4, r7}
 8008176:	4770      	bx	lr
 8008178:	40010000 	.word	0x40010000

0800817c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	84fb      	strh	r3, [r7, #38]	; 0x26
 800818a:	2300      	movs	r3, #0
 800818c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800818e:	2304      	movs	r3, #4
 8008190:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8008192:	4b57      	ldr	r3, [pc, #348]	; (80082f0 <I2C_Init+0x174>)
 8008194:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	889b      	ldrh	r3, [r3, #4]
 800819a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 800819c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800819e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80081a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fb6f 	bl	800888c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4a4f      	ldr	r2, [pc, #316]	; (80082f4 <I2C_Init+0x178>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	0c9b      	lsrs	r3, r3, #18
 80081bc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80081be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081c2:	4313      	orrs	r3, r2
 80081c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081ca:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a44      	ldr	r2, [pc, #272]	; (80082f8 <I2C_Init+0x17c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d815      	bhi.n	8008216 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80081f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d801      	bhi.n	8008202 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80081fe:	2304      	movs	r3, #4
 8008200:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8008202:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008206:	4313      	orrs	r3, r2
 8008208:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800820a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800820c:	3301      	adds	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	841a      	strh	r2, [r3, #32]
 8008214:	e040      	b.n	8008298 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800821e:	4293      	cmp	r3, r2
 8008220:	d109      	bne.n	8008236 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4613      	mov	r3, r2
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4413      	add	r3, r2
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008232:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008234:	e00e      	b.n	8008254 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009a      	lsls	r2, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800824c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800824e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008252:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8008254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800825e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8008266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800826a:	4313      	orrs	r3, r2
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008276:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8008278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800827a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <I2C_Init+0x180>)
 8008284:	fb82 1203 	smull	r1, r2, r2, r3
 8008288:	1192      	asrs	r2, r2, #6
 800828a:	17db      	asrs	r3, r3, #31
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	b29b      	uxth	r3, r3
 8008290:	3301      	adds	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800829c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80082b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082b6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80082ba:	f023 0302 	bic.w	r3, r3, #2
 80082be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	889a      	ldrh	r2, [r3, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	895b      	ldrh	r3, [r3, #10]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082ce:	4313      	orrs	r3, r2
 80082d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082d6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	899a      	ldrh	r2, [r3, #12]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	891b      	ldrh	r3, [r3, #8]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	811a      	strh	r2, [r3, #8]
}
 80082e8:	bf00      	nop
 80082ea:	3728      	adds	r7, #40	; 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	007a1200 	.word	0x007a1200
 80082f4:	431bde83 	.word	0x431bde83
 80082f8:	000186a0 	.word	0x000186a0
 80082fc:	10624dd3 	.word	0x10624dd3

08008300 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8008322:	e007      	b.n	8008334 <I2C_Cmd+0x34>
    I2Cx->CR1 |= CR1_PE_Set;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f023 0301 	bic.w	r3, r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	801a      	strh	r2, [r3, #0]
  }
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop

08008340 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	889b      	ldrh	r3, [r3, #4]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
  }
}
 8008362:	e007      	b.n	8008374 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= CR2_DMAEN_Set;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	889b      	ldrh	r3, [r3, #4]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	809a      	strh	r2, [r3, #4]
  }
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	889b      	ldrh	r3, [r3, #4]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800839c:	b29a      	uxth	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
  }
}
 80083a2:	e007      	b.n	80083b4 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= CR2_LAST_Set;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	889b      	ldrh	r3, [r3, #4]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	809a      	strh	r2, [r3, #4]
  }
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d008      	beq.n	80083e4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80083e2:	e007      	b.n	80083f4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= CR1_START_Set;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	801a      	strh	r2, [r3, #0]
  }
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop

08008400 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8008422:	e007      	b.n	8008434 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= CR1_STOP_Set;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800842e:	b29a      	uxth	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	801a      	strh	r2, [r3, #0]
  }
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop

08008440 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8008462:	e007      	b.n	8008474 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= CR1_ACK_Set;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	801a      	strh	r2, [r3, #0]
  }
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	821a      	strh	r2, [r3, #16]
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop

080084a0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8a1b      	ldrh	r3, [r3, #16]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	b2db      	uxtb	r3, r3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
 80084c8:	4613      	mov	r3, r2
 80084ca:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80084cc:	78bb      	ldrb	r3, [r7, #2]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	70fb      	strb	r3, [r7, #3]
 80084da:	e003      	b.n	80084e4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	821a      	strh	r2, [r3, #16]
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop

080084f8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8a9b      	ldrh	r3, [r3, #20]
 8008516:	b29b      	uxth	r3, r3
 8008518:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8b1b      	ldrh	r3, [r3, #24]
 800851e:	b29b      	uxth	r3, r3
 8008520:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	041b      	lsls	r3, r3, #16
 8008526:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4313      	orrs	r3, r2
 800852e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008532:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	401a      	ands	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d102      	bne.n	8008546 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8008540:	2301      	movs	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	e001      	b.n	800854a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	0f1b      	lsrs	r3, r3, #28
 8008576:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800857e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3314      	adds	r3, #20
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e005      	b.n	800859a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	0c1b      	lsrs	r3, r3, #16
 8008592:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3318      	adds	r3, #24
 8008598:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	e001      	b.n	80085b0 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80085ac:	2300      	movs	r3, #0
 80085ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <I2C_ClearFlag>:
  *     register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
  *     register  (I2C_SendData()).
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_Mask;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085d0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	43db      	mvns	r3, r3
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	829a      	strh	r2, [r3, #20]
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80085f2:	4a04      	ldr	r2, [pc, #16]	; (8008604 <PWR_BackupAccessCmd+0x1c>)
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	6013      	str	r3, [r2, #0]
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	420e0020 	.word	0x420e0020

08008608 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8008612:	4a04      	ldr	r2, [pc, #16]	; (8008624 <PWR_PVDCmd+0x1c>)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	6013      	str	r3, [r2, #0]
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	420e0010 	.word	0x420e0010

08008628 <PWR_PVDLevelConfig>:
  *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
  *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <PWR_PVDLevelConfig+0x34>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008640:	60fb      	str	r3, [r7, #12]
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  PWR->CR = tmpreg;
 800864a:	4a04      	ldr	r2, [pc, #16]	; (800865c <PWR_PVDLevelConfig+0x34>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6013      	str	r3, [r2, #0]
}
 8008650:	bf00      	nop
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40007000 	.word	0x40007000

08008660 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800866a:	2300      	movs	r3, #0
 800866c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800866e:	2300      	movs	r3, #0
 8008670:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8008672:	2031      	movs	r0, #49	; 0x31
 8008674:	f000 fa24 	bl	8008ac0 <RCC_GetFlagStatus>
 8008678:	4603      	mov	r3, r0
 800867a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008688:	d002      	beq.n	8008690 <RCC_WaitForHSEStartUp+0x30>
 800868a:	79bb      	ldrb	r3, [r7, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f0      	beq.n	8008672 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8008690:	2031      	movs	r0, #49	; 0x31
 8008692:	f000 fa15 	bl	8008ac0 <RCC_GetFlagStatus>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800869c:	2301      	movs	r3, #1
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	e001      	b.n	80086a6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80086a2:	2300      	movs	r3, #0
 80086a4:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80086a6:	79fb      	ldrb	r3, [r7, #7]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <RCC_PLLConfig+0x38>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80086d8:	4a03      	ldr	r2, [pc, #12]	; (80086e8 <RCC_PLLConfig+0x38>)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6053      	str	r3, [r2, #4]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr
 80086e8:	40021000 	.word	0x40021000

080086ec <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80086f6:	4a04      	ldr	r2, [pc, #16]	; (8008708 <RCC_PLLCmd+0x1c>)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	42420060 	.word	0x42420060

0800870c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8008718:	4b09      	ldr	r3, [pc, #36]	; (8008740 <RCC_SYSCLKConfig+0x34>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f023 0303 	bic.w	r3, r3, #3
 8008724:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800872e:	4a04      	ldr	r2, [pc, #16]	; (8008740 <RCC_SYSCLKConfig+0x34>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6053      	str	r3, [r2, #4]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40021000 	.word	0x40021000

08008744 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <RCC_GetSYSCLKSource+0x18>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 030c 	and.w	r3, r3, #12
 8008752:	b2db      	uxtb	r3, r3
}
 8008754:	4618      	mov	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr
 800875c:	40021000 	.word	0x40021000

08008760 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800876c:	4b09      	ldr	r3, [pc, #36]	; (8008794 <RCC_HCLKConfig+0x34>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008778:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008782:	4a04      	ldr	r2, [pc, #16]	; (8008794 <RCC_HCLKConfig+0x34>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6053      	str	r3, [r2, #4]
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40021000 	.word	0x40021000

08008798 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <RCC_PCLK1Config+0x34>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80087ba:	4a04      	ldr	r2, [pc, #16]	; (80087cc <RCC_PCLK1Config+0x34>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6053      	str	r3, [r2, #4]
}
 80087c0:	bf00      	nop
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40021000 	.word	0x40021000

080087d0 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <RCC_PCLK2Config+0x34>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80087e8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80087f4:	4a03      	ldr	r2, [pc, #12]	; (8008804 <RCC_PCLK2Config+0x34>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6053      	str	r3, [r2, #4]
}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr
 8008804:	40021000 	.word	0x40021000

08008808 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008812:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <RCC_LSEConfig+0x3c>)
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <RCC_LSEConfig+0x3c>)
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d002      	beq.n	800882a <RCC_LSEConfig+0x22>
 8008824:	2b04      	cmp	r3, #4
 8008826:	d004      	beq.n	8008832 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8008828:	e007      	b.n	800883a <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <RCC_LSEConfig+0x3c>)
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
      break;
 8008830:	e003      	b.n	800883a <RCC_LSEConfig+0x32>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <RCC_LSEConfig+0x3c>)
 8008834:	2205      	movs	r2, #5
 8008836:	701a      	strb	r2, [r3, #0]
      break;            
 8008838:	bf00      	nop
      
    default:
      break;      
  }
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	40021020 	.word	0x40021020

08008848 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8008850:	4905      	ldr	r1, [pc, #20]	; (8008868 <RCC_RTCCLKConfig+0x20>)
 8008852:	4b05      	ldr	r3, [pc, #20]	; (8008868 <RCC_RTCCLKConfig+0x20>)
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4313      	orrs	r3, r2
 800885a:	620b      	str	r3, [r1, #32]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40021000 	.word	0x40021000

0800886c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8008876:	4a04      	ldr	r2, [pc, #16]	; (8008888 <RCC_RTCCLKCmd+0x1c>)
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	4242043c 	.word	0x4242043c

0800888c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	2300      	movs	r3, #0
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	2300      	movs	r3, #0
 80088a2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80088a4:	4b4c      	ldr	r3, [pc, #304]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f003 030c 	and.w	r3, r3, #12
 80088ac:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d007      	beq.n	80088c4 <RCC_GetClocksFreq+0x38>
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d009      	beq.n	80088cc <RCC_GetClocksFreq+0x40>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d133      	bne.n	8008924 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a47      	ldr	r2, [pc, #284]	; (80089dc <RCC_GetClocksFreq+0x150>)
 80088c0:	601a      	str	r2, [r3, #0]
      break;
 80088c2:	e033      	b.n	800892c <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a45      	ldr	r2, [pc, #276]	; (80089dc <RCC_GetClocksFreq+0x150>)
 80088c8:	601a      	str	r2, [r3, #0]
      break;
 80088ca:	e02f      	b.n	800892c <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80088cc:	4b42      	ldr	r3, [pc, #264]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80088d4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80088d6:	4b40      	ldr	r3, [pc, #256]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088de:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	0c9b      	lsrs	r3, r3, #18
 80088e4:	3302      	adds	r3, #2
 80088e6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4a3b      	ldr	r2, [pc, #236]	; (80089e0 <RCC_GetClocksFreq+0x154>)
 80088f2:	fb02 f203 	mul.w	r2, r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80088fa:	e017      	b.n	800892c <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80088fc:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	4a35      	ldr	r2, [pc, #212]	; (80089e0 <RCC_GetClocksFreq+0x154>)
 800890c:	fb02 f203 	mul.w	r2, r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8008914:	e00a      	b.n	800892c <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4a30      	ldr	r2, [pc, #192]	; (80089dc <RCC_GetClocksFreq+0x150>)
 800891a:	fb02 f203 	mul.w	r2, r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8008922:	e003      	b.n	800892c <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a2d      	ldr	r2, [pc, #180]	; (80089dc <RCC_GetClocksFreq+0x150>)
 8008928:	601a      	str	r2, [r3, #0]
      break;
 800892a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008934:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800893c:	4a29      	ldr	r2, [pc, #164]	; (80089e4 <RCC_GetClocksFreq+0x158>)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	40da      	lsrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8008954:	4b20      	ldr	r3, [pc, #128]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800895c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8008964:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <RCC_GetClocksFreq+0x158>)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	40da      	lsrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800897c:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008984:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	0adb      	lsrs	r3, r3, #11
 800898a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <RCC_GetClocksFreq+0x158>)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	40da      	lsrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <RCC_GetClocksFreq+0x14c>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089ac:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	0b9b      	lsrs	r3, r3, #14
 80089b2:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80089b4:	4a0c      	ldr	r2, [pc, #48]	; (80089e8 <RCC_GetClocksFreq+0x15c>)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	611a      	str	r2, [r3, #16]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	40021000 	.word	0x40021000
 80089dc:	007a1200 	.word	0x007a1200
 80089e0:	003d0900 	.word	0x003d0900
 80089e4:	20000184 	.word	0x20000184
 80089e8:	20000194 	.word	0x20000194

080089ec <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d006      	beq.n	8008a0c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80089fe:	4909      	ldr	r1, [pc, #36]	; (8008a24 <RCC_AHBPeriphClockCmd+0x38>)
 8008a00:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <RCC_AHBPeriphClockCmd+0x38>)
 8008a02:	695a      	ldr	r2, [r3, #20]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8008a0a:	e006      	b.n	8008a1a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8008a0c:	4905      	ldr	r1, [pc, #20]	; (8008a24 <RCC_AHBPeriphClockCmd+0x38>)
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <RCC_AHBPeriphClockCmd+0x38>)
 8008a10:	695a      	ldr	r2, [r3, #20]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	4013      	ands	r3, r2
 8008a18:	614b      	str	r3, [r1, #20]
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr
 8008a24:	40021000 	.word	0x40021000

08008a28 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008a3a:	4909      	ldr	r1, [pc, #36]	; (8008a60 <RCC_APB2PeriphClockCmd+0x38>)
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <RCC_APB2PeriphClockCmd+0x38>)
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8008a46:	e006      	b.n	8008a56 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008a48:	4905      	ldr	r1, [pc, #20]	; (8008a60 <RCC_APB2PeriphClockCmd+0x38>)
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <RCC_APB2PeriphClockCmd+0x38>)
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	43db      	mvns	r3, r3
 8008a52:	4013      	ands	r3, r2
 8008a54:	618b      	str	r3, [r1, #24]
  }
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr
 8008a60:	40021000 	.word	0x40021000

08008a64 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8008a76:	4909      	ldr	r1, [pc, #36]	; (8008a9c <RCC_APB1PeriphClockCmd+0x38>)
 8008a78:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <RCC_APB1PeriphClockCmd+0x38>)
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8008a82:	e006      	b.n	8008a92 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8008a84:	4905      	ldr	r1, [pc, #20]	; (8008a9c <RCC_APB1PeriphClockCmd+0x38>)
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <RCC_APB1PeriphClockCmd+0x38>)
 8008a88:	69da      	ldr	r2, [r3, #28]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	4013      	ands	r3, r2
 8008a90:	61cb      	str	r3, [r1, #28]
  }
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr
 8008a9c:	40021000 	.word	0x40021000

08008aa0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <RCC_BackupResetCmd+0x1c>)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	6013      	str	r3, [r2, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	42420440 	.word	0x42420440

08008ac0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d103      	bne.n	8008aec <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <RCC_GetFlagStatus+0x70>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e009      	b.n	8008b00 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d103      	bne.n	8008afa <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8008af2:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <RCC_GetFlagStatus+0x70>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e002      	b.n	8008b00 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <RCC_GetFlagStatus+0x70>)
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	74fb      	strb	r3, [r7, #19]
 8008b1c:	e001      	b.n	8008b22 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8008b22:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40021000 	.word	0x40021000

08008b34 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	80fb      	strh	r3, [r7, #6]
 8008b40:	4613      	mov	r3, r2
 8008b42:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008b44:	797b      	ldrb	r3, [r7, #5]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
 8008b4a:	490c      	ldr	r1, [pc, #48]	; (8008b7c <RTC_ITConfig+0x48>)
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <RTC_ITConfig+0x48>)
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
 8008b5a:	e009      	b.n	8008b70 <RTC_ITConfig+0x3c>
  {
    RTC->CRH |= RTC_IT;
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
 8008b5c:	4907      	ldr	r1, [pc, #28]	; (8008b7c <RTC_ITConfig+0x48>)
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <RTC_ITConfig+0x48>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	43db      	mvns	r3, r3
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	800b      	strh	r3, [r1, #0]
  }
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40002800 	.word	0x40002800

08008b80 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 8008b84:	4a05      	ldr	r2, [pc, #20]	; (8008b9c <RTC_EnterConfigMode+0x1c>)
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <RTC_EnterConfigMode+0x1c>)
 8008b88:	889b      	ldrh	r3, [r3, #4]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	f043 0310 	orr.w	r3, r3, #16
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8093      	strh	r3, [r2, #4]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	40002800 	.word	0x40002800

08008ba0 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 8008ba4:	4a05      	ldr	r2, [pc, #20]	; (8008bbc <RTC_ExitConfigMode+0x1c>)
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <RTC_ExitConfigMode+0x1c>)
 8008ba8:	889b      	ldrh	r3, [r3, #4]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f023 0310 	bic.w	r3, r3, #16
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8093      	strh	r3, [r2, #4]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr
 8008bbc:	40002800 	.word	0x40002800

08008bc0 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
  uint16_t high1 = 0, high2 = 0, low = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	80fb      	strh	r3, [r7, #6]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	80bb      	strh	r3, [r7, #4]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	807b      	strh	r3, [r7, #2]

  high1 = RTC->CNTH;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <RTC_GetCounter+0x4c>)
 8008bd4:	8b1b      	ldrh	r3, [r3, #24]
 8008bd6:	80fb      	strh	r3, [r7, #6]
  low   = RTC->CNTL;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <RTC_GetCounter+0x4c>)
 8008bda:	8b9b      	ldrh	r3, [r3, #28]
 8008bdc:	807b      	strh	r3, [r7, #2]
  high2 = RTC->CNTH;
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <RTC_GetCounter+0x4c>)
 8008be0:	8b1b      	ldrh	r3, [r3, #24]
 8008be2:	80bb      	strh	r3, [r7, #4]

  if (high1 != high2)
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	88bb      	ldrh	r3, [r7, #4]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d006      	beq.n	8008bfa <RTC_GetCounter+0x3a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    return (((uint32_t) high2 << 16 ) | RTC->CNTL);
 8008bec:	88bb      	ldrh	r3, [r7, #4]
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	4a06      	ldr	r2, [pc, #24]	; (8008c0c <RTC_GetCounter+0x4c>)
 8008bf2:	8b92      	ldrh	r2, [r2, #28]
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	e003      	b.n	8008c02 <RTC_GetCounter+0x42>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    return (((uint32_t) high1 << 16 ) | low);
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	041a      	lsls	r2, r3, #16
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	4313      	orrs	r3, r2
  }
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr
 8008c0c:	40002800 	.word	0x40002800

08008c10 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
 8008c18:	f7ff ffb2 	bl	8008b80 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 8008c1c:	4a07      	ldr	r2, [pc, #28]	; (8008c3c <RTC_SetCounter+0x2c>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	0c1b      	lsrs	r3, r3, #16
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8313      	strh	r3, [r2, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 8008c26:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <RTC_SetCounter+0x2c>)
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
 8008c2e:	f7ff ffb7 	bl	8008ba0 <RTC_ExitConfigMode>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40002800 	.word	0x40002800

08008c40 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 8008c48:	f7ff ff9a 	bl	8008b80 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 8008c4c:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <RTC_SetPrescaler+0x30>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	0c1b      	lsrs	r3, r3, #16
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <RTC_SetPrescaler+0x30>)
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	b292      	uxth	r2, r2
 8008c62:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
 8008c64:	f7ff ff9c 	bl	8008ba0 <RTC_ExitConfigMode>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40002800 	.word	0x40002800

08008c74 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 8008c78:	bf00      	nop
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <RTC_WaitForLastTask+0x1c>)
 8008c7c:	889b      	ldrh	r3, [r3, #4]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f003 0320 	and.w	r3, r3, #32
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f8      	beq.n	8008c7a <RTC_WaitForLastTask+0x6>
  {
  }
}
 8008c88:	bf00      	nop
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr
 8008c90:	40002800 	.word	0x40002800

08008c94 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <RTC_GetITStatus+0x4c>)
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4013      	ands	r3, r2
 8008cb0:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <RTC_GetITStatus+0x4c>)
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d005      	beq.n	8008cce <RTC_GetITStatus+0x3a>
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
 8008ccc:	e001      	b.n	8008cd2 <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40002800 	.word	0x40002800

08008ce4 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
 8008cee:	4907      	ldr	r1, [pc, #28]	; (8008d0c <RTC_ClearITPendingBit+0x28>)
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <RTC_ClearITPendingBit+0x28>)
 8008cf2:	889b      	ldrh	r3, [r3, #4]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	808b      	strh	r3, [r1, #4]
}
 8008d02:	bf00      	nop
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	40002800 	.word	0x40002800

08008d10 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a2e      	ldr	r2, [pc, #184]	; (8008de0 <TIM_TimeBaseInit+0xd0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d013      	beq.n	8008d54 <TIM_TimeBaseInit+0x44>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a2d      	ldr	r2, [pc, #180]	; (8008de4 <TIM_TimeBaseInit+0xd4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00f      	beq.n	8008d54 <TIM_TimeBaseInit+0x44>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3a:	d00b      	beq.n	8008d54 <TIM_TimeBaseInit+0x44>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <TIM_TimeBaseInit+0xd8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d007      	beq.n	8008d54 <TIM_TimeBaseInit+0x44>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a29      	ldr	r2, [pc, #164]	; (8008dec <TIM_TimeBaseInit+0xdc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a28      	ldr	r2, [pc, #160]	; (8008df0 <TIM_TimeBaseInit+0xe0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d108      	bne.n	8008d66 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885a      	ldrh	r2, [r3, #2]
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <TIM_TimeBaseInit+0xe4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00c      	beq.n	8008d88 <TIM_TimeBaseInit+0x78>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <TIM_TimeBaseInit+0xe8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d008      	beq.n	8008d88 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8008d76:	89fb      	ldrh	r3, [r7, #14]
 8008d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88da      	ldrh	r2, [r3, #6]
 8008d82:	89fb      	ldrh	r3, [r7, #14]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	89fa      	ldrh	r2, [r7, #14]
 8008d8c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	889a      	ldrh	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <TIM_TimeBaseInit+0xd0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00f      	beq.n	8008dc6 <TIM_TimeBaseInit+0xb6>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a0e      	ldr	r2, [pc, #56]	; (8008de4 <TIM_TimeBaseInit+0xd4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00b      	beq.n	8008dc6 <TIM_TimeBaseInit+0xb6>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a12      	ldr	r2, [pc, #72]	; (8008dfc <TIM_TimeBaseInit+0xec>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d007      	beq.n	8008dc6 <TIM_TimeBaseInit+0xb6>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <TIM_TimeBaseInit+0xf0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_TimeBaseInit+0xb6>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a10      	ldr	r2, [pc, #64]	; (8008e04 <TIM_TimeBaseInit+0xf4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d104      	bne.n	8008dd0 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	7a1b      	ldrb	r3, [r3, #8]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	829a      	strh	r2, [r3, #20]
}
 8008dd6:	bf00      	nop
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr
 8008de0:	40012c00 	.word	0x40012c00
 8008de4:	40013400 	.word	0x40013400
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40001000 	.word	0x40001000
 8008df8:	40001400 	.word	0x40001400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800

08008e08 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e16:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	721a      	strb	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f043 0301 	orr.w	r3, r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8008e5e:	e007      	b.n	8008e70 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	801a      	strh	r2, [r3, #0]
  }
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop

08008e7c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008e8c:	787b      	ldrb	r3, [r7, #1]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	899b      	ldrh	r3, [r3, #12]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	887b      	ldrh	r3, [r7, #2]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8008ea2:	e009      	b.n	8008eb8 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	899b      	ldrh	r3, [r3, #12]
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	887b      	ldrh	r3, [r7, #2]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	819a      	strh	r2, [r3, #12]
  }
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	887a      	ldrh	r2, [r7, #2]
 8008ed4:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	81bb      	strh	r3, [r7, #12]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8a1b      	ldrh	r3, [r3, #16]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	4013      	ands	r3, r2
 8008f02:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	899b      	ldrh	r3, [r3, #12]
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	887b      	ldrh	r3, [r7, #2]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8008f10:	89bb      	ldrh	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <TIM_GetITStatus+0x42>
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	e001      	b.n	8008f26 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop

08008f34 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8008f40:	887b      	ldrh	r3, [r7, #2]
 8008f42:	43db      	mvns	r3, r3
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	821a      	strh	r2, [r3, #16]
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	; 0x30
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f62:	2300      	movs	r3, #0
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8a1b      	ldrh	r3, [r3, #16]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8008f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f80:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8008f84:	4013      	ands	r3, r2
 8008f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	88db      	ldrh	r3, [r3, #6]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	4313      	orrs	r3, r2
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	899b      	ldrh	r3, [r3, #12]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8008fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8008faa:	4013      	ands	r3, r2
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	889a      	ldrh	r2, [r3, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	891b      	ldrh	r3, [r3, #8]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8a9b      	ldrh	r3, [r3, #20]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8008fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fdc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	899b      	ldrh	r3, [r3, #12]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	4313      	orrs	r3, r2
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff fc45 	bl	800888c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	4a2e      	ldr	r2, [pc, #184]	; (80090c0 <USART_Init+0x16c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d102      	bne.n	8009010 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
 800900e:	e001      	b.n	8009014 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	899b      	ldrh	r3, [r3, #12]
 8009018:	b29b      	uxth	r3, r3
 800901a:	b21b      	sxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	da0c      	bge.n	800903a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8009020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009a      	lsls	r2, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
 8009038:	e00b      	b.n	8009052 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800903a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009a      	lsls	r2, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	4a1b      	ldr	r2, [pc, #108]	; (80090c4 <USART_Init+0x170>)
 8009056:	fba2 2303 	umull	r2, r3, r2, r3
 800905a:	095b      	lsrs	r3, r3, #5
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	091b      	lsrs	r3, r3, #4
 8009064:	2264      	movs	r2, #100	; 0x64
 8009066:	fb02 f303 	mul.w	r3, r2, r3
 800906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	899b      	ldrh	r3, [r3, #12]
 8009074:	b29b      	uxth	r3, r3
 8009076:	b21b      	sxth	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	da0c      	bge.n	8009096 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	3332      	adds	r3, #50	; 0x32
 8009082:	4a10      	ldr	r2, [pc, #64]	; (80090c4 <USART_Init+0x170>)
 8009084:	fba2 2303 	umull	r2, r3, r2, r3
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009090:	4313      	orrs	r3, r2
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009094:	e00b      	b.n	80090ae <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	3332      	adds	r3, #50	; 0x32
 800909c:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <USART_Init+0x170>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090aa:	4313      	orrs	r3, r2
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	811a      	strh	r2, [r3, #8]
}
 80090b6:	bf00      	nop
 80090b8:	3730      	adds	r7, #48	; 0x30
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	40013800 	.word	0x40013800
 80090c4:	51eb851f 	.word	0x51eb851f

080090c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	899b      	ldrh	r3, [r3, #12]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80090ea:	e007      	b.n	80090fc <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	899b      	ldrh	r3, [r3, #12]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	819a      	strh	r2, [r3, #12]
  }
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop

08009108 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	807b      	strh	r3, [r7, #2]
 8009114:	4613      	mov	r3, r2
 8009116:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	2300      	movs	r3, #0
 8009122:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800912c:	887b      	ldrh	r3, [r7, #2]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	095b      	lsrs	r3, r3, #5
 8009132:	b2db      	uxtb	r3, r3
 8009134:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8009136:	887b      	ldrh	r3, [r7, #2]
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800913e:	2201      	movs	r2, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d103      	bne.n	8009156 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	330c      	adds	r3, #12
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e009      	b.n	800916a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d103      	bne.n	8009164 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	3310      	adds	r3, #16
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e002      	b.n	800916a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3314      	adds	r3, #20
 8009168:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800916a:	787b      	ldrb	r3, [r7, #1]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	6811      	ldr	r1, [r2, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	430a      	orrs	r2, r1
 800917a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800917c:	e006      	b.n	800918c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	6811      	ldr	r1, [r2, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	43d2      	mvns	r2, r2
 8009188:	400a      	ands	r2, r1
 800918a:	601a      	str	r2, [r3, #0]
  }
}
 800918c:	bf00      	nop
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop

08009198 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80091a4:	887b      	ldrh	r3, [r7, #2]
 80091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	809a      	strh	r2, [r3, #4]
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop

080091bc <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	889b      	ldrh	r3, [r3, #4]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ce:	b29b      	uxth	r3, r3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop

080091dc <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	2300      	movs	r3, #0
 80091f2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80091f4:	2300      	movs	r3, #0
 80091f6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80091f8:	887b      	ldrh	r3, [r7, #2]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	095b      	lsrs	r3, r3, #5
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8009202:	887b      	ldrh	r3, [r7, #2]
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800920a:	2201      	movs	r2, #1
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d107      	bne.n	800922a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	899b      	ldrh	r3, [r3, #12]
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4013      	ands	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e011      	b.n	800924e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d107      	bne.n	8009240 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8a1b      	ldrh	r3, [r3, #16]
 8009234:	b29b      	uxth	r3, r3
 8009236:	461a      	mov	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	4013      	ands	r3, r2
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e006      	b.n	800924e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	8a9b      	ldrh	r3, [r3, #20]
 8009244:	b29b      	uxth	r3, r3
 8009246:	461a      	mov	r2, r3
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	4013      	ands	r3, r2
 800924c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	b29b      	uxth	r3, r3
 8009254:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8009256:	2201      	movs	r2, #1
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4013      	ands	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <USART_GetITStatus+0xa4>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800927a:	2301      	movs	r3, #1
 800927c:	74fb      	strb	r3, [r7, #19]
 800927e:	e001      	b.n	8009284 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8009280:	2300      	movs	r3, #0
 8009282:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8009284:	7cfb      	ldrb	r3, [r7, #19]
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr

08009290 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800929c:	2300      	movs	r3, #0
 800929e:	81fb      	strh	r3, [r7, #14]
 80092a0:	2300      	movs	r3, #0
 80092a2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80092a4:	887b      	ldrh	r3, [r7, #2]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	2201      	movs	r2, #1
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80092b4:	89bb      	ldrh	r3, [r7, #12]
 80092b6:	43db      	mvns	r3, r3
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	801a      	strh	r2, [r3, #0]
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier. 
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80092cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80092d0:	4905      	ldr	r1, [pc, #20]	; (80092e8 <NVIC_SystemReset+0x20>)
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <NVIC_SystemReset+0x20>)
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092da:	4b04      	ldr	r3, [pc, #16]	; (80092ec <NVIC_SystemReset+0x24>)
 80092dc:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80092de:	60cb      	str	r3, [r1, #12]
 80092e0:	f3bf 8f4f 	dsb	sy
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
 80092e4:	e7fe      	b.n	80092e4 <NVIC_SystemReset+0x1c>
 80092e6:	bf00      	nop
 80092e8:	e000ed00 	.word	0xe000ed00
 80092ec:	05fa0004 	.word	0x05fa0004

080092f0 <main>:
 */
void Restart_DHT22(void);
void ADCT_BGS_Initialize_system(void);
void ADCT_BGS_Factory_Reset(void);
int main(void)
{
 80092f0:	b598      	push	{r3, r4, r7, lr}
 80092f2:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80092f4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80092f8:	f7fe f8f8 	bl	80074ec <NVIC_PriorityGroupConfig>
	ADCT_BGS_MODBUS_RS485_Init();
 80092fc:	f7f7 ff92 	bl	8001224 <ADCT_BGS_MODBUS_RS485_Init>
	ADCT_BGS_Systick_Init();
 8009300:	f7fd ffd0 	bl	80072a4 <ADCT_BGS_Systick_Init>
	TM_DELAY_Init();
 8009304:	f7fd ffe4 	bl	80072d0 <TM_DELAY_Init>
	ADCT_BGS_DHT22_PWR_Init();
 8009308:	f7f9 ffd2 	bl	80032b0 <ADCT_BGS_DHT22_PWR_Init>
	DHT22_Module_Init_Hardware();
 800930c:	f7f9 ff72 	bl	80031f4 <DHT22_Module_Init_Hardware>
	sprintf(LCD_Buffer.lcd_line2, "DA KHOI TAO XONG");
	(void)lcd_update(LCD_Buffer.lcd_line1, LCD_Buffer.lcd_line2);
#endif
	/* TODO - Add your application code here */
	/* Enable power supply for DHT22 */
	DHT22_01_PWR_ON();
 8009310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009314:	482a      	ldr	r0, [pc, #168]	; (80093c0 <main+0xd0>)
 8009316:	f7fe fed3 	bl	80080c0 <GPIO_SetBits>
	DHT22_02_PWR_ON();
 800931a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800931e:	4829      	ldr	r0, [pc, #164]	; (80093c4 <main+0xd4>)
 8009320:	f7fe fece 	bl	80080c0 <GPIO_SetBits>
	ADCT_BGS_ASW_100ms_Init();
 8009324:	f7f7 fe0a 	bl	8000f3c <ADCT_BGS_ASW_100ms_Init>
	ADCT_BGS_ASW_10ms_Init();
 8009328:	f7f7 fe48 	bl	8000fbc <ADCT_BGS_ASW_10ms_Init>
	ADCT_BGS_ASW_1s_Init();
 800932c:	f7f7 fe72 	bl	8001014 <ADCT_BGS_ASW_1s_Init>
	ADCT_BGS_ASW_1ms_Init();
 8009330:	f7f7 fe5a 	bl	8000fe8 <ADCT_BGS_ASW_1ms_Init>
	ADCT_BGS_Button_Init();
 8009334:	f7fb f9e8 	bl	8004708 <ADCT_BGS_Button_Init>
	ADCT_BGS_RTC_Init();
 8009338:	f7fd fba8 	bl	8006a8c <ADCT_BGS_RTC_Init>
	EEPROM_Init();
 800933c:	f7fa fcb2 	bl	8003ca4 <EEPROM_Init>

	ADCT_BGS_Sensor_Input_Init();
 8009340:	f7fd ff3e 	bl	80071c0 <ADCT_BGS_Sensor_Input_Init>
	ADCT_AC_Init();
 8009344:	f7fc fed0 	bl	80060e8 <ADCT_AC_Init>
#ifdef SUPPORT_PHSENSOR
	ADCT_PhSensorInit();
 8009348:	f7fd f8dc 	bl	8006504 <ADCT_PhSensorInit>

#endif
	ADCT_Relay_Init();
 800934c:	f7fd fa02 	bl	8006754 <ADCT_Relay_Init>
#ifdef SUPPORT_FACTORY_RESET
	ADCT_BGS_Factory_Reset();
#endif
	ADCT_BGS_Initialize_system();
 8009350:	f000 f844 	bl	80093dc <ADCT_BGS_Initialize_system>
#endif
	/* Infinite loop */
	while (1)
	{
#ifdef SUPPORT_PHSENSOR
		if(ADCT_Ph_GetStatus())
 8009354:	f7fd f9f4 	bl	8006740 <ADCT_Ph_GetStatus>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d006      	beq.n	800936c <main+0x7c>
		{
			ADCT_PHVal =  ADCT_Ph_getValue();
 800935e:	f7fd f927 	bl	80065b0 <ADCT_Ph_getValue>
 8009362:	4603      	mov	r3, r0
 8009364:	460c      	mov	r4, r1
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <main+0xd8>)
 8009368:	e882 0018 	stmia.w	r2, {r3, r4}
		}
#endif
#ifdef ADCT_BGS_USE_STANDALONE
		TM_BUTTON_Update();
#endif
		if(g_ASW_Task_flag.ASW_100ms_flag == TRUE)
 800936c:	4b17      	ldr	r3, [pc, #92]	; (80093cc <main+0xdc>)
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d104      	bne.n	800937e <main+0x8e>
		{
#ifdef DONT_USE_SIMULATION_MODE
			ADCT_BGS_MODBUS_GetSetting();
 8009374:	f7f8 fa1c 	bl	80017b0 <ADCT_BGS_MODBUS_GetSetting>
#endif

			g_ASW_Task_flag.ASW_100ms_flag = FALSE;
 8009378:	4b14      	ldr	r3, [pc, #80]	; (80093cc <main+0xdc>)
 800937a:	2200      	movs	r2, #0
 800937c:	705a      	strb	r2, [r3, #1]
		}
		eMBPoll();
 800937e:	f7fb ff49 	bl	8005214 <eMBPoll>
		ADCT_BGS_MODBUS_RS485_UpdateData();
 8009382:	f7f7 ffe9 	bl	8001358 <ADCT_BGS_MODBUS_RS485_UpdateData>
#ifdef DONT_USE_SIMULATION_MODE
		ADCT_BGS_MODBUS_Get_BE_DKG_Data();
 8009386:	f7f8 f9bb 	bl	8001700 <ADCT_BGS_MODBUS_Get_BE_DKG_Data>
#endif
		ADCT_BGS_StateManger();
 800938a:	f7f8 fc85 	bl	8001c98 <ADCT_BGS_StateManger>
		ADCT_SystemFPT_RunOutput();
 800938e:	f7f9 fab3 	bl	80028f8 <ADCT_SystemFPT_RunOutput>
		/* Adding this line for setting RTC time in runtime with support from STLINK debugger and code compile without PRODUCTION CODE mode */
		if(ui8flag_set_time)
 8009392:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <main+0xe0>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <main+0xb6>
		{

			ADCT_BGS_Setting_Date_Time(&ADCT_BGS_Date_Time_Setting);
 800939a:	480e      	ldr	r0, [pc, #56]	; (80093d4 <main+0xe4>)
 800939c:	f7fd fc08 	bl	8006bb0 <ADCT_BGS_Setting_Date_Time>
			ui8flag_set_time = 0;
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <main+0xe0>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	701a      	strb	r2, [r3, #0]
		}

		if(ADCT_BGS_REBOOT_BOARD)
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <main+0xe8>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <main+0xca>
		{
			ADCT_BGS_Reboot;
 80093b0:	f7ff ff8a 	bl	80092c8 <NVIC_SystemReset>
			ADCT_BGS_REBOOT_BOARD = FALSE;
 80093b4:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <main+0xe8>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
		}
		Restart_DHT22();
 80093ba:	f000 f9e3 	bl	8009784 <Restart_DHT22>
	}
 80093be:	e7c9      	b.n	8009354 <main+0x64>
 80093c0:	40010800 	.word	0x40010800
 80093c4:	40010c00 	.word	0x40010c00
 80093c8:	20002738 	.word	0x20002738
 80093cc:	20002488 	.word	0x20002488
 80093d0:	20002474 	.word	0x20002474
 80093d4:	20002728 	.word	0x20002728
 80093d8:	20002494 	.word	0x20002494

080093dc <ADCT_BGS_Initialize_system>:
  GstSystemStatus.mbData.usCurrentGenFreq = 20;
  GstSystemStatus.mbData.usCurrentGenMode = 50;
}

void ADCT_BGS_Initialize_system(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
	static uint16_t HighByte =0, LowByte =0;
	ADCT_BGS_AIR_1_2_OFF();
 80093e0:	2120      	movs	r1, #32
 80093e2:	48ae      	ldr	r0, [pc, #696]	; (800969c <ADCT_BGS_Initialize_system+0x2c0>)
 80093e4:	f7fe fe6c 	bl	80080c0 <GPIO_SetBits>
 80093e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80093ec:	48ac      	ldr	r0, [pc, #688]	; (80096a0 <ADCT_BGS_Initialize_system+0x2c4>)
 80093ee:	f7fe fe67 	bl	80080c0 <GPIO_SetBits>
	ADCT_BGS_AIR_3_4_OFF();
 80093f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093f6:	48aa      	ldr	r0, [pc, #680]	; (80096a0 <ADCT_BGS_Initialize_system+0x2c4>)
 80093f8:	f7fe fe62 	bl	80080c0 <GPIO_SetBits>
 80093fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009400:	48a7      	ldr	r0, [pc, #668]	; (80096a0 <ADCT_BGS_Initialize_system+0x2c4>)
 8009402:	f7fe fe5d 	bl	80080c0 <GPIO_SetBits>
	ADCT_BGS_FAN_OFF();
 8009406:	2104      	movs	r1, #4
 8009408:	48a6      	ldr	r0, [pc, #664]	; (80096a4 <ADCT_BGS_Initialize_system+0x2c8>)
 800940a:	f7fe fe67 	bl	80080dc <GPIO_ResetBits>
 800940e:	2108      	movs	r1, #8
 8009410:	48a4      	ldr	r0, [pc, #656]	; (80096a4 <ADCT_BGS_Initialize_system+0x2c8>)
 8009412:	f7fe fe63 	bl	80080dc <GPIO_ResetBits>
 8009416:	2140      	movs	r1, #64	; 0x40
 8009418:	48a1      	ldr	r0, [pc, #644]	; (80096a0 <ADCT_BGS_Initialize_system+0x2c4>)
 800941a:	f7fe fe5f 	bl	80080dc <GPIO_ResetBits>
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	489f      	ldr	r0, [pc, #636]	; (80096a0 <ADCT_BGS_Initialize_system+0x2c4>)
 8009422:	f7fe fe5b 	bl	80080dc <GPIO_ResetBits>
	ADCT_BGS_RELAY_LAMP_OFF();
 8009426:	2101      	movs	r1, #1
 8009428:	489e      	ldr	r0, [pc, #632]	; (80096a4 <ADCT_BGS_Initialize_system+0x2c8>)
 800942a:	f7fe fe57 	bl	80080dc <GPIO_ResetBits>
	ADCT_BGS_RELAY_BUZZER_OFF();
 800942e:	2102      	movs	r1, #2
 8009430:	489c      	ldr	r0, [pc, #624]	; (80096a4 <ADCT_BGS_Initialize_system+0x2c8>)
 8009432:	f7fe fe53 	bl	80080dc <GPIO_ResetBits>
	// Read parameters saved in EEPROM
	LowByte = ADCT_AT24C64_ReadOneByte(EEPROM_LOW_TEMPERATURE_T1_LOW );
 8009436:	2001      	movs	r0, #1
 8009438:	f7fb f91e 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800943c:	4603      	mov	r3, r0
 800943e:	b29a      	uxth	r2, r3
 8009440:	4b99      	ldr	r3, [pc, #612]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009442:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EEPROM_LOW_TEMPERATURE_T1_HIGH );
 8009444:	2002      	movs	r0, #2
 8009446:	f7fb f917 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800944a:	4603      	mov	r3, r0
 800944c:	b29a      	uxth	r2, r3
 800944e:	4b97      	ldr	r3, [pc, #604]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009450:	801a      	strh	r2, [r3, #0]

	GstSystemSetting.usLowTemperatureT1 = HighByte*256 + LowByte;
 8009452:	4b96      	ldr	r3, [pc, #600]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	b29a      	uxth	r2, r3
 800945a:	4b93      	ldr	r3, [pc, #588]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	4413      	add	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	4b93      	ldr	r3, [pc, #588]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009464:	801a      	strh	r2, [r3, #0]
	LowByte = ADCT_AT24C64_ReadOneByte(EEPROM_HIGH_TEMPERATURE_T2_LOW );
 8009466:	2003      	movs	r0, #3
 8009468:	f7fb f906 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800946c:	4603      	mov	r3, r0
 800946e:	b29a      	uxth	r2, r3
 8009470:	4b8d      	ldr	r3, [pc, #564]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009472:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EEPROM_HIGH_TEMPERATURE_T2_HIGH );
 8009474:	2004      	movs	r0, #4
 8009476:	f7fb f8ff 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800947a:	4603      	mov	r3, r0
 800947c:	b29a      	uxth	r2, r3
 800947e:	4b8b      	ldr	r3, [pc, #556]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009480:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usHighTemperatureT2 = (uint16_t)(HighByte*256 + LowByte);
 8009482:	4b8a      	ldr	r3, [pc, #552]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	b29a      	uxth	r2, r3
 800948a:	4b87      	ldr	r3, [pc, #540]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	4413      	add	r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	4b87      	ldr	r3, [pc, #540]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009494:	805a      	strh	r2, [r3, #2]

	LowByte = ADCT_AT24C64_ReadOneByte(EEPROM_LOW_HUMIDITY_H1_LOW );
 8009496:	2007      	movs	r0, #7
 8009498:	f7fb f8ee 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800949c:	4603      	mov	r3, r0
 800949e:	b29a      	uxth	r2, r3
 80094a0:	4b81      	ldr	r3, [pc, #516]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80094a2:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EEPROM_LOW_HUMIDITY_H1_HIGH);
 80094a4:	2008      	movs	r0, #8
 80094a6:	f7fb f8e7 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	4b7f      	ldr	r3, [pc, #508]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80094b0:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usLowHumidityH1 = HighByte*256 + LowByte;
 80094b2:	4b7e      	ldr	r3, [pc, #504]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	4b7b      	ldr	r3, [pc, #492]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	4413      	add	r3, r2
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	4b7b      	ldr	r3, [pc, #492]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 80094c4:	80da      	strh	r2, [r3, #6]

	LowByte = ADCT_AT24C64_ReadOneByte(EEPROM_HIGH_HUMIDITY_H2_LOW);
 80094c6:	2009      	movs	r0, #9
 80094c8:	f7fb f8d6 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80094cc:	4603      	mov	r3, r0
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	4b75      	ldr	r3, [pc, #468]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80094d2:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EEPROM_HIGH_HUMIDITY_H2_HIGH);
 80094d4:	200a      	movs	r0, #10
 80094d6:	f7fb f8cf 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80094da:	4603      	mov	r3, r0
 80094dc:	b29a      	uxth	r2, r3
 80094de:	4b73      	ldr	r3, [pc, #460]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80094e0:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usHighHumidityH2 = HighByte*256 + LowByte;
 80094e2:	4b72      	ldr	r3, [pc, #456]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	021b      	lsls	r3, r3, #8
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	4b6f      	ldr	r3, [pc, #444]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	4b6f      	ldr	r3, [pc, #444]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 80094f4:	811a      	strh	r2, [r3, #8]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_MINSWITCHINGTIME_HOUR);
 80094f6:	201f      	movs	r0, #31
 80094f8:	f7fb f8be 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	b29a      	uxth	r2, r3
 8009500:	4b69      	ldr	r3, [pc, #420]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009502:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_MINSWITCHINGTIME_MINUTE);
 8009504:	2020      	movs	r0, #32
 8009506:	f7fb f8b7 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800950a:	4603      	mov	r3, r0
 800950c:	b29a      	uxth	r2, r3
 800950e:	4b67      	ldr	r3, [pc, #412]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009510:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.ulMinSwitchingTime = LowByte*3600 + HighByte*60;
 8009512:	4b65      	ldr	r3, [pc, #404]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800951c:	fb03 f202 	mul.w	r2, r3, r2
 8009520:	4b62      	ldr	r3, [pc, #392]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	4619      	mov	r1, r3
 8009526:	460b      	mov	r3, r1
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	1a5b      	subs	r3, r3, r1
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	461a      	mov	r2, r3
 8009532:	4b5f      	ldr	r3, [pc, #380]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009534:	621a      	str	r2, [r3, #32]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_SWITCHING_HOUR);
 8009536:	200b      	movs	r0, #11
 8009538:	f7fb f89e 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800953c:	4603      	mov	r3, r0
 800953e:	b29a      	uxth	r2, r3
 8009540:	4b59      	ldr	r3, [pc, #356]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009542:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_SWITCHING_MINUTE);
 8009544:	200c      	movs	r0, #12
 8009546:	f7fb f897 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800954a:	4603      	mov	r3, r0
 800954c:	b29a      	uxth	r2, r3
 800954e:	4b57      	ldr	r3, [pc, #348]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009550:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.ulSwitchingTime = LowByte*3600 + HighByte*60;
 8009552:	4b55      	ldr	r3, [pc, #340]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800955c:	fb03 f202 	mul.w	r2, r3, r2
 8009560:	4b52      	ldr	r3, [pc, #328]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	4619      	mov	r1, r3
 8009566:	460b      	mov	r3, r1
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	1a5b      	subs	r3, r3, r1
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	461a      	mov	r2, r3
 8009572:	4b4f      	ldr	r3, [pc, #316]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009574:	61da      	str	r2, [r3, #28]
	LowByte = ADCT_AT24C64_ReadOneByte(EEPROM_FAN_TEMPERATURE_T3_LOW);
 8009576:	2005      	movs	r0, #5
 8009578:	f7fb f87e 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800957c:	4603      	mov	r3, r0
 800957e:	b29a      	uxth	r2, r3
 8009580:	4b49      	ldr	r3, [pc, #292]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009582:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EEPROM_FAN_TEMPERATURE_T3_HIGH);
 8009584:	2006      	movs	r0, #6
 8009586:	f7fb f877 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800958a:	4603      	mov	r3, r0
 800958c:	b29a      	uxth	r2, r3
 800958e:	4b47      	ldr	r3, [pc, #284]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009590:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usFanTemperatureT3 = HighByte*256 + LowByte;
 8009592:	4b46      	ldr	r3, [pc, #280]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	021b      	lsls	r3, r3, #8
 8009598:	b29a      	uxth	r2, r3
 800959a:	4b43      	ldr	r3, [pc, #268]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	4413      	add	r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	4b43      	ldr	r3, [pc, #268]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 80095a4:	809a      	strh	r2, [r3, #4]
	GstSystemSetting.ucDoorBurglarEnableAlarm = ADCT_AT24C64_ReadOneByte(EPPROM_DOORBURGLAR_ENABLEALARM);
 80095a6:	200d      	movs	r0, #13
 80095a8:	f7fb f866 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80095ac:	4603      	mov	r3, r0
 80095ae:	461a      	mov	r2, r3
 80095b0:	4b3f      	ldr	r3, [pc, #252]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 80095b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	GstSystemSetting.ucEnableAlarm = ADCT_AT24C64_ReadOneByte(EPPROM_ENABLE_ALARM);;
 80095b6:	200e      	movs	r0, #14
 80095b8:	f7fb f85e 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80095bc:	4603      	mov	r3, r0
 80095be:	461a      	mov	r2, r3
 80095c0:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 80095c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_LOW);
 80095c6:	200f      	movs	r0, #15
 80095c8:	f7fb f856 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80095cc:	4603      	mov	r3, r0
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	4b35      	ldr	r3, [pc, #212]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80095d2:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_ALARMDURATION_HIGH);
 80095d4:	2010      	movs	r0, #16
 80095d6:	f7fb f84f 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80095da:	4603      	mov	r3, r0
 80095dc:	b29a      	uxth	r2, r3
 80095de:	4b33      	ldr	r3, [pc, #204]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80095e0:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.ulAlarmDuration = HighByte*3600+ LowByte*60;
 80095e2:	4b32      	ldr	r3, [pc, #200]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80095ec:	fb03 f202 	mul.w	r2, r3, r2
 80095f0:	4b2d      	ldr	r3, [pc, #180]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	4619      	mov	r1, r3
 80095f6:	460b      	mov	r3, r1
 80095f8:	011b      	lsls	r3, r3, #4
 80095fa:	1a5b      	subs	r3, r3, r1
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	461a      	mov	r2, r3
 8009602:	4b2b      	ldr	r3, [pc, #172]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009604:	62da      	str	r2, [r3, #44]	; 0x2c
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENBATTERYVOLTAGEALARMVALUE_LOW);
 8009606:	2011      	movs	r0, #17
 8009608:	f7fb f836 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800960c:	4603      	mov	r3, r0
 800960e:	b29a      	uxth	r2, r3
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009612:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENBATTERYVOLTAGEALARMVALUE_HIGH);
 8009614:	2012      	movs	r0, #18
 8009616:	f7fb f82f 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800961a:	4603      	mov	r3, r0
 800961c:	b29a      	uxth	r2, r3
 800961e:	4b23      	ldr	r3, [pc, #140]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009620:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenBatteryVoltageAlarmValue = HighByte*256 + LowByte;
 8009622:	4b22      	ldr	r3, [pc, #136]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	b29a      	uxth	r2, r3
 800962a:	4b1f      	ldr	r3, [pc, #124]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	4413      	add	r3, r2
 8009630:	b29a      	uxth	r2, r3
 8009632:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009634:	825a      	strh	r2, [r3, #18]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENCOOLANTTEMPALARMVALUE_LOW);
 8009636:	2013      	movs	r0, #19
 8009638:	f7fb f81e 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800963c:	4603      	mov	r3, r0
 800963e:	b29a      	uxth	r2, r3
 8009640:	4b19      	ldr	r3, [pc, #100]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009642:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENCOOLANTTEMPALARMVALUE_HIGH);
 8009644:	2014      	movs	r0, #20
 8009646:	f7fb f817 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800964a:	4603      	mov	r3, r0
 800964c:	b29a      	uxth	r2, r3
 800964e:	4b17      	ldr	r3, [pc, #92]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009650:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenCoolantTempAlarmValue = HighByte*256 + LowByte;
 8009652:	4b16      	ldr	r3, [pc, #88]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	b29a      	uxth	r2, r3
 800965a:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	4413      	add	r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009664:	829a      	strh	r2, [r3, #20]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENENGINESPEEDALARMVALUE_LOW);
 8009666:	2015      	movs	r0, #21
 8009668:	f7fb f806 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800966c:	4603      	mov	r3, r0
 800966e:	b29a      	uxth	r2, r3
 8009670:	4b0d      	ldr	r3, [pc, #52]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 8009672:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENENGINESPEEDALARMVALUE_HIGH);
 8009674:	2016      	movs	r0, #22
 8009676:	f7fa ffff 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 800967a:	4603      	mov	r3, r0
 800967c:	b29a      	uxth	r2, r3
 800967e:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009680:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenEngineSpeedAlarmValue =  HighByte*256 + LowByte;
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <ADCT_BGS_Initialize_system+0x2d0>)
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	b29a      	uxth	r2, r3
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <ADCT_BGS_Initialize_system+0x2cc>)
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	4413      	add	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <ADCT_BGS_Initialize_system+0x2d4>)
 8009694:	82da      	strh	r2, [r3, #22]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENFUELLOWVALUE_LOW);
 8009696:	2017      	movs	r0, #23
 8009698:	e00c      	b.n	80096b4 <ADCT_BGS_Initialize_system+0x2d8>
 800969a:	bf00      	nop
 800969c:	40010c00 	.word	0x40010c00
 80096a0:	40011000 	.word	0x40011000
 80096a4:	40010800 	.word	0x40010800
 80096a8:	20002476 	.word	0x20002476
 80096ac:	20002478 	.word	0x20002478
 80096b0:	2000250c 	.word	0x2000250c
 80096b4:	f7fa ffe0 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80096b8:	4603      	mov	r3, r0
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 80096be:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENFUELLOWVALUE_HIGH);
 80096c0:	2018      	movs	r0, #24
 80096c2:	f7fa ffd9 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80096c6:	4603      	mov	r3, r0
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	4b2c      	ldr	r3, [pc, #176]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 80096cc:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenFuelLowValue = HighByte*256 + LowByte;
 80096ce:	4b2b      	ldr	r3, [pc, #172]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	4b28      	ldr	r3, [pc, #160]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	4413      	add	r3, r2
 80096dc:	b29a      	uxth	r2, r3
 80096de:	4b28      	ldr	r3, [pc, #160]	; (8009780 <ADCT_BGS_Initialize_system+0x3a4>)
 80096e0:	81da      	strh	r2, [r3, #14]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENOILPRESSUREALARMVALUE_LOW);
 80096e2:	2019      	movs	r0, #25
 80096e4:	f7fa ffc8 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80096e8:	4603      	mov	r3, r0
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 80096ee:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENOILPRESSUREALARMVALUE_HIGH);
 80096f0:	201a      	movs	r0, #26
 80096f2:	f7fa ffc1 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 80096f6:	4603      	mov	r3, r0
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	4b20      	ldr	r3, [pc, #128]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 80096fc:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenOilPressureAlarmValue = HighByte*256 + LowByte;
 80096fe:	4b1f      	ldr	r3, [pc, #124]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	021b      	lsls	r3, r3, #8
 8009704:	b29a      	uxth	r2, r3
 8009706:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	4413      	add	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <ADCT_BGS_Initialize_system+0x3a4>)
 8009710:	831a      	strh	r2, [r3, #24]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENVOLTAGEALARMVALUE_LOW);
 8009712:	201b      	movs	r0, #27
 8009714:	f7fa ffb0 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8009718:	4603      	mov	r3, r0
 800971a:	b29a      	uxth	r2, r3
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 800971e:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_GENVOLTAGEALARMVALUE_HIGH);
 8009720:	201c      	movs	r0, #28
 8009722:	f7fa ffa9 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8009726:	4603      	mov	r3, r0
 8009728:	b29a      	uxth	r2, r3
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 800972c:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usGenVoltageAlarmValue = HighByte*256 + LowByte;
 800972e:	4b13      	ldr	r3, [pc, #76]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	021b      	lsls	r3, r3, #8
 8009734:	b29a      	uxth	r2, r3
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	4413      	add	r3, r2
 800973c:	b29a      	uxth	r2, r3
 800973e:	4b10      	ldr	r3, [pc, #64]	; (8009780 <ADCT_BGS_Initialize_system+0x3a4>)
 8009740:	821a      	strh	r2, [r3, #16]
	LowByte = ADCT_AT24C64_ReadOneByte(EPPROM_LOWMAINVOLTAGE_LOW);
 8009742:	201d      	movs	r0, #29
 8009744:	f7fa ff98 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8009748:	4603      	mov	r3, r0
 800974a:	b29a      	uxth	r2, r3
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 800974e:	801a      	strh	r2, [r3, #0]
	HighByte = ADCT_AT24C64_ReadOneByte(EPPROM_LOWMAINVOLTAGE_HIGH);
 8009750:	201e      	movs	r0, #30
 8009752:	f7fa ff91 	bl	8004678 <ADCT_AT24C64_ReadOneByte>
 8009756:	4603      	mov	r3, r0
 8009758:	b29a      	uxth	r2, r3
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 800975c:	801a      	strh	r2, [r3, #0]
	GstSystemSetting.usLowMainVoltage = HighByte*256 + LowByte;
 800975e:	4b07      	ldr	r3, [pc, #28]	; (800977c <ADCT_BGS_Initialize_system+0x3a0>)
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	b29a      	uxth	r2, r3
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <ADCT_BGS_Initialize_system+0x39c>)
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	4413      	add	r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	4b04      	ldr	r3, [pc, #16]	; (8009780 <ADCT_BGS_Initialize_system+0x3a4>)
 8009770:	815a      	strh	r2, [r3, #10]

}
 8009772:	bf00      	nop
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20002476 	.word	0x20002476
 800977c:	20002478 	.word	0x20002478
 8009780:	2000250c 	.word	0x2000250c

08009784 <Restart_DHT22>:
	ADCT_AT24C64_WriteOneBytes(EEPROM_ALARM_ID_LOW	, (uint8_t)(DEFAULT_ALARM_ID%256));
	ADCT_AT24C64_WriteOneBytes(EEPROM_ALARM_ID_HIGH	,(uint8_t)(DEFAULT_ALARM_ID/256));
}

void Restart_DHT22(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
	if((g_ADCT_BGS_Current_RTC.RTC_Hour == 20)&&(g_ADCT_BGS_Current_RTC.RTC_Min == 30)&& (g_ADCT_BGS_Current_RTC.RTC_Sec < 30))
 8009788:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <Restart_DHT22+0x4c>)
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	2b14      	cmp	r3, #20
 800978e:	d112      	bne.n	80097b6 <Restart_DHT22+0x32>
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <Restart_DHT22+0x4c>)
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b1e      	cmp	r3, #30
 8009796:	d10e      	bne.n	80097b6 <Restart_DHT22+0x32>
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <Restart_DHT22+0x4c>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b1d      	cmp	r3, #29
 800979e:	d80a      	bhi.n	80097b6 <Restart_DHT22+0x32>
	{
		DHT22_01_PWR_OFF();
 80097a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097a4:	480b      	ldr	r0, [pc, #44]	; (80097d4 <Restart_DHT22+0x50>)
 80097a6:	f7fe fc99 	bl	80080dc <GPIO_ResetBits>
		DHT22_02_PWR_OFF();
 80097aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097ae:	480a      	ldr	r0, [pc, #40]	; (80097d8 <Restart_DHT22+0x54>)
 80097b0:	f7fe fc94 	bl	80080dc <GPIO_ResetBits>
 80097b4:	e009      	b.n	80097ca <Restart_DHT22+0x46>
	}
	else
	{
		DHT22_01_PWR_ON();
 80097b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097ba:	4806      	ldr	r0, [pc, #24]	; (80097d4 <Restart_DHT22+0x50>)
 80097bc:	f7fe fc80 	bl	80080c0 <GPIO_SetBits>
		DHT22_02_PWR_ON();
 80097c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097c4:	4804      	ldr	r0, [pc, #16]	; (80097d8 <Restart_DHT22+0x54>)
 80097c6:	f7fe fc7b 	bl	80080c0 <GPIO_SetBits>
	}
}
 80097ca:	bf00      	nop
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200024f4 	.word	0x200024f4
 80097d4:	40010800 	.word	0x40010800
 80097d8:	40010c00 	.word	0x40010c00

080097dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80097dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80097e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80097e2:	e003      	b.n	80097ec <LoopCopyDataInit>

080097e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80097e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80097e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80097ea:	3104      	adds	r1, #4

080097ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80097ec:	480b      	ldr	r0, [pc, #44]	; (800981c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80097ee:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80097f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80097f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80097f4:	d3f6      	bcc.n	80097e4 <CopyDataInit>
	ldr	r2, =_sbss
 80097f6:	4a0b      	ldr	r2, [pc, #44]	; (8009824 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80097f8:	e002      	b.n	8009800 <LoopFillZerobss>

080097fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80097fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80097fc:	f842 3b04 	str.w	r3, [r2], #4

08009800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009800:	4b09      	ldr	r3, [pc, #36]	; (8009828 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8009802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009804:	d3f9      	bcc.n	80097fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009806:	f000 f841 	bl	800988c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800980a:	f000 f8f9 	bl	8009a00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800980e:	f7ff fd6f 	bl	80092f0 <main>
	bx	lr
 8009812:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009814:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8009818:	0800ac08 	.word	0x0800ac08
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800981c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009820:	20000200 	.word	0x20000200
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8009824:	20000200 	.word	0x20000200
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8009828:	20002744 	.word	0x20002744

0800982c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800982c:	e7fe      	b.n	800982c <ADC1_2_IRQHandler>
	...

08009830 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
}
 8009834:	bf00      	nop
 8009836:	46bd      	mov	sp, r7
 8009838:	bc80      	pop	{r7}
 800983a:	4770      	bx	lr

0800983c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8009840:	e7fe      	b.n	8009840 <HardFault_Handler+0x4>
 8009842:	bf00      	nop

08009844 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8009848:	e7fe      	b.n	8009848 <MemManage_Handler+0x4>
 800984a:	bf00      	nop

0800984c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8009850:	e7fe      	b.n	8009850 <BusFault_Handler+0x4>
 8009852:	bf00      	nop

08009854 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8009858:	e7fe      	b.n	8009858 <UsageFault_Handler+0x4>
 800985a:	bf00      	nop

0800985c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
}
 8009860:	bf00      	nop
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr

08009874 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8009884:	f7fd fdae 	bl	80073e4 <HAL_IncTick>
}
 8009888:	bf00      	nop
 800988a:	bd80      	pop	{r7, pc}

0800988c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009890:	4a15      	ldr	r2, [pc, #84]	; (80098e8 <SystemInit+0x5c>)
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <SystemInit+0x5c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f043 0301 	orr.w	r3, r3, #1
 800989a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800989c:	4912      	ldr	r1, [pc, #72]	; (80098e8 <SystemInit+0x5c>)
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <SystemInit+0x5c>)
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <SystemInit+0x60>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80098a8:	4a0f      	ldr	r2, [pc, #60]	; (80098e8 <SystemInit+0x5c>)
 80098aa:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <SystemInit+0x5c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80098b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098b8:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <SystemInit+0x5c>)
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <SystemInit+0x5c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <SystemInit+0x5c>)
 80098c6:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <SystemInit+0x5c>)
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80098ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <SystemInit+0x5c>)
 80098d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80098d6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80098d8:	f000 f80c 	bl	80098f4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <SystemInit+0x64>)
 80098de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80098e4:	bf00      	nop
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40021000 	.word	0x40021000
 80098ec:	f8ff0000 	.word	0xf8ff0000
 80098f0:	e000ed00 	.word	0xe000ed00

080098f4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80098f8:	f000 f802 	bl	8009900 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80098fc:	bf00      	nop
 80098fe:	bd80      	pop	{r7, pc}

08009900 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	2300      	movs	r3, #0
 800990c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800990e:	4a3a      	ldr	r2, [pc, #232]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009910:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009918:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800991a:	4b37      	ldr	r3, [pc, #220]	; (80099f8 <SetSysClockTo72+0xf8>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009922:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3301      	adds	r3, #1
 8009928:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d103      	bne.n	8009938 <SetSysClockTo72+0x38>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009936:	d1f0      	bne.n	800991a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009938:	4b2f      	ldr	r3, [pc, #188]	; (80099f8 <SetSysClockTo72+0xf8>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8009944:	2301      	movs	r3, #1
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	e001      	b.n	800994e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d14b      	bne.n	80099ec <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009954:	4a29      	ldr	r2, [pc, #164]	; (80099fc <SetSysClockTo72+0xfc>)
 8009956:	4b29      	ldr	r3, [pc, #164]	; (80099fc <SetSysClockTo72+0xfc>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f043 0310 	orr.w	r3, r3, #16
 800995e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009960:	4a26      	ldr	r2, [pc, #152]	; (80099fc <SetSysClockTo72+0xfc>)
 8009962:	4b26      	ldr	r3, [pc, #152]	; (80099fc <SetSysClockTo72+0xfc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800996c:	4a23      	ldr	r2, [pc, #140]	; (80099fc <SetSysClockTo72+0xfc>)
 800996e:	4b23      	ldr	r3, [pc, #140]	; (80099fc <SetSysClockTo72+0xfc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f043 0302 	orr.w	r3, r3, #2
 8009976:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009978:	4a1f      	ldr	r2, [pc, #124]	; (80099f8 <SetSysClockTo72+0xf8>)
 800997a:	4b1f      	ldr	r3, [pc, #124]	; (80099f8 <SetSysClockTo72+0xf8>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009980:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009982:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009988:	4a1b      	ldr	r2, [pc, #108]	; (80099f8 <SetSysClockTo72+0xf8>)
 800998a:	4b1b      	ldr	r3, [pc, #108]	; (80099f8 <SetSysClockTo72+0xf8>)
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009992:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009994:	4a18      	ldr	r2, [pc, #96]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009996:	4b18      	ldr	r3, [pc, #96]	; (80099f8 <SetSysClockTo72+0xf8>)
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800999e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80099a0:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80099aa:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80099ac:	4a12      	ldr	r2, [pc, #72]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099ae:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099b6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80099b8:	bf00      	nop
 80099ba:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f9      	beq.n	80099ba <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80099c6:	4a0c      	ldr	r2, [pc, #48]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099c8:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80099d2:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099d4:	4b08      	ldr	r3, [pc, #32]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f043 0302 	orr.w	r3, r3, #2
 80099dc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80099de:	bf00      	nop
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <SetSysClockTo72+0xf8>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f003 030c 	and.w	r3, r3, #12
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d1f9      	bne.n	80099e0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40021000 	.word	0x40021000
 80099fc:	40022000 	.word	0x40022000

08009a00 <__libc_init_array>:
 8009a00:	4b0e      	ldr	r3, [pc, #56]	; (8009a3c <__libc_init_array+0x3c>)
 8009a02:	b570      	push	{r4, r5, r6, lr}
 8009a04:	461e      	mov	r6, r3
 8009a06:	4c0e      	ldr	r4, [pc, #56]	; (8009a40 <__libc_init_array+0x40>)
 8009a08:	2500      	movs	r5, #0
 8009a0a:	1ae4      	subs	r4, r4, r3
 8009a0c:	10a4      	asrs	r4, r4, #2
 8009a0e:	42a5      	cmp	r5, r4
 8009a10:	d004      	beq.n	8009a1c <__libc_init_array+0x1c>
 8009a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a16:	4798      	blx	r3
 8009a18:	3501      	adds	r5, #1
 8009a1a:	e7f8      	b.n	8009a0e <__libc_init_array+0xe>
 8009a1c:	f000 ff7a 	bl	800a914 <_init>
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <__libc_init_array+0x44>)
 8009a22:	4c09      	ldr	r4, [pc, #36]	; (8009a48 <__libc_init_array+0x48>)
 8009a24:	461e      	mov	r6, r3
 8009a26:	1ae4      	subs	r4, r4, r3
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	42a5      	cmp	r5, r4
 8009a2e:	d004      	beq.n	8009a3a <__libc_init_array+0x3a>
 8009a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a34:	4798      	blx	r3
 8009a36:	3501      	adds	r5, #1
 8009a38:	e7f8      	b.n	8009a2c <__libc_init_array+0x2c>
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	0800ac00 	.word	0x0800ac00
 8009a40:	0800ac00 	.word	0x0800ac00
 8009a44:	0800ac00 	.word	0x0800ac00
 8009a48:	0800ac04 	.word	0x0800ac04

08009a4c <malloc>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <malloc+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f000 b863 	b.w	8009b1c <_malloc_r>
 8009a56:	bf00      	nop
 8009a58:	200001fc 	.word	0x200001fc

08009a5c <memcpy>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	1e43      	subs	r3, r0, #1
 8009a60:	440a      	add	r2, r1
 8009a62:	4291      	cmp	r1, r2
 8009a64:	d004      	beq.n	8009a70 <memcpy+0x14>
 8009a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a6e:	e7f8      	b.n	8009a62 <memcpy+0x6>
 8009a70:	bd10      	pop	{r4, pc}

08009a72 <memset>:
 8009a72:	4603      	mov	r3, r0
 8009a74:	4402      	add	r2, r0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d002      	beq.n	8009a80 <memset+0xe>
 8009a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7e:	e7fa      	b.n	8009a76 <memset+0x4>
 8009a80:	4770      	bx	lr
	...

08009a84 <_free_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4605      	mov	r5, r0
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	d044      	beq.n	8009b16 <_free_r+0x92>
 8009a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a90:	1f0c      	subs	r4, r1, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bfb8      	it	lt
 8009a96:	18e4      	addlt	r4, r4, r3
 8009a98:	f000 f990 	bl	8009dbc <__malloc_lock>
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <_free_r+0x94>)
 8009a9e:	6813      	ldr	r3, [r2, #0]
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	b913      	cbnz	r3, 8009aaa <_free_r+0x26>
 8009aa4:	6063      	str	r3, [r4, #4]
 8009aa6:	6014      	str	r4, [r2, #0]
 8009aa8:	e030      	b.n	8009b0c <_free_r+0x88>
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	d90d      	bls.n	8009aca <_free_r+0x46>
 8009aae:	6822      	ldr	r2, [r4, #0]
 8009ab0:	18a0      	adds	r0, r4, r2
 8009ab2:	4283      	cmp	r3, r0
 8009ab4:	bf01      	itttt	eq
 8009ab6:	6818      	ldreq	r0, [r3, #0]
 8009ab8:	685b      	ldreq	r3, [r3, #4]
 8009aba:	1812      	addeq	r2, r2, r0
 8009abc:	6022      	streq	r2, [r4, #0]
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	600c      	str	r4, [r1, #0]
 8009ac2:	e023      	b.n	8009b0c <_free_r+0x88>
 8009ac4:	42a2      	cmp	r2, r4
 8009ac6:	d803      	bhi.n	8009ad0 <_free_r+0x4c>
 8009ac8:	4613      	mov	r3, r2
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	d1f9      	bne.n	8009ac4 <_free_r+0x40>
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	1819      	adds	r1, r3, r0
 8009ad4:	42a1      	cmp	r1, r4
 8009ad6:	d10b      	bne.n	8009af0 <_free_r+0x6c>
 8009ad8:	6821      	ldr	r1, [r4, #0]
 8009ada:	4401      	add	r1, r0
 8009adc:	1858      	adds	r0, r3, r1
 8009ade:	4282      	cmp	r2, r0
 8009ae0:	6019      	str	r1, [r3, #0]
 8009ae2:	d113      	bne.n	8009b0c <_free_r+0x88>
 8009ae4:	6810      	ldr	r0, [r2, #0]
 8009ae6:	6852      	ldr	r2, [r2, #4]
 8009ae8:	4401      	add	r1, r0
 8009aea:	6019      	str	r1, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	e00d      	b.n	8009b0c <_free_r+0x88>
 8009af0:	d902      	bls.n	8009af8 <_free_r+0x74>
 8009af2:	230c      	movs	r3, #12
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	e009      	b.n	8009b0c <_free_r+0x88>
 8009af8:	6821      	ldr	r1, [r4, #0]
 8009afa:	1860      	adds	r0, r4, r1
 8009afc:	4282      	cmp	r2, r0
 8009afe:	bf01      	itttt	eq
 8009b00:	6810      	ldreq	r0, [r2, #0]
 8009b02:	6852      	ldreq	r2, [r2, #4]
 8009b04:	1809      	addeq	r1, r1, r0
 8009b06:	6021      	streq	r1, [r4, #0]
 8009b08:	6062      	str	r2, [r4, #4]
 8009b0a:	605c      	str	r4, [r3, #4]
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b12:	f000 b954 	b.w	8009dbe <__malloc_unlock>
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20002480 	.word	0x20002480

08009b1c <_malloc_r>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	1ccd      	adds	r5, r1, #3
 8009b20:	f025 0503 	bic.w	r5, r5, #3
 8009b24:	3508      	adds	r5, #8
 8009b26:	2d0c      	cmp	r5, #12
 8009b28:	bf38      	it	cc
 8009b2a:	250c      	movcc	r5, #12
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	db01      	blt.n	8009b36 <_malloc_r+0x1a>
 8009b32:	42a9      	cmp	r1, r5
 8009b34:	d902      	bls.n	8009b3c <_malloc_r+0x20>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6033      	str	r3, [r6, #0]
 8009b3a:	e046      	b.n	8009bca <_malloc_r+0xae>
 8009b3c:	f000 f93e 	bl	8009dbc <__malloc_lock>
 8009b40:	4b23      	ldr	r3, [pc, #140]	; (8009bd0 <_malloc_r+0xb4>)
 8009b42:	681c      	ldr	r4, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	4621      	mov	r1, r4
 8009b48:	b1a1      	cbz	r1, 8009b74 <_malloc_r+0x58>
 8009b4a:	680b      	ldr	r3, [r1, #0]
 8009b4c:	1b5b      	subs	r3, r3, r5
 8009b4e:	d40e      	bmi.n	8009b6e <_malloc_r+0x52>
 8009b50:	2b0b      	cmp	r3, #11
 8009b52:	d903      	bls.n	8009b5c <_malloc_r+0x40>
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	18cc      	adds	r4, r1, r3
 8009b58:	50cd      	str	r5, [r1, r3]
 8009b5a:	e01e      	b.n	8009b9a <_malloc_r+0x7e>
 8009b5c:	428c      	cmp	r4, r1
 8009b5e:	bf0b      	itete	eq
 8009b60:	6863      	ldreq	r3, [r4, #4]
 8009b62:	684b      	ldrne	r3, [r1, #4]
 8009b64:	6013      	streq	r3, [r2, #0]
 8009b66:	6063      	strne	r3, [r4, #4]
 8009b68:	bf18      	it	ne
 8009b6a:	460c      	movne	r4, r1
 8009b6c:	e015      	b.n	8009b9a <_malloc_r+0x7e>
 8009b6e:	460c      	mov	r4, r1
 8009b70:	6849      	ldr	r1, [r1, #4]
 8009b72:	e7e9      	b.n	8009b48 <_malloc_r+0x2c>
 8009b74:	4c17      	ldr	r4, [pc, #92]	; (8009bd4 <_malloc_r+0xb8>)
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	b91b      	cbnz	r3, 8009b82 <_malloc_r+0x66>
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f000 f844 	bl	8009c08 <_sbrk_r>
 8009b80:	6020      	str	r0, [r4, #0]
 8009b82:	4629      	mov	r1, r5
 8009b84:	4630      	mov	r0, r6
 8009b86:	f000 f83f 	bl	8009c08 <_sbrk_r>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d018      	beq.n	8009bc0 <_malloc_r+0xa4>
 8009b8e:	1cc4      	adds	r4, r0, #3
 8009b90:	f024 0403 	bic.w	r4, r4, #3
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d10d      	bne.n	8009bb4 <_malloc_r+0x98>
 8009b98:	6025      	str	r5, [r4, #0]
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 f90f 	bl	8009dbe <__malloc_unlock>
 8009ba0:	f104 000b 	add.w	r0, r4, #11
 8009ba4:	1d23      	adds	r3, r4, #4
 8009ba6:	f020 0007 	bic.w	r0, r0, #7
 8009baa:	1ac3      	subs	r3, r0, r3
 8009bac:	d00e      	beq.n	8009bcc <_malloc_r+0xb0>
 8009bae:	425a      	negs	r2, r3
 8009bb0:	50e2      	str	r2, [r4, r3]
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	1a21      	subs	r1, r4, r0
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f826 	bl	8009c08 <_sbrk_r>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d1eb      	bne.n	8009b98 <_malloc_r+0x7c>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f8fa 	bl	8009dbe <__malloc_unlock>
 8009bca:	2000      	movs	r0, #0
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
 8009bce:	bf00      	nop
 8009bd0:	20002480 	.word	0x20002480
 8009bd4:	2000247c 	.word	0x2000247c

08009bd8 <iprintf>:
 8009bd8:	b40f      	push	{r0, r1, r2, r3}
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <iprintf+0x2c>)
 8009bdc:	b513      	push	{r0, r1, r4, lr}
 8009bde:	681c      	ldr	r4, [r3, #0]
 8009be0:	b124      	cbz	r4, 8009bec <iprintf+0x14>
 8009be2:	69a3      	ldr	r3, [r4, #24]
 8009be4:	b913      	cbnz	r3, 8009bec <iprintf+0x14>
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f85e 	bl	8009ca8 <__sinit>
 8009bec:	ab05      	add	r3, sp, #20
 8009bee:	9a04      	ldr	r2, [sp, #16]
 8009bf0:	68a1      	ldr	r1, [r4, #8]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f90b 	bl	8009e10 <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c00:	b004      	add	sp, #16
 8009c02:	4770      	bx	lr
 8009c04:	200001fc 	.word	0x200001fc

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4c06      	ldr	r4, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4605      	mov	r5, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	f000 fe68 	bl	800a8e8 <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20002740 	.word	0x20002740

08009c28 <_cleanup_r>:
 8009c28:	4901      	ldr	r1, [pc, #4]	; (8009c30 <_cleanup_r+0x8>)
 8009c2a:	f000 b8a9 	b.w	8009d80 <_fwalk_reent>
 8009c2e:	bf00      	nop
 8009c30:	0800a6dd 	.word	0x0800a6dd

08009c34 <std.isra.0>:
 8009c34:	b510      	push	{r4, lr}
 8009c36:	4604      	mov	r4, r0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6003      	str	r3, [r0, #0]
 8009c3c:	6043      	str	r3, [r0, #4]
 8009c3e:	6083      	str	r3, [r0, #8]
 8009c40:	8181      	strh	r1, [r0, #12]
 8009c42:	6643      	str	r3, [r0, #100]	; 0x64
 8009c44:	81c2      	strh	r2, [r0, #14]
 8009c46:	6103      	str	r3, [r0, #16]
 8009c48:	6143      	str	r3, [r0, #20]
 8009c4a:	6183      	str	r3, [r0, #24]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	2208      	movs	r2, #8
 8009c50:	305c      	adds	r0, #92	; 0x5c
 8009c52:	f7ff ff0e 	bl	8009a72 <memset>
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std.isra.0+0x38>)
 8009c58:	6224      	str	r4, [r4, #32]
 8009c5a:	6263      	str	r3, [r4, #36]	; 0x24
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <std.isra.0+0x3c>)
 8009c5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <std.isra.0+0x40>)
 8009c62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <std.isra.0+0x44>)
 8009c66:	6323      	str	r3, [r4, #48]	; 0x30
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	bf00      	nop
 8009c6c:	0800a381 	.word	0x0800a381
 8009c70:	0800a3a3 	.word	0x0800a3a3
 8009c74:	0800a3db 	.word	0x0800a3db
 8009c78:	0800a3ff 	.word	0x0800a3ff

08009c7c <__sfmoreglue>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	2368      	movs	r3, #104	; 0x68
 8009c80:	1e4d      	subs	r5, r1, #1
 8009c82:	435d      	muls	r5, r3
 8009c84:	460e      	mov	r6, r1
 8009c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c8a:	f7ff ff47 	bl	8009b1c <_malloc_r>
 8009c8e:	4604      	mov	r4, r0
 8009c90:	b140      	cbz	r0, 8009ca4 <__sfmoreglue+0x28>
 8009c92:	2100      	movs	r1, #0
 8009c94:	e880 0042 	stmia.w	r0, {r1, r6}
 8009c98:	300c      	adds	r0, #12
 8009c9a:	60a0      	str	r0, [r4, #8]
 8009c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca0:	f7ff fee7 	bl	8009a72 <memset>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}

08009ca8 <__sinit>:
 8009ca8:	6983      	ldr	r3, [r0, #24]
 8009caa:	b510      	push	{r4, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	bb33      	cbnz	r3, 8009cfe <__sinit+0x56>
 8009cb0:	6483      	str	r3, [r0, #72]	; 0x48
 8009cb2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8009cb6:	4b12      	ldr	r3, [pc, #72]	; (8009d00 <__sinit+0x58>)
 8009cb8:	4a12      	ldr	r2, [pc, #72]	; (8009d04 <__sinit+0x5c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	bf04      	itt	eq
 8009cc2:	2301      	moveq	r3, #1
 8009cc4:	6183      	streq	r3, [r0, #24]
 8009cc6:	f000 f81f 	bl	8009d08 <__sfp>
 8009cca:	6060      	str	r0, [r4, #4]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 f81b 	bl	8009d08 <__sfp>
 8009cd2:	60a0      	str	r0, [r4, #8]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 f817 	bl	8009d08 <__sfp>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	60e0      	str	r0, [r4, #12]
 8009cde:	2104      	movs	r1, #4
 8009ce0:	6860      	ldr	r0, [r4, #4]
 8009ce2:	f7ff ffa7 	bl	8009c34 <std.isra.0>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	2109      	movs	r1, #9
 8009cea:	68a0      	ldr	r0, [r4, #8]
 8009cec:	f7ff ffa2 	bl	8009c34 <std.isra.0>
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	2112      	movs	r1, #18
 8009cf4:	68e0      	ldr	r0, [r4, #12]
 8009cf6:	f7ff ff9d 	bl	8009c34 <std.isra.0>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61a3      	str	r3, [r4, #24]
 8009cfe:	bd10      	pop	{r4, pc}
 8009d00:	0800abc8 	.word	0x0800abc8
 8009d04:	08009c29 	.word	0x08009c29

08009d08 <__sfp>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <__sfp+0x74>)
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	681e      	ldr	r6, [r3, #0]
 8009d10:	69b3      	ldr	r3, [r6, #24]
 8009d12:	b913      	cbnz	r3, 8009d1a <__sfp+0x12>
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ffc7 	bl	8009ca8 <__sinit>
 8009d1a:	3648      	adds	r6, #72	; 0x48
 8009d1c:	68b4      	ldr	r4, [r6, #8]
 8009d1e:	6873      	ldr	r3, [r6, #4]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	d404      	bmi.n	8009d2e <__sfp+0x26>
 8009d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d28:	b17d      	cbz	r5, 8009d4a <__sfp+0x42>
 8009d2a:	3468      	adds	r4, #104	; 0x68
 8009d2c:	e7f8      	b.n	8009d20 <__sfp+0x18>
 8009d2e:	6833      	ldr	r3, [r6, #0]
 8009d30:	b10b      	cbz	r3, 8009d36 <__sfp+0x2e>
 8009d32:	6836      	ldr	r6, [r6, #0]
 8009d34:	e7f2      	b.n	8009d1c <__sfp+0x14>
 8009d36:	2104      	movs	r1, #4
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7ff ff9f 	bl	8009c7c <__sfmoreglue>
 8009d3e:	6030      	str	r0, [r6, #0]
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1f6      	bne.n	8009d32 <__sfp+0x2a>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d4e:	81e3      	strh	r3, [r4, #14]
 8009d50:	2301      	movs	r3, #1
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	6665      	str	r5, [r4, #100]	; 0x64
 8009d56:	6025      	str	r5, [r4, #0]
 8009d58:	60a5      	str	r5, [r4, #8]
 8009d5a:	6065      	str	r5, [r4, #4]
 8009d5c:	6125      	str	r5, [r4, #16]
 8009d5e:	6165      	str	r5, [r4, #20]
 8009d60:	61a5      	str	r5, [r4, #24]
 8009d62:	2208      	movs	r2, #8
 8009d64:	4629      	mov	r1, r5
 8009d66:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d6a:	f7ff fe82 	bl	8009a72 <memset>
 8009d6e:	6365      	str	r5, [r4, #52]	; 0x34
 8009d70:	63a5      	str	r5, [r4, #56]	; 0x38
 8009d72:	64a5      	str	r5, [r4, #72]	; 0x48
 8009d74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009d76:	4620      	mov	r0, r4
 8009d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800abc8 	.word	0x0800abc8

08009d80 <_fwalk_reent>:
 8009d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	4680      	mov	r8, r0
 8009d86:	4689      	mov	r9, r1
 8009d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	b194      	cbz	r4, 8009db6 <_fwalk_reent+0x36>
 8009d90:	68a5      	ldr	r5, [r4, #8]
 8009d92:	6867      	ldr	r7, [r4, #4]
 8009d94:	3f01      	subs	r7, #1
 8009d96:	d40c      	bmi.n	8009db2 <_fwalk_reent+0x32>
 8009d98:	89ab      	ldrh	r3, [r5, #12]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d907      	bls.n	8009dae <_fwalk_reent+0x2e>
 8009d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da2:	3301      	adds	r3, #1
 8009da4:	d003      	beq.n	8009dae <_fwalk_reent+0x2e>
 8009da6:	4629      	mov	r1, r5
 8009da8:	4640      	mov	r0, r8
 8009daa:	47c8      	blx	r9
 8009dac:	4306      	orrs	r6, r0
 8009dae:	3568      	adds	r5, #104	; 0x68
 8009db0:	e7f0      	b.n	8009d94 <_fwalk_reent+0x14>
 8009db2:	6824      	ldr	r4, [r4, #0]
 8009db4:	e7eb      	b.n	8009d8e <_fwalk_reent+0xe>
 8009db6:	4630      	mov	r0, r6
 8009db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009dbc <__malloc_lock>:
 8009dbc:	4770      	bx	lr

08009dbe <__malloc_unlock>:
 8009dbe:	4770      	bx	lr

08009dc0 <__sfputc_r>:
 8009dc0:	6893      	ldr	r3, [r2, #8]
 8009dc2:	b410      	push	{r4}
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	6093      	str	r3, [r2, #8]
 8009dca:	da08      	bge.n	8009dde <__sfputc_r+0x1e>
 8009dcc:	6994      	ldr	r4, [r2, #24]
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	db02      	blt.n	8009dd8 <__sfputc_r+0x18>
 8009dd2:	b2cb      	uxtb	r3, r1
 8009dd4:	2b0a      	cmp	r3, #10
 8009dd6:	d102      	bne.n	8009dde <__sfputc_r+0x1e>
 8009dd8:	bc10      	pop	{r4}
 8009dda:	f000 bb15 	b.w	800a408 <__swbuf_r>
 8009dde:	6813      	ldr	r3, [r2, #0]
 8009de0:	1c58      	adds	r0, r3, #1
 8009de2:	6010      	str	r0, [r2, #0]
 8009de4:	7019      	strb	r1, [r3, #0]
 8009de6:	b2c8      	uxtb	r0, r1
 8009de8:	bc10      	pop	{r4}
 8009dea:	4770      	bx	lr

08009dec <__sfputs_r>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	4614      	mov	r4, r2
 8009df4:	18d5      	adds	r5, r2, r3
 8009df6:	42ac      	cmp	r4, r5
 8009df8:	d008      	beq.n	8009e0c <__sfputs_r+0x20>
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff ffdd 	bl	8009dc0 <__sfputc_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d1f5      	bne.n	8009df6 <__sfputs_r+0xa>
 8009e0a:	e000      	b.n	8009e0e <__sfputs_r+0x22>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e10 <_vfiprintf_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	b09d      	sub	sp, #116	; 0x74
 8009e16:	460c      	mov	r4, r1
 8009e18:	4617      	mov	r7, r2
 8009e1a:	9303      	str	r3, [sp, #12]
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	b118      	cbz	r0, 8009e28 <_vfiprintf_r+0x18>
 8009e20:	6983      	ldr	r3, [r0, #24]
 8009e22:	b90b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x18>
 8009e24:	f7ff ff40 	bl	8009ca8 <__sinit>
 8009e28:	4b7f      	ldr	r3, [pc, #508]	; (800a028 <_vfiprintf_r+0x218>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <_vfiprintf_r+0x22>
 8009e2e:	6874      	ldr	r4, [r6, #4]
 8009e30:	e008      	b.n	8009e44 <_vfiprintf_r+0x34>
 8009e32:	4b7e      	ldr	r3, [pc, #504]	; (800a02c <_vfiprintf_r+0x21c>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	d101      	bne.n	8009e3c <_vfiprintf_r+0x2c>
 8009e38:	68b4      	ldr	r4, [r6, #8]
 8009e3a:	e003      	b.n	8009e44 <_vfiprintf_r+0x34>
 8009e3c:	4b7c      	ldr	r3, [pc, #496]	; (800a030 <_vfiprintf_r+0x220>)
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	bf08      	it	eq
 8009e42:	68f4      	ldreq	r4, [r6, #12]
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	0718      	lsls	r0, r3, #28
 8009e48:	d50c      	bpl.n	8009e64 <_vfiprintf_r+0x54>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	b153      	cbz	r3, 8009e64 <_vfiprintf_r+0x54>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9309      	str	r3, [sp, #36]	; 0x24
 8009e52:	2320      	movs	r3, #32
 8009e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e58:	2330      	movs	r3, #48	; 0x30
 8009e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e5e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800a034 <_vfiprintf_r+0x224>
 8009e62:	e044      	b.n	8009eee <_vfiprintf_r+0xde>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4630      	mov	r0, r6
 8009e68:	f000 fb34 	bl	800a4d4 <__swsetup_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0ee      	beq.n	8009e4e <_vfiprintf_r+0x3e>
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	e0d5      	b.n	800a022 <_vfiprintf_r+0x212>
 8009e76:	9a03      	ldr	r2, [sp, #12]
 8009e78:	1d11      	adds	r1, r2, #4
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	f280 808c 	bge.w	8009f9c <_vfiprintf_r+0x18c>
 8009e84:	4252      	negs	r2, r2
 8009e86:	f043 0002 	orr.w	r0, r3, #2
 8009e8a:	9207      	str	r2, [sp, #28]
 8009e8c:	9004      	str	r0, [sp, #16]
 8009e8e:	f898 3000 	ldrb.w	r3, [r8]
 8009e92:	2b2e      	cmp	r3, #46	; 0x2e
 8009e94:	f000 8084 	beq.w	8009fa0 <_vfiprintf_r+0x190>
 8009e98:	2203      	movs	r2, #3
 8009e9a:	f898 1000 	ldrb.w	r1, [r8]
 8009e9e:	4865      	ldr	r0, [pc, #404]	; (800a034 <_vfiprintf_r+0x224>)
 8009ea0:	f000 fcb8 	bl	800a814 <memchr>
 8009ea4:	b148      	cbz	r0, 8009eba <_vfiprintf_r+0xaa>
 8009ea6:	2340      	movs	r3, #64	; 0x40
 8009ea8:	ebcb 0000 	rsb	r0, fp, r0
 8009eac:	fa03 f000 	lsl.w	r0, r3, r0
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	f108 0801 	add.w	r8, r8, #1
 8009eb6:	4318      	orrs	r0, r3
 8009eb8:	9004      	str	r0, [sp, #16]
 8009eba:	f898 1000 	ldrb.w	r1, [r8]
 8009ebe:	2206      	movs	r2, #6
 8009ec0:	485d      	ldr	r0, [pc, #372]	; (800a038 <_vfiprintf_r+0x228>)
 8009ec2:	f108 0701 	add.w	r7, r8, #1
 8009ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eca:	f000 fca3 	bl	800a814 <memchr>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f000 8095 	beq.w	8009ffe <_vfiprintf_r+0x1ee>
 8009ed4:	4b59      	ldr	r3, [pc, #356]	; (800a03c <_vfiprintf_r+0x22c>)
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 8088 	bne.w	8009fec <_vfiprintf_r+0x1dc>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	3307      	adds	r3, #7
 8009ee0:	f023 0307 	bic.w	r3, r3, #7
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eea:	4453      	add	r3, sl
 8009eec:	9309      	str	r3, [sp, #36]	; 0x24
 8009eee:	46b8      	mov	r8, r7
 8009ef0:	4645      	mov	r5, r8
 8009ef2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ef6:	b91b      	cbnz	r3, 8009f00 <_vfiprintf_r+0xf0>
 8009ef8:	ebb8 0907 	subs.w	r9, r8, r7
 8009efc:	d00f      	beq.n	8009f1e <_vfiprintf_r+0x10e>
 8009efe:	e003      	b.n	8009f08 <_vfiprintf_r+0xf8>
 8009f00:	2b25      	cmp	r3, #37	; 0x25
 8009f02:	d0f9      	beq.n	8009ef8 <_vfiprintf_r+0xe8>
 8009f04:	46a8      	mov	r8, r5
 8009f06:	e7f3      	b.n	8009ef0 <_vfiprintf_r+0xe0>
 8009f08:	464b      	mov	r3, r9
 8009f0a:	463a      	mov	r2, r7
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7ff ff6c 	bl	8009dec <__sfputs_r>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d07f      	beq.n	800a018 <_vfiprintf_r+0x208>
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	444b      	add	r3, r9
 8009f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1e:	f898 3000 	ldrb.w	r3, [r8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d078      	beq.n	800a018 <_vfiprintf_r+0x208>
 8009f26:	2300      	movs	r3, #0
 8009f28:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	9205      	str	r2, [sp, #20]
 8009f32:	9306      	str	r3, [sp, #24]
 8009f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f38:	931a      	str	r3, [sp, #104]	; 0x68
 8009f3a:	2701      	movs	r7, #1
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	7829      	ldrb	r1, [r5, #0]
 8009f40:	483f      	ldr	r0, [pc, #252]	; (800a040 <_vfiprintf_r+0x230>)
 8009f42:	f000 fc67 	bl	800a814 <memchr>
 8009f46:	f105 0801 	add.w	r8, r5, #1
 8009f4a:	9b04      	ldr	r3, [sp, #16]
 8009f4c:	b138      	cbz	r0, 8009f5e <_vfiprintf_r+0x14e>
 8009f4e:	4a3c      	ldr	r2, [pc, #240]	; (800a040 <_vfiprintf_r+0x230>)
 8009f50:	4645      	mov	r5, r8
 8009f52:	1a80      	subs	r0, r0, r2
 8009f54:	fa07 f000 	lsl.w	r0, r7, r0
 8009f58:	4318      	orrs	r0, r3
 8009f5a:	9004      	str	r0, [sp, #16]
 8009f5c:	e7ee      	b.n	8009f3c <_vfiprintf_r+0x12c>
 8009f5e:	06d9      	lsls	r1, r3, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2220      	movmi	r2, #32
 8009f64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f68:	071a      	lsls	r2, r3, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	222b      	movmi	r2, #43	; 0x2b
 8009f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f72:	782a      	ldrb	r2, [r5, #0]
 8009f74:	2a2a      	cmp	r2, #42	; 0x2a
 8009f76:	f43f af7e 	beq.w	8009e76 <_vfiprintf_r+0x66>
 8009f7a:	9a07      	ldr	r2, [sp, #28]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	200a      	movs	r0, #10
 8009f80:	46a8      	mov	r8, r5
 8009f82:	f898 3000 	ldrb.w	r3, [r8]
 8009f86:	3501      	adds	r5, #1
 8009f88:	3b30      	subs	r3, #48	; 0x30
 8009f8a:	2b09      	cmp	r3, #9
 8009f8c:	d803      	bhi.n	8009f96 <_vfiprintf_r+0x186>
 8009f8e:	fb00 3202 	mla	r2, r0, r2, r3
 8009f92:	2101      	movs	r1, #1
 8009f94:	e7f4      	b.n	8009f80 <_vfiprintf_r+0x170>
 8009f96:	2900      	cmp	r1, #0
 8009f98:	f43f af79 	beq.w	8009e8e <_vfiprintf_r+0x7e>
 8009f9c:	9207      	str	r2, [sp, #28]
 8009f9e:	e776      	b.n	8009e8e <_vfiprintf_r+0x7e>
 8009fa0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa6:	d10b      	bne.n	8009fc0 <_vfiprintf_r+0x1b0>
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	f108 0802 	add.w	r8, r8, #2
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	9203      	str	r2, [sp, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bfb8      	it	lt
 8009fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	e76b      	b.n	8009e98 <_vfiprintf_r+0x88>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	f108 0001 	add.w	r0, r8, #1
 8009fca:	250a      	movs	r5, #10
 8009fcc:	4680      	mov	r8, r0
 8009fce:	f898 2000 	ldrb.w	r2, [r8]
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	3a30      	subs	r2, #48	; 0x30
 8009fd6:	2a09      	cmp	r2, #9
 8009fd8:	d803      	bhi.n	8009fe2 <_vfiprintf_r+0x1d2>
 8009fda:	fb05 2101 	mla	r1, r5, r1, r2
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e7f4      	b.n	8009fcc <_vfiprintf_r+0x1bc>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f43f af58 	beq.w	8009e98 <_vfiprintf_r+0x88>
 8009fe8:	9105      	str	r1, [sp, #20]
 8009fea:	e755      	b.n	8009e98 <_vfiprintf_r+0x88>
 8009fec:	ab03      	add	r3, sp, #12
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4b14      	ldr	r3, [pc, #80]	; (800a044 <_vfiprintf_r+0x234>)
 8009ff4:	a904      	add	r1, sp, #16
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f3af 8000 	nop.w
 8009ffc:	e007      	b.n	800a00e <_vfiprintf_r+0x1fe>
 8009ffe:	ab03      	add	r3, sp, #12
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	4622      	mov	r2, r4
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <_vfiprintf_r+0x234>)
 800a006:	a904      	add	r1, sp, #16
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f893 	bl	800a134 <_printf_i>
 800a00e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a012:	4682      	mov	sl, r0
 800a014:	f47f af68 	bne.w	8009ee8 <_vfiprintf_r+0xd8>
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	065b      	lsls	r3, r3, #25
 800a01c:	f53f af28 	bmi.w	8009e70 <_vfiprintf_r+0x60>
 800a020:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a022:	b01d      	add	sp, #116	; 0x74
 800a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a028:	0800ab64 	.word	0x0800ab64
 800a02c:	0800ab84 	.word	0x0800ab84
 800a030:	0800aba4 	.word	0x0800aba4
 800a034:	0800abd2 	.word	0x0800abd2
 800a038:	0800abd6 	.word	0x0800abd6
 800a03c:	00000000 	.word	0x00000000
 800a040:	0800abcc 	.word	0x0800abcc
 800a044:	08009ded 	.word	0x08009ded

0800a048 <_printf_common>:
 800a048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	4691      	mov	r9, r2
 800a04e:	461f      	mov	r7, r3
 800a050:	690a      	ldr	r2, [r1, #16]
 800a052:	688b      	ldr	r3, [r1, #8]
 800a054:	4606      	mov	r6, r0
 800a056:	4293      	cmp	r3, r2
 800a058:	bfb8      	it	lt
 800a05a:	4613      	movlt	r3, r2
 800a05c:	f8c9 3000 	str.w	r3, [r9]
 800a060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a064:	460c      	mov	r4, r1
 800a066:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a06a:	b112      	cbz	r2, 800a072 <_printf_common+0x2a>
 800a06c:	3301      	adds	r3, #1
 800a06e:	f8c9 3000 	str.w	r3, [r9]
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	0699      	lsls	r1, r3, #26
 800a076:	bf42      	ittt	mi
 800a078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a07c:	3302      	addmi	r3, #2
 800a07e:	f8c9 3000 	strmi.w	r3, [r9]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	f015 0506 	ands.w	r5, r5, #6
 800a088:	d110      	bne.n	800a0ac <_printf_common+0x64>
 800a08a:	f104 0a19 	add.w	sl, r4, #25
 800a08e:	e007      	b.n	800a0a0 <_printf_common+0x58>
 800a090:	2301      	movs	r3, #1
 800a092:	4652      	mov	r2, sl
 800a094:	4639      	mov	r1, r7
 800a096:	4630      	mov	r0, r6
 800a098:	47c0      	blx	r8
 800a09a:	3001      	adds	r0, #1
 800a09c:	d01a      	beq.n	800a0d4 <_printf_common+0x8c>
 800a09e:	3501      	adds	r5, #1
 800a0a0:	68e3      	ldr	r3, [r4, #12]
 800a0a2:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a6:	1a9b      	subs	r3, r3, r2
 800a0a8:	429d      	cmp	r5, r3
 800a0aa:	dbf1      	blt.n	800a090 <_printf_common+0x48>
 800a0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	3300      	adds	r3, #0
 800a0b4:	bf18      	it	ne
 800a0b6:	2301      	movne	r3, #1
 800a0b8:	0692      	lsls	r2, r2, #26
 800a0ba:	d50f      	bpl.n	800a0dc <_printf_common+0x94>
 800a0bc:	18e1      	adds	r1, r4, r3
 800a0be:	2030      	movs	r0, #48	; 0x30
 800a0c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0ca:	4422      	add	r2, r4
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0d2:	e003      	b.n	800a0dc <_printf_common+0x94>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d0f4      	beq.n	800a0d4 <_printf_common+0x8c>
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	f8d9 5000 	ldr.w	r5, [r9]
 800a0f0:	68e3      	ldr	r3, [r4, #12]
 800a0f2:	f002 0206 	and.w	r2, r2, #6
 800a0f6:	2a04      	cmp	r2, #4
 800a0f8:	bf08      	it	eq
 800a0fa:	1b5d      	subeq	r5, r3, r5
 800a0fc:	6922      	ldr	r2, [r4, #16]
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	bf0c      	ite	eq
 800a102:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a106:	2500      	movne	r5, #0
 800a108:	4293      	cmp	r3, r2
 800a10a:	bfc4      	itt	gt
 800a10c:	1a9b      	subgt	r3, r3, r2
 800a10e:	18ed      	addgt	r5, r5, r3
 800a110:	f04f 0900 	mov.w	r9, #0
 800a114:	341a      	adds	r4, #26
 800a116:	454d      	cmp	r5, r9
 800a118:	d009      	beq.n	800a12e <_printf_common+0xe6>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4622      	mov	r2, r4
 800a11e:	4639      	mov	r1, r7
 800a120:	4630      	mov	r0, r6
 800a122:	47c0      	blx	r8
 800a124:	3001      	adds	r0, #1
 800a126:	d0d5      	beq.n	800a0d4 <_printf_common+0x8c>
 800a128:	f109 0901 	add.w	r9, r9, #1
 800a12c:	e7f3      	b.n	800a116 <_printf_common+0xce>
 800a12e:	2000      	movs	r0, #0
 800a130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a134 <_printf_i>:
 800a134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a138:	4617      	mov	r7, r2
 800a13a:	7e0a      	ldrb	r2, [r1, #24]
 800a13c:	b085      	sub	sp, #20
 800a13e:	2a6e      	cmp	r2, #110	; 0x6e
 800a140:	4698      	mov	r8, r3
 800a142:	4606      	mov	r6, r0
 800a144:	460c      	mov	r4, r1
 800a146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a148:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a14c:	f000 80ae 	beq.w	800a2ac <_printf_i+0x178>
 800a150:	d811      	bhi.n	800a176 <_printf_i+0x42>
 800a152:	2a63      	cmp	r2, #99	; 0x63
 800a154:	d022      	beq.n	800a19c <_printf_i+0x68>
 800a156:	d809      	bhi.n	800a16c <_printf_i+0x38>
 800a158:	2a00      	cmp	r2, #0
 800a15a:	f000 80bb 	beq.w	800a2d4 <_printf_i+0x1a0>
 800a15e:	2a58      	cmp	r2, #88	; 0x58
 800a160:	f040 80ca 	bne.w	800a2f8 <_printf_i+0x1c4>
 800a164:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a168:	4983      	ldr	r1, [pc, #524]	; (800a378 <_printf_i+0x244>)
 800a16a:	e055      	b.n	800a218 <_printf_i+0xe4>
 800a16c:	2a64      	cmp	r2, #100	; 0x64
 800a16e:	d01e      	beq.n	800a1ae <_printf_i+0x7a>
 800a170:	2a69      	cmp	r2, #105	; 0x69
 800a172:	d01c      	beq.n	800a1ae <_printf_i+0x7a>
 800a174:	e0c0      	b.n	800a2f8 <_printf_i+0x1c4>
 800a176:	2a73      	cmp	r2, #115	; 0x73
 800a178:	f000 80b0 	beq.w	800a2dc <_printf_i+0x1a8>
 800a17c:	d809      	bhi.n	800a192 <_printf_i+0x5e>
 800a17e:	2a6f      	cmp	r2, #111	; 0x6f
 800a180:	d02e      	beq.n	800a1e0 <_printf_i+0xac>
 800a182:	2a70      	cmp	r2, #112	; 0x70
 800a184:	f040 80b8 	bne.w	800a2f8 <_printf_i+0x1c4>
 800a188:	680a      	ldr	r2, [r1, #0]
 800a18a:	f042 0220 	orr.w	r2, r2, #32
 800a18e:	600a      	str	r2, [r1, #0]
 800a190:	e03e      	b.n	800a210 <_printf_i+0xdc>
 800a192:	2a75      	cmp	r2, #117	; 0x75
 800a194:	d024      	beq.n	800a1e0 <_printf_i+0xac>
 800a196:	2a78      	cmp	r2, #120	; 0x78
 800a198:	d03a      	beq.n	800a210 <_printf_i+0xdc>
 800a19a:	e0ad      	b.n	800a2f8 <_printf_i+0x1c4>
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a1a2:	1d11      	adds	r1, r2, #4
 800a1a4:	6019      	str	r1, [r3, #0]
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1ac:	e0a8      	b.n	800a300 <_printf_i+0x1cc>
 800a1ae:	6821      	ldr	r1, [r4, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a1b6:	d002      	beq.n	800a1be <_printf_i+0x8a>
 800a1b8:	1d11      	adds	r1, r2, #4
 800a1ba:	6019      	str	r1, [r3, #0]
 800a1bc:	e008      	b.n	800a1d0 <_printf_i+0x9c>
 800a1be:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a1c2:	f102 0104 	add.w	r1, r2, #4
 800a1c6:	6019      	str	r1, [r3, #0]
 800a1c8:	d002      	beq.n	800a1d0 <_printf_i+0x9c>
 800a1ca:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a1ce:	e000      	b.n	800a1d2 <_printf_i+0x9e>
 800a1d0:	6813      	ldr	r3, [r2, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da3c      	bge.n	800a250 <_printf_i+0x11c>
 800a1d6:	222d      	movs	r2, #45	; 0x2d
 800a1d8:	425b      	negs	r3, r3
 800a1da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a1de:	e037      	b.n	800a250 <_printf_i+0x11c>
 800a1e0:	6821      	ldr	r1, [r4, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a1e8:	d002      	beq.n	800a1f0 <_printf_i+0xbc>
 800a1ea:	1d11      	adds	r1, r2, #4
 800a1ec:	6019      	str	r1, [r3, #0]
 800a1ee:	e007      	b.n	800a200 <_printf_i+0xcc>
 800a1f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a1f4:	f102 0104 	add.w	r1, r2, #4
 800a1f8:	6019      	str	r1, [r3, #0]
 800a1fa:	d001      	beq.n	800a200 <_printf_i+0xcc>
 800a1fc:	8813      	ldrh	r3, [r2, #0]
 800a1fe:	e000      	b.n	800a202 <_printf_i+0xce>
 800a200:	6813      	ldr	r3, [r2, #0]
 800a202:	7e22      	ldrb	r2, [r4, #24]
 800a204:	495c      	ldr	r1, [pc, #368]	; (800a378 <_printf_i+0x244>)
 800a206:	2a6f      	cmp	r2, #111	; 0x6f
 800a208:	bf14      	ite	ne
 800a20a:	220a      	movne	r2, #10
 800a20c:	2208      	moveq	r2, #8
 800a20e:	e01b      	b.n	800a248 <_printf_i+0x114>
 800a210:	2278      	movs	r2, #120	; 0x78
 800a212:	495a      	ldr	r1, [pc, #360]	; (800a37c <_printf_i+0x248>)
 800a214:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a220:	f100 0504 	add.w	r5, r0, #4
 800a224:	601d      	str	r5, [r3, #0]
 800a226:	d103      	bne.n	800a230 <_printf_i+0xfc>
 800a228:	0655      	lsls	r5, r2, #25
 800a22a:	d501      	bpl.n	800a230 <_printf_i+0xfc>
 800a22c:	8803      	ldrh	r3, [r0, #0]
 800a22e:	e000      	b.n	800a232 <_printf_i+0xfe>
 800a230:	6803      	ldr	r3, [r0, #0]
 800a232:	07d0      	lsls	r0, r2, #31
 800a234:	bf44      	itt	mi
 800a236:	f042 0220 	orrmi.w	r2, r2, #32
 800a23a:	6022      	strmi	r2, [r4, #0]
 800a23c:	b91b      	cbnz	r3, 800a246 <_printf_i+0x112>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	f022 0220 	bic.w	r2, r2, #32
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	2210      	movs	r2, #16
 800a248:	2000      	movs	r0, #0
 800a24a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a24e:	e001      	b.n	800a254 <_printf_i+0x120>
 800a250:	4949      	ldr	r1, [pc, #292]	; (800a378 <_printf_i+0x244>)
 800a252:	220a      	movs	r2, #10
 800a254:	6865      	ldr	r5, [r4, #4]
 800a256:	2d00      	cmp	r5, #0
 800a258:	60a5      	str	r5, [r4, #8]
 800a25a:	db08      	blt.n	800a26e <_printf_i+0x13a>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	f020 0004 	bic.w	r0, r0, #4
 800a262:	6020      	str	r0, [r4, #0]
 800a264:	b92b      	cbnz	r3, 800a272 <_printf_i+0x13e>
 800a266:	2d00      	cmp	r5, #0
 800a268:	d17d      	bne.n	800a366 <_printf_i+0x232>
 800a26a:	4675      	mov	r5, lr
 800a26c:	e00c      	b.n	800a288 <_printf_i+0x154>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d079      	beq.n	800a366 <_printf_i+0x232>
 800a272:	4675      	mov	r5, lr
 800a274:	fbb3 f0f2 	udiv	r0, r3, r2
 800a278:	fb02 3310 	mls	r3, r2, r0, r3
 800a27c:	5ccb      	ldrb	r3, [r1, r3]
 800a27e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a282:	4603      	mov	r3, r0
 800a284:	2800      	cmp	r0, #0
 800a286:	d1f5      	bne.n	800a274 <_printf_i+0x140>
 800a288:	2a08      	cmp	r2, #8
 800a28a:	d10b      	bne.n	800a2a4 <_printf_i+0x170>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	07da      	lsls	r2, r3, #31
 800a290:	d508      	bpl.n	800a2a4 <_printf_i+0x170>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	6862      	ldr	r2, [r4, #4]
 800a296:	429a      	cmp	r2, r3
 800a298:	bfde      	ittt	le
 800a29a:	2330      	movle	r3, #48	; 0x30
 800a29c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2a4:	ebc5 030e 	rsb	r3, r5, lr
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	e02e      	b.n	800a30a <_printf_i+0x1d6>
 800a2ac:	6808      	ldr	r0, [r1, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a2b4:	6949      	ldr	r1, [r1, #20]
 800a2b6:	d003      	beq.n	800a2c0 <_printf_i+0x18c>
 800a2b8:	1d10      	adds	r0, r2, #4
 800a2ba:	6018      	str	r0, [r3, #0]
 800a2bc:	6813      	ldr	r3, [r2, #0]
 800a2be:	e008      	b.n	800a2d2 <_printf_i+0x19e>
 800a2c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2c4:	f102 0004 	add.w	r0, r2, #4
 800a2c8:	6018      	str	r0, [r3, #0]
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	d001      	beq.n	800a2d2 <_printf_i+0x19e>
 800a2ce:	8019      	strh	r1, [r3, #0]
 800a2d0:	e000      	b.n	800a2d4 <_printf_i+0x1a0>
 800a2d2:	6019      	str	r1, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	4675      	mov	r5, lr
 800a2da:	e016      	b.n	800a30a <_printf_i+0x1d6>
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	1d11      	adds	r1, r2, #4
 800a2e0:	6019      	str	r1, [r3, #0]
 800a2e2:	6815      	ldr	r5, [r2, #0]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 fa93 	bl	800a814 <memchr>
 800a2ee:	b108      	cbz	r0, 800a2f4 <_printf_i+0x1c0>
 800a2f0:	1b40      	subs	r0, r0, r5
 800a2f2:	6060      	str	r0, [r4, #4]
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	e004      	b.n	800a302 <_printf_i+0x1ce>
 800a2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a300:	2301      	movs	r3, #1
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	2300      	movs	r3, #0
 800a306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30a:	f8cd 8000 	str.w	r8, [sp]
 800a30e:	463b      	mov	r3, r7
 800a310:	aa03      	add	r2, sp, #12
 800a312:	4621      	mov	r1, r4
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff fe97 	bl	800a048 <_printf_common>
 800a31a:	3001      	adds	r0, #1
 800a31c:	d102      	bne.n	800a324 <_printf_i+0x1f0>
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	e026      	b.n	800a372 <_printf_i+0x23e>
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	462a      	mov	r2, r5
 800a328:	4639      	mov	r1, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	47c0      	blx	r8
 800a32e:	3001      	adds	r0, #1
 800a330:	d0f5      	beq.n	800a31e <_printf_i+0x1ea>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	079b      	lsls	r3, r3, #30
 800a336:	d510      	bpl.n	800a35a <_printf_i+0x226>
 800a338:	2500      	movs	r5, #0
 800a33a:	f104 0919 	add.w	r9, r4, #25
 800a33e:	e007      	b.n	800a350 <_printf_i+0x21c>
 800a340:	2301      	movs	r3, #1
 800a342:	464a      	mov	r2, r9
 800a344:	4639      	mov	r1, r7
 800a346:	4630      	mov	r0, r6
 800a348:	47c0      	blx	r8
 800a34a:	3001      	adds	r0, #1
 800a34c:	d0e7      	beq.n	800a31e <_printf_i+0x1ea>
 800a34e:	3501      	adds	r5, #1
 800a350:	68e3      	ldr	r3, [r4, #12]
 800a352:	9a03      	ldr	r2, [sp, #12]
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	429d      	cmp	r5, r3
 800a358:	dbf2      	blt.n	800a340 <_printf_i+0x20c>
 800a35a:	68e0      	ldr	r0, [r4, #12]
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	4298      	cmp	r0, r3
 800a360:	bfb8      	it	lt
 800a362:	4618      	movlt	r0, r3
 800a364:	e005      	b.n	800a372 <_printf_i+0x23e>
 800a366:	780b      	ldrb	r3, [r1, #0]
 800a368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a370:	e78a      	b.n	800a288 <_printf_i+0x154>
 800a372:	b005      	add	sp, #20
 800a374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a378:	0800abdd 	.word	0x0800abdd
 800a37c:	0800abee 	.word	0x0800abee

0800a380 <__sread>:
 800a380:	b510      	push	{r4, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	f000 fa52 	bl	800a830 <_read_r>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	bfab      	itete	ge
 800a390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a392:	89a3      	ldrhlt	r3, [r4, #12]
 800a394:	181b      	addge	r3, r3, r0
 800a396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a39a:	bfac      	ite	ge
 800a39c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a39e:	81a3      	strhlt	r3, [r4, #12]
 800a3a0:	bd10      	pop	{r4, pc}

0800a3a2 <__swrite>:
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	461f      	mov	r7, r3
 800a3a8:	898b      	ldrh	r3, [r1, #12]
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	05db      	lsls	r3, r3, #23
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	d505      	bpl.n	800a3c0 <__swrite+0x1e>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3bc:	f000 f9b8 	bl	800a730 <_lseek_r>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	f000 b86b 	b.w	800a4b0 <_write_r>

0800a3da <__sseek>:
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	460c      	mov	r4, r1
 800a3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e2:	f000 f9a5 	bl	800a730 <_lseek_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	bf15      	itete	ne
 800a3ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3f6:	81a3      	strheq	r3, [r4, #12]
 800a3f8:	bf18      	it	ne
 800a3fa:	81a3      	strhne	r3, [r4, #12]
 800a3fc:	bd10      	pop	{r4, pc}

0800a3fe <__sclose>:
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 b8d5 	b.w	800a5b0 <_close_r>
	...

0800a408 <__swbuf_r>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	460f      	mov	r7, r1
 800a40c:	4614      	mov	r4, r2
 800a40e:	4606      	mov	r6, r0
 800a410:	b118      	cbz	r0, 800a41a <__swbuf_r+0x12>
 800a412:	6983      	ldr	r3, [r0, #24]
 800a414:	b90b      	cbnz	r3, 800a41a <__swbuf_r+0x12>
 800a416:	f7ff fc47 	bl	8009ca8 <__sinit>
 800a41a:	4b22      	ldr	r3, [pc, #136]	; (800a4a4 <__swbuf_r+0x9c>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d101      	bne.n	800a424 <__swbuf_r+0x1c>
 800a420:	6874      	ldr	r4, [r6, #4]
 800a422:	e008      	b.n	800a436 <__swbuf_r+0x2e>
 800a424:	4b20      	ldr	r3, [pc, #128]	; (800a4a8 <__swbuf_r+0xa0>)
 800a426:	429c      	cmp	r4, r3
 800a428:	d101      	bne.n	800a42e <__swbuf_r+0x26>
 800a42a:	68b4      	ldr	r4, [r6, #8]
 800a42c:	e003      	b.n	800a436 <__swbuf_r+0x2e>
 800a42e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ac <__swbuf_r+0xa4>)
 800a430:	429c      	cmp	r4, r3
 800a432:	bf08      	it	eq
 800a434:	68f4      	ldreq	r4, [r6, #12]
 800a436:	69a3      	ldr	r3, [r4, #24]
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	071a      	lsls	r2, r3, #28
 800a43e:	d509      	bpl.n	800a454 <__swbuf_r+0x4c>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b13b      	cbz	r3, 800a454 <__swbuf_r+0x4c>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	6920      	ldr	r0, [r4, #16]
 800a448:	b2fd      	uxtb	r5, r7
 800a44a:	1a18      	subs	r0, r3, r0
 800a44c:	6963      	ldr	r3, [r4, #20]
 800a44e:	4298      	cmp	r0, r3
 800a450:	db0f      	blt.n	800a472 <__swbuf_r+0x6a>
 800a452:	e008      	b.n	800a466 <__swbuf_r+0x5e>
 800a454:	4621      	mov	r1, r4
 800a456:	4630      	mov	r0, r6
 800a458:	f000 f83c 	bl	800a4d4 <__swsetup_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d0f1      	beq.n	800a444 <__swbuf_r+0x3c>
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a466:	4621      	mov	r1, r4
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f937 	bl	800a6dc <_fflush_r>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d1f6      	bne.n	800a460 <__swbuf_r+0x58>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	3b01      	subs	r3, #1
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	6022      	str	r2, [r4, #0]
 800a47e:	701f      	strb	r7, [r3, #0]
 800a480:	6962      	ldr	r2, [r4, #20]
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	4293      	cmp	r3, r2
 800a486:	d004      	beq.n	800a492 <__swbuf_r+0x8a>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d507      	bpl.n	800a49e <__swbuf_r+0x96>
 800a48e:	2d0a      	cmp	r5, #10
 800a490:	d105      	bne.n	800a49e <__swbuf_r+0x96>
 800a492:	4621      	mov	r1, r4
 800a494:	4630      	mov	r0, r6
 800a496:	f000 f921 	bl	800a6dc <_fflush_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1e0      	bne.n	800a460 <__swbuf_r+0x58>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0800ab64 	.word	0x0800ab64
 800a4a8:	0800ab84 	.word	0x0800ab84
 800a4ac:	0800aba4 	.word	0x0800aba4

0800a4b0 <_write_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4c07      	ldr	r4, [pc, #28]	; (800a4d0 <_write_r+0x20>)
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	4608      	mov	r0, r1
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f000 fa20 	bl	800a904 <_write>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_write_r+0x1e>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_write_r+0x1e>
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	20002740 	.word	0x20002740

0800a4d4 <__swsetup_r>:
 800a4d4:	4b32      	ldr	r3, [pc, #200]	; (800a5a0 <__swsetup_r+0xcc>)
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	b125      	cbz	r5, 800a4ea <__swsetup_r+0x16>
 800a4e0:	69ab      	ldr	r3, [r5, #24]
 800a4e2:	b913      	cbnz	r3, 800a4ea <__swsetup_r+0x16>
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f7ff fbdf 	bl	8009ca8 <__sinit>
 800a4ea:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <__swsetup_r+0xd0>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	d101      	bne.n	800a4f4 <__swsetup_r+0x20>
 800a4f0:	686c      	ldr	r4, [r5, #4]
 800a4f2:	e008      	b.n	800a506 <__swsetup_r+0x32>
 800a4f4:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <__swsetup_r+0xd4>)
 800a4f6:	429c      	cmp	r4, r3
 800a4f8:	d101      	bne.n	800a4fe <__swsetup_r+0x2a>
 800a4fa:	68ac      	ldr	r4, [r5, #8]
 800a4fc:	e003      	b.n	800a506 <__swsetup_r+0x32>
 800a4fe:	4b2b      	ldr	r3, [pc, #172]	; (800a5ac <__swsetup_r+0xd8>)
 800a500:	429c      	cmp	r4, r3
 800a502:	bf08      	it	eq
 800a504:	68ec      	ldreq	r4, [r5, #12]
 800a506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	0715      	lsls	r5, r2, #28
 800a50e:	d41d      	bmi.n	800a54c <__swsetup_r+0x78>
 800a510:	06d0      	lsls	r0, r2, #27
 800a512:	d402      	bmi.n	800a51a <__swsetup_r+0x46>
 800a514:	2209      	movs	r2, #9
 800a516:	6032      	str	r2, [r6, #0]
 800a518:	e03a      	b.n	800a590 <__swsetup_r+0xbc>
 800a51a:	0751      	lsls	r1, r2, #29
 800a51c:	d512      	bpl.n	800a544 <__swsetup_r+0x70>
 800a51e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a520:	b141      	cbz	r1, 800a534 <__swsetup_r+0x60>
 800a522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a526:	4299      	cmp	r1, r3
 800a528:	d002      	beq.n	800a530 <__swsetup_r+0x5c>
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff faaa 	bl	8009a84 <_free_r>
 800a530:	2300      	movs	r3, #0
 800a532:	6363      	str	r3, [r4, #52]	; 0x34
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a53a:	81a3      	strh	r3, [r4, #12]
 800a53c:	2300      	movs	r3, #0
 800a53e:	6063      	str	r3, [r4, #4]
 800a540:	6923      	ldr	r3, [r4, #16]
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f043 0308 	orr.w	r3, r3, #8
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	b94b      	cbnz	r3, 800a564 <__swsetup_r+0x90>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a55a:	d003      	beq.n	800a564 <__swsetup_r+0x90>
 800a55c:	4621      	mov	r1, r4
 800a55e:	4630      	mov	r0, r6
 800a560:	f000 f91c 	bl	800a79c <__smakebuf_r>
 800a564:	89a2      	ldrh	r2, [r4, #12]
 800a566:	f012 0301 	ands.w	r3, r2, #1
 800a56a:	d005      	beq.n	800a578 <__swsetup_r+0xa4>
 800a56c:	2300      	movs	r3, #0
 800a56e:	60a3      	str	r3, [r4, #8]
 800a570:	6963      	ldr	r3, [r4, #20]
 800a572:	425b      	negs	r3, r3
 800a574:	61a3      	str	r3, [r4, #24]
 800a576:	e003      	b.n	800a580 <__swsetup_r+0xac>
 800a578:	0792      	lsls	r2, r2, #30
 800a57a:	bf58      	it	pl
 800a57c:	6963      	ldrpl	r3, [r4, #20]
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	b95b      	cbnz	r3, 800a59c <__swsetup_r+0xc8>
 800a584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a588:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800a58c:	b280      	uxth	r0, r0
 800a58e:	b130      	cbz	r0, 800a59e <__swsetup_r+0xca>
 800a590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	2000      	movs	r0, #0
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	200001fc 	.word	0x200001fc
 800a5a4:	0800ab64 	.word	0x0800ab64
 800a5a8:	0800ab84 	.word	0x0800ab84
 800a5ac:	0800aba4 	.word	0x0800aba4

0800a5b0 <_close_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4c06      	ldr	r4, [pc, #24]	; (800a5cc <_close_r+0x1c>)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	f000 f96c 	bl	800a898 <_close>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_close_r+0x1a>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_close_r+0x1a>
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20002740 	.word	0x20002740

0800a5d0 <__sflush_r>:
 800a5d0:	898a      	ldrh	r2, [r1, #12]
 800a5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	0710      	lsls	r0, r2, #28
 800a5da:	460c      	mov	r4, r1
 800a5dc:	d459      	bmi.n	800a692 <__sflush_r+0xc2>
 800a5de:	684b      	ldr	r3, [r1, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dc02      	bgt.n	800a5ea <__sflush_r+0x1a>
 800a5e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dd17      	ble.n	800a61a <__sflush_r+0x4a>
 800a5ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ec:	b1ae      	cbz	r6, 800a61a <__sflush_r+0x4a>
 800a5ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	682f      	ldr	r7, [r5, #0]
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	b10a      	cbz	r2, 800a600 <__sflush_r+0x30>
 800a5fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5fe:	e015      	b.n	800a62c <__sflush_r+0x5c>
 800a600:	6a21      	ldr	r1, [r4, #32]
 800a602:	2301      	movs	r3, #1
 800a604:	4628      	mov	r0, r5
 800a606:	47b0      	blx	r6
 800a608:	1c41      	adds	r1, r0, #1
 800a60a:	d10f      	bne.n	800a62c <__sflush_r+0x5c>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b16b      	cbz	r3, 800a62c <__sflush_r+0x5c>
 800a610:	2b1d      	cmp	r3, #29
 800a612:	d001      	beq.n	800a618 <__sflush_r+0x48>
 800a614:	2b16      	cmp	r3, #22
 800a616:	d103      	bne.n	800a620 <__sflush_r+0x50>
 800a618:	602f      	str	r7, [r5, #0]
 800a61a:	2000      	movs	r0, #0
 800a61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	075a      	lsls	r2, r3, #29
 800a630:	d505      	bpl.n	800a63e <__sflush_r+0x6e>
 800a632:	6863      	ldr	r3, [r4, #4]
 800a634:	1ac0      	subs	r0, r0, r3
 800a636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a638:	b10b      	cbz	r3, 800a63e <__sflush_r+0x6e>
 800a63a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a63c:	1ac0      	subs	r0, r0, r3
 800a63e:	2300      	movs	r3, #0
 800a640:	4602      	mov	r2, r0
 800a642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a644:	6a21      	ldr	r1, [r4, #32]
 800a646:	4628      	mov	r0, r5
 800a648:	47b0      	blx	r6
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	d106      	bne.n	800a65e <__sflush_r+0x8e>
 800a650:	6829      	ldr	r1, [r5, #0]
 800a652:	291d      	cmp	r1, #29
 800a654:	d839      	bhi.n	800a6ca <__sflush_r+0xfa>
 800a656:	4a20      	ldr	r2, [pc, #128]	; (800a6d8 <__sflush_r+0x108>)
 800a658:	40ca      	lsrs	r2, r1
 800a65a:	07d6      	lsls	r6, r2, #31
 800a65c:	d535      	bpl.n	800a6ca <__sflush_r+0xfa>
 800a65e:	2200      	movs	r2, #0
 800a660:	6062      	str	r2, [r4, #4]
 800a662:	6922      	ldr	r2, [r4, #16]
 800a664:	04d9      	lsls	r1, r3, #19
 800a666:	6022      	str	r2, [r4, #0]
 800a668:	d504      	bpl.n	800a674 <__sflush_r+0xa4>
 800a66a:	1c42      	adds	r2, r0, #1
 800a66c:	d101      	bne.n	800a672 <__sflush_r+0xa2>
 800a66e:	682b      	ldr	r3, [r5, #0]
 800a670:	b903      	cbnz	r3, 800a674 <__sflush_r+0xa4>
 800a672:	6560      	str	r0, [r4, #84]	; 0x54
 800a674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a676:	602f      	str	r7, [r5, #0]
 800a678:	2900      	cmp	r1, #0
 800a67a:	d0ce      	beq.n	800a61a <__sflush_r+0x4a>
 800a67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a680:	4299      	cmp	r1, r3
 800a682:	d002      	beq.n	800a68a <__sflush_r+0xba>
 800a684:	4628      	mov	r0, r5
 800a686:	f7ff f9fd 	bl	8009a84 <_free_r>
 800a68a:	2000      	movs	r0, #0
 800a68c:	6360      	str	r0, [r4, #52]	; 0x34
 800a68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a692:	690f      	ldr	r7, [r1, #16]
 800a694:	2f00      	cmp	r7, #0
 800a696:	d0c0      	beq.n	800a61a <__sflush_r+0x4a>
 800a698:	0793      	lsls	r3, r2, #30
 800a69a:	680e      	ldr	r6, [r1, #0]
 800a69c:	bf0c      	ite	eq
 800a69e:	694b      	ldreq	r3, [r1, #20]
 800a6a0:	2300      	movne	r3, #0
 800a6a2:	ebc7 0806 	rsb	r8, r7, r6
 800a6a6:	600f      	str	r7, [r1, #0]
 800a6a8:	608b      	str	r3, [r1, #8]
 800a6aa:	e002      	b.n	800a6b2 <__sflush_r+0xe2>
 800a6ac:	4407      	add	r7, r0
 800a6ae:	ebc0 0808 	rsb	r8, r0, r8
 800a6b2:	f1b8 0f00 	cmp.w	r8, #0
 800a6b6:	ddb0      	ble.n	800a61a <__sflush_r+0x4a>
 800a6b8:	4643      	mov	r3, r8
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	6a21      	ldr	r1, [r4, #32]
 800a6be:	4628      	mov	r0, r5
 800a6c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6c2:	47b0      	blx	r6
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	dcf1      	bgt.n	800a6ac <__sflush_r+0xdc>
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	20400001 	.word	0x20400001

0800a6dc <_fflush_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	690b      	ldr	r3, [r1, #16]
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	b1db      	cbz	r3, 800a71e <_fflush_r+0x42>
 800a6e6:	b118      	cbz	r0, 800a6f0 <_fflush_r+0x14>
 800a6e8:	6983      	ldr	r3, [r0, #24]
 800a6ea:	b90b      	cbnz	r3, 800a6f0 <_fflush_r+0x14>
 800a6ec:	f7ff fadc 	bl	8009ca8 <__sinit>
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <_fflush_r+0x48>)
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	d101      	bne.n	800a6fa <_fflush_r+0x1e>
 800a6f6:	686c      	ldr	r4, [r5, #4]
 800a6f8:	e008      	b.n	800a70c <_fflush_r+0x30>
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <_fflush_r+0x4c>)
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	d101      	bne.n	800a704 <_fflush_r+0x28>
 800a700:	68ac      	ldr	r4, [r5, #8]
 800a702:	e003      	b.n	800a70c <_fflush_r+0x30>
 800a704:	4b09      	ldr	r3, [pc, #36]	; (800a72c <_fflush_r+0x50>)
 800a706:	429c      	cmp	r4, r3
 800a708:	bf08      	it	eq
 800a70a:	68ec      	ldreq	r4, [r5, #12]
 800a70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a710:	b12b      	cbz	r3, 800a71e <_fflush_r+0x42>
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a71a:	f7ff bf59 	b.w	800a5d0 <__sflush_r>
 800a71e:	2000      	movs	r0, #0
 800a720:	bd38      	pop	{r3, r4, r5, pc}
 800a722:	bf00      	nop
 800a724:	0800ab64 	.word	0x0800ab64
 800a728:	0800ab84 	.word	0x0800ab84
 800a72c:	0800aba4 	.word	0x0800aba4

0800a730 <_lseek_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4c07      	ldr	r4, [pc, #28]	; (800a750 <_lseek_r+0x20>)
 800a734:	4605      	mov	r5, r0
 800a736:	4608      	mov	r0, r1
 800a738:	4611      	mov	r1, r2
 800a73a:	2200      	movs	r2, #0
 800a73c:	6022      	str	r2, [r4, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	f000 f8c2 	bl	800a8c8 <_lseek>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	d102      	bne.n	800a74e <_lseek_r+0x1e>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	b103      	cbz	r3, 800a74e <_lseek_r+0x1e>
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	20002740 	.word	0x20002740

0800a754 <__swhatbuf_r>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	460e      	mov	r6, r1
 800a758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75c:	b090      	sub	sp, #64	; 0x40
 800a75e:	2900      	cmp	r1, #0
 800a760:	4614      	mov	r4, r2
 800a762:	461d      	mov	r5, r3
 800a764:	da06      	bge.n	800a774 <__swhatbuf_r+0x20>
 800a766:	2300      	movs	r3, #0
 800a768:	602b      	str	r3, [r5, #0]
 800a76a:	89b3      	ldrh	r3, [r6, #12]
 800a76c:	061a      	lsls	r2, r3, #24
 800a76e:	d50e      	bpl.n	800a78e <__swhatbuf_r+0x3a>
 800a770:	2340      	movs	r3, #64	; 0x40
 800a772:	e00e      	b.n	800a792 <__swhatbuf_r+0x3e>
 800a774:	aa01      	add	r2, sp, #4
 800a776:	f000 f86d 	bl	800a854 <_fstat_r>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	dbf3      	blt.n	800a766 <__swhatbuf_r+0x12>
 800a77e:	9a02      	ldr	r2, [sp, #8]
 800a780:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a784:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a788:	425a      	negs	r2, r3
 800a78a:	415a      	adcs	r2, r3
 800a78c:	602a      	str	r2, [r5, #0]
 800a78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a792:	2000      	movs	r0, #0
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	b010      	add	sp, #64	; 0x40
 800a798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a79c <__smakebuf_r>:
 800a79c:	898b      	ldrh	r3, [r1, #12]
 800a79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7a0:	079e      	lsls	r6, r3, #30
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	d410      	bmi.n	800a7ca <__smakebuf_r+0x2e>
 800a7a8:	ab01      	add	r3, sp, #4
 800a7aa:	466a      	mov	r2, sp
 800a7ac:	f7ff ffd2 	bl	800a754 <__swhatbuf_r>
 800a7b0:	9900      	ldr	r1, [sp, #0]
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f7ff f9b1 	bl	8009b1c <_malloc_r>
 800a7ba:	b968      	cbnz	r0, 800a7d8 <__smakebuf_r+0x3c>
 800a7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c0:	059a      	lsls	r2, r3, #22
 800a7c2:	d422      	bmi.n	800a80a <__smakebuf_r+0x6e>
 800a7c4:	f043 0302 	orr.w	r3, r3, #2
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	e018      	b.n	800a80a <__smakebuf_r+0x6e>
 800a7d8:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <__smakebuf_r+0x74>)
 800a7da:	62ab      	str	r3, [r5, #40]	; 0x28
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e4:	81a3      	strh	r3, [r4, #12]
 800a7e6:	9b00      	ldr	r3, [sp, #0]
 800a7e8:	6120      	str	r0, [r4, #16]
 800a7ea:	6163      	str	r3, [r4, #20]
 800a7ec:	9b01      	ldr	r3, [sp, #4]
 800a7ee:	b14b      	cbz	r3, 800a804 <__smakebuf_r+0x68>
 800a7f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 f83f 	bl	800a878 <_isatty_r>
 800a7fa:	b118      	cbz	r0, 800a804 <__smakebuf_r+0x68>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f043 0301 	orr.w	r3, r3, #1
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	89a0      	ldrh	r0, [r4, #12]
 800a806:	4330      	orrs	r0, r6
 800a808:	81a0      	strh	r0, [r4, #12]
 800a80a:	b002      	add	sp, #8
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	bf00      	nop
 800a810:	08009c29 	.word	0x08009c29

0800a814 <memchr>:
 800a814:	b510      	push	{r4, lr}
 800a816:	b2c9      	uxtb	r1, r1
 800a818:	4402      	add	r2, r0
 800a81a:	4290      	cmp	r0, r2
 800a81c:	4603      	mov	r3, r0
 800a81e:	d005      	beq.n	800a82c <memchr+0x18>
 800a820:	781c      	ldrb	r4, [r3, #0]
 800a822:	3001      	adds	r0, #1
 800a824:	428c      	cmp	r4, r1
 800a826:	d1f8      	bne.n	800a81a <memchr+0x6>
 800a828:	4618      	mov	r0, r3
 800a82a:	bd10      	pop	{r4, pc}
 800a82c:	2000      	movs	r0, #0
 800a82e:	bd10      	pop	{r4, pc}

0800a830 <_read_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4c07      	ldr	r4, [pc, #28]	; (800a850 <_read_r+0x20>)
 800a834:	4605      	mov	r5, r0
 800a836:	4608      	mov	r0, r1
 800a838:	4611      	mov	r1, r2
 800a83a:	2200      	movs	r2, #0
 800a83c:	6022      	str	r2, [r4, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	f000 f84a 	bl	800a8d8 <_read>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_read_r+0x1e>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_read_r+0x1e>
 800a84c:	602b      	str	r3, [r5, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20002740 	.word	0x20002740

0800a854 <_fstat_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4c07      	ldr	r4, [pc, #28]	; (800a874 <_fstat_r+0x20>)
 800a858:	2300      	movs	r3, #0
 800a85a:	4605      	mov	r5, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	f000 f821 	bl	800a8a8 <_fstat>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	d102      	bne.n	800a870 <_fstat_r+0x1c>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	b103      	cbz	r3, 800a870 <_fstat_r+0x1c>
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	bd38      	pop	{r3, r4, r5, pc}
 800a872:	bf00      	nop
 800a874:	20002740 	.word	0x20002740

0800a878 <_isatty_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4c06      	ldr	r4, [pc, #24]	; (800a894 <_isatty_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4605      	mov	r5, r0
 800a880:	4608      	mov	r0, r1
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	f000 f818 	bl	800a8b8 <_isatty>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_isatty_r+0x1a>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_isatty_r+0x1a>
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20002740 	.word	0x20002740

0800a898 <_close>:
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <_close+0xc>)
 800a89a:	2258      	movs	r2, #88	; 0x58
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a2:	4770      	bx	lr
 800a8a4:	20002740 	.word	0x20002740

0800a8a8 <_fstat>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <_fstat+0xc>)
 800a8aa:	2258      	movs	r2, #88	; 0x58
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	4770      	bx	lr
 800a8b4:	20002740 	.word	0x20002740

0800a8b8 <_isatty>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <_isatty+0xc>)
 800a8ba:	2258      	movs	r2, #88	; 0x58
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	20002740 	.word	0x20002740

0800a8c8 <_lseek>:
 800a8c8:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <_lseek+0xc>)
 800a8ca:	2258      	movs	r2, #88	; 0x58
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d2:	4770      	bx	lr
 800a8d4:	20002740 	.word	0x20002740

0800a8d8 <_read>:
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <_read+0xc>)
 800a8da:	2258      	movs	r2, #88	; 0x58
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	4770      	bx	lr
 800a8e4:	20002740 	.word	0x20002740

0800a8e8 <_sbrk>:
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <_sbrk+0x14>)
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6819      	ldr	r1, [r3, #0]
 800a8ee:	b909      	cbnz	r1, 800a8f4 <_sbrk+0xc>
 800a8f0:	4903      	ldr	r1, [pc, #12]	; (800a900 <_sbrk+0x18>)
 800a8f2:	6019      	str	r1, [r3, #0]
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	4402      	add	r2, r0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	4770      	bx	lr
 800a8fc:	20002484 	.word	0x20002484
 800a900:	20002744 	.word	0x20002744

0800a904 <_write>:
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <_write+0xc>)
 800a906:	2258      	movs	r2, #88	; 0x58
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	4770      	bx	lr
 800a910:	20002740 	.word	0x20002740

0800a914 <_init>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <_fini>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr
